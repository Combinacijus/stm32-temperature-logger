
STM32TempCube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c38  0800a2b8  0800a2b8  0001a2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aef0  0800aef0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aef0  0800aef0  0001aef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aef8  0800aef8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aef8  0800aef8  0001aef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aefc  0800aefc  0001aefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800af00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  200001e4  0800b0e4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  0800b0e4  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013224  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002773  00000000  00000000  00033431  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d8  00000000  00000000  00035ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001258  00000000  00000000  00036e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002aa2  00000000  00000000  000380d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010147  00000000  00000000  0003ab7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093149  00000000  00000000  0004acc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dde0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c48  00000000  00000000  000dde88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a29c 	.word	0x0800a29c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800a29c 	.word	0x0800a29c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <__aeabi_ldivmod>:
 8001110:	b97b      	cbnz	r3, 8001132 <__aeabi_ldivmod+0x22>
 8001112:	b972      	cbnz	r2, 8001132 <__aeabi_ldivmod+0x22>
 8001114:	2900      	cmp	r1, #0
 8001116:	bfbe      	ittt	lt
 8001118:	2000      	movlt	r0, #0
 800111a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800111e:	e006      	blt.n	800112e <__aeabi_ldivmod+0x1e>
 8001120:	bf08      	it	eq
 8001122:	2800      	cmpeq	r0, #0
 8001124:	bf1c      	itt	ne
 8001126:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800112a:	f04f 30ff 	movne.w	r0, #4294967295
 800112e:	f000 b9a7 	b.w	8001480 <__aeabi_idiv0>
 8001132:	f1ad 0c08 	sub.w	ip, sp, #8
 8001136:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800113a:	2900      	cmp	r1, #0
 800113c:	db09      	blt.n	8001152 <__aeabi_ldivmod+0x42>
 800113e:	2b00      	cmp	r3, #0
 8001140:	db1a      	blt.n	8001178 <__aeabi_ldivmod+0x68>
 8001142:	f000 f835 	bl	80011b0 <__udivmoddi4>
 8001146:	f8dd e004 	ldr.w	lr, [sp, #4]
 800114a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800114e:	b004      	add	sp, #16
 8001150:	4770      	bx	lr
 8001152:	4240      	negs	r0, r0
 8001154:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	db1b      	blt.n	8001194 <__aeabi_ldivmod+0x84>
 800115c:	f000 f828 	bl	80011b0 <__udivmoddi4>
 8001160:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001168:	b004      	add	sp, #16
 800116a:	4240      	negs	r0, r0
 800116c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001170:	4252      	negs	r2, r2
 8001172:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001176:	4770      	bx	lr
 8001178:	4252      	negs	r2, r2
 800117a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800117e:	f000 f817 	bl	80011b0 <__udivmoddi4>
 8001182:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800118a:	b004      	add	sp, #16
 800118c:	4240      	negs	r0, r0
 800118e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001192:	4770      	bx	lr
 8001194:	4252      	negs	r2, r2
 8001196:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800119a:	f000 f809 	bl	80011b0 <__udivmoddi4>
 800119e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011a6:	b004      	add	sp, #16
 80011a8:	4252      	negs	r2, r2
 80011aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ae:	4770      	bx	lr

080011b0 <__udivmoddi4>:
 80011b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b4:	468c      	mov	ip, r1
 80011b6:	4604      	mov	r4, r0
 80011b8:	9e08      	ldr	r6, [sp, #32]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d14b      	bne.n	8001256 <__udivmoddi4+0xa6>
 80011be:	428a      	cmp	r2, r1
 80011c0:	4615      	mov	r5, r2
 80011c2:	d967      	bls.n	8001294 <__udivmoddi4+0xe4>
 80011c4:	fab2 f282 	clz	r2, r2
 80011c8:	b14a      	cbz	r2, 80011de <__udivmoddi4+0x2e>
 80011ca:	f1c2 0720 	rsb	r7, r2, #32
 80011ce:	fa01 f302 	lsl.w	r3, r1, r2
 80011d2:	fa20 f707 	lsr.w	r7, r0, r7
 80011d6:	4095      	lsls	r5, r2
 80011d8:	ea47 0c03 	orr.w	ip, r7, r3
 80011dc:	4094      	lsls	r4, r2
 80011de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011e2:	fbbc f7fe 	udiv	r7, ip, lr
 80011e6:	fa1f f885 	uxth.w	r8, r5
 80011ea:	fb0e c317 	mls	r3, lr, r7, ip
 80011ee:	fb07 f908 	mul.w	r9, r7, r8
 80011f2:	0c21      	lsrs	r1, r4, #16
 80011f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011f8:	4599      	cmp	r9, r3
 80011fa:	d909      	bls.n	8001210 <__udivmoddi4+0x60>
 80011fc:	18eb      	adds	r3, r5, r3
 80011fe:	f107 31ff 	add.w	r1, r7, #4294967295
 8001202:	f080 811c 	bcs.w	800143e <__udivmoddi4+0x28e>
 8001206:	4599      	cmp	r9, r3
 8001208:	f240 8119 	bls.w	800143e <__udivmoddi4+0x28e>
 800120c:	3f02      	subs	r7, #2
 800120e:	442b      	add	r3, r5
 8001210:	eba3 0309 	sub.w	r3, r3, r9
 8001214:	fbb3 f0fe 	udiv	r0, r3, lr
 8001218:	fb0e 3310 	mls	r3, lr, r0, r3
 800121c:	fb00 f108 	mul.w	r1, r0, r8
 8001220:	b2a4      	uxth	r4, r4
 8001222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001226:	42a1      	cmp	r1, r4
 8001228:	d909      	bls.n	800123e <__udivmoddi4+0x8e>
 800122a:	192c      	adds	r4, r5, r4
 800122c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001230:	f080 8107 	bcs.w	8001442 <__udivmoddi4+0x292>
 8001234:	42a1      	cmp	r1, r4
 8001236:	f240 8104 	bls.w	8001442 <__udivmoddi4+0x292>
 800123a:	3802      	subs	r0, #2
 800123c:	442c      	add	r4, r5
 800123e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001242:	2700      	movs	r7, #0
 8001244:	1a64      	subs	r4, r4, r1
 8001246:	b11e      	cbz	r6, 8001250 <__udivmoddi4+0xa0>
 8001248:	2300      	movs	r3, #0
 800124a:	40d4      	lsrs	r4, r2
 800124c:	e9c6 4300 	strd	r4, r3, [r6]
 8001250:	4639      	mov	r1, r7
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	428b      	cmp	r3, r1
 8001258:	d909      	bls.n	800126e <__udivmoddi4+0xbe>
 800125a:	2e00      	cmp	r6, #0
 800125c:	f000 80ec 	beq.w	8001438 <__udivmoddi4+0x288>
 8001260:	2700      	movs	r7, #0
 8001262:	e9c6 0100 	strd	r0, r1, [r6]
 8001266:	4638      	mov	r0, r7
 8001268:	4639      	mov	r1, r7
 800126a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126e:	fab3 f783 	clz	r7, r3
 8001272:	2f00      	cmp	r7, #0
 8001274:	d148      	bne.n	8001308 <__udivmoddi4+0x158>
 8001276:	428b      	cmp	r3, r1
 8001278:	d302      	bcc.n	8001280 <__udivmoddi4+0xd0>
 800127a:	4282      	cmp	r2, r0
 800127c:	f200 80fb 	bhi.w	8001476 <__udivmoddi4+0x2c6>
 8001280:	1a84      	subs	r4, r0, r2
 8001282:	eb61 0303 	sbc.w	r3, r1, r3
 8001286:	2001      	movs	r0, #1
 8001288:	469c      	mov	ip, r3
 800128a:	2e00      	cmp	r6, #0
 800128c:	d0e0      	beq.n	8001250 <__udivmoddi4+0xa0>
 800128e:	e9c6 4c00 	strd	r4, ip, [r6]
 8001292:	e7dd      	b.n	8001250 <__udivmoddi4+0xa0>
 8001294:	b902      	cbnz	r2, 8001298 <__udivmoddi4+0xe8>
 8001296:	deff      	udf	#255	; 0xff
 8001298:	fab2 f282 	clz	r2, r2
 800129c:	2a00      	cmp	r2, #0
 800129e:	f040 808f 	bne.w	80013c0 <__udivmoddi4+0x210>
 80012a2:	2701      	movs	r7, #1
 80012a4:	1b49      	subs	r1, r1, r5
 80012a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012aa:	fa1f f985 	uxth.w	r9, r5
 80012ae:	fbb1 fef8 	udiv	lr, r1, r8
 80012b2:	fb08 111e 	mls	r1, r8, lr, r1
 80012b6:	fb09 f00e 	mul.w	r0, r9, lr
 80012ba:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80012be:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80012c2:	4298      	cmp	r0, r3
 80012c4:	d907      	bls.n	80012d6 <__udivmoddi4+0x126>
 80012c6:	18eb      	adds	r3, r5, r3
 80012c8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80012cc:	d202      	bcs.n	80012d4 <__udivmoddi4+0x124>
 80012ce:	4298      	cmp	r0, r3
 80012d0:	f200 80cd 	bhi.w	800146e <__udivmoddi4+0x2be>
 80012d4:	468e      	mov	lr, r1
 80012d6:	1a1b      	subs	r3, r3, r0
 80012d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80012dc:	fb08 3310 	mls	r3, r8, r0, r3
 80012e0:	fb09 f900 	mul.w	r9, r9, r0
 80012e4:	b2a4      	uxth	r4, r4
 80012e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012ea:	45a1      	cmp	r9, r4
 80012ec:	d907      	bls.n	80012fe <__udivmoddi4+0x14e>
 80012ee:	192c      	adds	r4, r5, r4
 80012f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80012f4:	d202      	bcs.n	80012fc <__udivmoddi4+0x14c>
 80012f6:	45a1      	cmp	r9, r4
 80012f8:	f200 80b6 	bhi.w	8001468 <__udivmoddi4+0x2b8>
 80012fc:	4618      	mov	r0, r3
 80012fe:	eba4 0409 	sub.w	r4, r4, r9
 8001302:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001306:	e79e      	b.n	8001246 <__udivmoddi4+0x96>
 8001308:	f1c7 0520 	rsb	r5, r7, #32
 800130c:	40bb      	lsls	r3, r7
 800130e:	fa22 fc05 	lsr.w	ip, r2, r5
 8001312:	ea4c 0c03 	orr.w	ip, ip, r3
 8001316:	fa21 f405 	lsr.w	r4, r1, r5
 800131a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800131e:	fbb4 f9fe 	udiv	r9, r4, lr
 8001322:	fa1f f88c 	uxth.w	r8, ip
 8001326:	fb0e 4419 	mls	r4, lr, r9, r4
 800132a:	fa20 f305 	lsr.w	r3, r0, r5
 800132e:	40b9      	lsls	r1, r7
 8001330:	fb09 fa08 	mul.w	sl, r9, r8
 8001334:	4319      	orrs	r1, r3
 8001336:	0c0b      	lsrs	r3, r1, #16
 8001338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800133c:	45a2      	cmp	sl, r4
 800133e:	fa02 f207 	lsl.w	r2, r2, r7
 8001342:	fa00 f307 	lsl.w	r3, r0, r7
 8001346:	d90b      	bls.n	8001360 <__udivmoddi4+0x1b0>
 8001348:	eb1c 0404 	adds.w	r4, ip, r4
 800134c:	f109 30ff 	add.w	r0, r9, #4294967295
 8001350:	f080 8088 	bcs.w	8001464 <__udivmoddi4+0x2b4>
 8001354:	45a2      	cmp	sl, r4
 8001356:	f240 8085 	bls.w	8001464 <__udivmoddi4+0x2b4>
 800135a:	f1a9 0902 	sub.w	r9, r9, #2
 800135e:	4464      	add	r4, ip
 8001360:	eba4 040a 	sub.w	r4, r4, sl
 8001364:	fbb4 f0fe 	udiv	r0, r4, lr
 8001368:	fb0e 4410 	mls	r4, lr, r0, r4
 800136c:	fb00 fa08 	mul.w	sl, r0, r8
 8001370:	b289      	uxth	r1, r1
 8001372:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8001376:	45a2      	cmp	sl, r4
 8001378:	d908      	bls.n	800138c <__udivmoddi4+0x1dc>
 800137a:	eb1c 0404 	adds.w	r4, ip, r4
 800137e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001382:	d26b      	bcs.n	800145c <__udivmoddi4+0x2ac>
 8001384:	45a2      	cmp	sl, r4
 8001386:	d969      	bls.n	800145c <__udivmoddi4+0x2ac>
 8001388:	3802      	subs	r0, #2
 800138a:	4464      	add	r4, ip
 800138c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001390:	fba0 8902 	umull	r8, r9, r0, r2
 8001394:	eba4 040a 	sub.w	r4, r4, sl
 8001398:	454c      	cmp	r4, r9
 800139a:	4641      	mov	r1, r8
 800139c:	46ce      	mov	lr, r9
 800139e:	d354      	bcc.n	800144a <__udivmoddi4+0x29a>
 80013a0:	d051      	beq.n	8001446 <__udivmoddi4+0x296>
 80013a2:	2e00      	cmp	r6, #0
 80013a4:	d069      	beq.n	800147a <__udivmoddi4+0x2ca>
 80013a6:	1a5a      	subs	r2, r3, r1
 80013a8:	eb64 040e 	sbc.w	r4, r4, lr
 80013ac:	fa04 f505 	lsl.w	r5, r4, r5
 80013b0:	fa22 f307 	lsr.w	r3, r2, r7
 80013b4:	40fc      	lsrs	r4, r7
 80013b6:	431d      	orrs	r5, r3
 80013b8:	e9c6 5400 	strd	r5, r4, [r6]
 80013bc:	2700      	movs	r7, #0
 80013be:	e747      	b.n	8001250 <__udivmoddi4+0xa0>
 80013c0:	4095      	lsls	r5, r2
 80013c2:	f1c2 0320 	rsb	r3, r2, #32
 80013c6:	fa21 f003 	lsr.w	r0, r1, r3
 80013ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80013ce:	fbb0 f7f8 	udiv	r7, r0, r8
 80013d2:	fa1f f985 	uxth.w	r9, r5
 80013d6:	fb08 0017 	mls	r0, r8, r7, r0
 80013da:	fa24 f303 	lsr.w	r3, r4, r3
 80013de:	4091      	lsls	r1, r2
 80013e0:	fb07 fc09 	mul.w	ip, r7, r9
 80013e4:	430b      	orrs	r3, r1
 80013e6:	0c19      	lsrs	r1, r3, #16
 80013e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013ec:	458c      	cmp	ip, r1
 80013ee:	fa04 f402 	lsl.w	r4, r4, r2
 80013f2:	d907      	bls.n	8001404 <__udivmoddi4+0x254>
 80013f4:	1869      	adds	r1, r5, r1
 80013f6:	f107 30ff 	add.w	r0, r7, #4294967295
 80013fa:	d231      	bcs.n	8001460 <__udivmoddi4+0x2b0>
 80013fc:	458c      	cmp	ip, r1
 80013fe:	d92f      	bls.n	8001460 <__udivmoddi4+0x2b0>
 8001400:	3f02      	subs	r7, #2
 8001402:	4429      	add	r1, r5
 8001404:	eba1 010c 	sub.w	r1, r1, ip
 8001408:	fbb1 f0f8 	udiv	r0, r1, r8
 800140c:	fb08 1c10 	mls	ip, r8, r0, r1
 8001410:	fb00 fe09 	mul.w	lr, r0, r9
 8001414:	b299      	uxth	r1, r3
 8001416:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800141a:	458e      	cmp	lr, r1
 800141c:	d907      	bls.n	800142e <__udivmoddi4+0x27e>
 800141e:	1869      	adds	r1, r5, r1
 8001420:	f100 33ff 	add.w	r3, r0, #4294967295
 8001424:	d218      	bcs.n	8001458 <__udivmoddi4+0x2a8>
 8001426:	458e      	cmp	lr, r1
 8001428:	d916      	bls.n	8001458 <__udivmoddi4+0x2a8>
 800142a:	3802      	subs	r0, #2
 800142c:	4429      	add	r1, r5
 800142e:	eba1 010e 	sub.w	r1, r1, lr
 8001432:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001436:	e73a      	b.n	80012ae <__udivmoddi4+0xfe>
 8001438:	4637      	mov	r7, r6
 800143a:	4630      	mov	r0, r6
 800143c:	e708      	b.n	8001250 <__udivmoddi4+0xa0>
 800143e:	460f      	mov	r7, r1
 8001440:	e6e6      	b.n	8001210 <__udivmoddi4+0x60>
 8001442:	4618      	mov	r0, r3
 8001444:	e6fb      	b.n	800123e <__udivmoddi4+0x8e>
 8001446:	4543      	cmp	r3, r8
 8001448:	d2ab      	bcs.n	80013a2 <__udivmoddi4+0x1f2>
 800144a:	ebb8 0102 	subs.w	r1, r8, r2
 800144e:	eb69 020c 	sbc.w	r2, r9, ip
 8001452:	3801      	subs	r0, #1
 8001454:	4696      	mov	lr, r2
 8001456:	e7a4      	b.n	80013a2 <__udivmoddi4+0x1f2>
 8001458:	4618      	mov	r0, r3
 800145a:	e7e8      	b.n	800142e <__udivmoddi4+0x27e>
 800145c:	4608      	mov	r0, r1
 800145e:	e795      	b.n	800138c <__udivmoddi4+0x1dc>
 8001460:	4607      	mov	r7, r0
 8001462:	e7cf      	b.n	8001404 <__udivmoddi4+0x254>
 8001464:	4681      	mov	r9, r0
 8001466:	e77b      	b.n	8001360 <__udivmoddi4+0x1b0>
 8001468:	3802      	subs	r0, #2
 800146a:	442c      	add	r4, r5
 800146c:	e747      	b.n	80012fe <__udivmoddi4+0x14e>
 800146e:	f1ae 0e02 	sub.w	lr, lr, #2
 8001472:	442b      	add	r3, r5
 8001474:	e72f      	b.n	80012d6 <__udivmoddi4+0x126>
 8001476:	4638      	mov	r0, r7
 8001478:	e707      	b.n	800128a <__udivmoddi4+0xda>
 800147a:	4637      	mov	r7, r6
 800147c:	e6e8      	b.n	8001250 <__udivmoddi4+0xa0>
 800147e:	bf00      	nop

08001480 <__aeabi_idiv0>:
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop

08001484 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2203      	movs	r2, #3
 8001490:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2203      	movs	r2, #3
 800149c:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2203      	movs	r2, #3
 80014a2:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2203      	movs	r2, #3
 80014a8:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2203      	movs	r2, #3
 80014ae:	715a      	strb	r2, [r3, #5]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af04      	add	r7, sp, #16
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	460b      	mov	r3, r1
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80014d4:	7afb      	ldrb	r3, [r7, #11]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	8af9      	ldrh	r1, [r7, #22]
 80014da:	f241 3388 	movw	r3, #5000	; 0x1388
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	2302      	movs	r3, #2
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2301      	movs	r3, #1
 80014ec:	f004 f8fc 	bl	80056e8 <HAL_I2C_Mem_Read>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10b      	bne.n	800150e <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80014f6:	7d7b      	ldrb	r3, [r7, #21]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	7d3b      	ldrb	r3, [r7, #20]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21b      	sxth	r3, r3
 8001504:	b29a      	uxth	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	801a      	strh	r2, [r3, #0]
		return true;
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <read_register16+0x56>
	} else
		return false;
 800150e:	2300      	movs	r3, #0

}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b08b      	sub	sp, #44	; 0x2c
 800151c:	af04      	add	r7, sp, #16
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	461a      	mov	r2, r3
 8001524:	460b      	mov	r3, r1
 8001526:	72fb      	strb	r3, [r7, #11]
 8001528:	4613      	mov	r3, r2
 800152a:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001538:	7afb      	ldrb	r3, [r7, #11]
 800153a:	b29c      	uxth	r4, r3
 800153c:	7abb      	ldrb	r3, [r7, #10]
 800153e:	b29b      	uxth	r3, r3
 8001540:	8af9      	ldrh	r1, [r7, #22]
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	9202      	str	r2, [sp, #8]
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	4622      	mov	r2, r4
 8001552:	f004 f8c9 	bl	80056e8 <HAL_I2C_Mem_Read>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <read_data+0x48>
		return 0;
 800155c:	2300      	movs	r3, #0
 800155e:	e000      	b.n	8001562 <read_data+0x4a>
	else
		return 1;
 8001560:	2301      	movs	r3, #1

}
 8001562:	4618      	mov	r0, r3
 8001564:	371c      	adds	r7, #28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd90      	pop	{r4, r7, pc}

0800156a <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	461a      	mov	r2, r3
 8001576:	2188      	movs	r1, #136	; 0x88
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff9e 	bl	80014ba <read_register16>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d06f      	beq.n	8001664 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3302      	adds	r3, #2
 8001588:	461a      	mov	r2, r3
 800158a:	218a      	movs	r1, #138	; 0x8a
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff94 	bl	80014ba <read_register16>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d065      	beq.n	8001664 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3304      	adds	r3, #4
 800159c:	461a      	mov	r2, r3
 800159e:	218c      	movs	r1, #140	; 0x8c
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff8a 	bl	80014ba <read_register16>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d05b      	beq.n	8001664 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3306      	adds	r3, #6
 80015b0:	461a      	mov	r2, r3
 80015b2:	218e      	movs	r1, #142	; 0x8e
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff80 	bl	80014ba <read_register16>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d051      	beq.n	8001664 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3308      	adds	r3, #8
 80015c4:	461a      	mov	r2, r3
 80015c6:	2190      	movs	r1, #144	; 0x90
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff76 	bl	80014ba <read_register16>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d047      	beq.n	8001664 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	330a      	adds	r3, #10
 80015d8:	461a      	mov	r2, r3
 80015da:	2192      	movs	r1, #146	; 0x92
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ff6c 	bl	80014ba <read_register16>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d03d      	beq.n	8001664 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	330c      	adds	r3, #12
 80015ec:	461a      	mov	r2, r3
 80015ee:	2194      	movs	r1, #148	; 0x94
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff62 	bl	80014ba <read_register16>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d033      	beq.n	8001664 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	330e      	adds	r3, #14
 8001600:	461a      	mov	r2, r3
 8001602:	2196      	movs	r1, #150	; 0x96
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff58 	bl	80014ba <read_register16>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d029      	beq.n	8001664 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3310      	adds	r3, #16
 8001614:	461a      	mov	r2, r3
 8001616:	2198      	movs	r1, #152	; 0x98
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff4e 	bl	80014ba <read_register16>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d01f      	beq.n	8001664 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3312      	adds	r3, #18
 8001628:	461a      	mov	r2, r3
 800162a:	219a      	movs	r1, #154	; 0x9a
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff44 	bl	80014ba <read_register16>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d015      	beq.n	8001664 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3314      	adds	r3, #20
 800163c:	461a      	mov	r2, r3
 800163e:	219c      	movs	r1, #156	; 0x9c
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff3a 	bl	80014ba <read_register16>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00b      	beq.n	8001664 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001650:	461a      	mov	r2, r3
 8001652:	219e      	movs	r1, #158	; 0x9e
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff30 	bl	80014ba <read_register16>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <read_calibration_data+0xfa>

		return true;
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <read_calibration_data+0xfc>
	}

	return false;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f103 0218 	add.w	r2, r3, #24
 800167c:	2301      	movs	r3, #1
 800167e:	21a1      	movs	r1, #161	; 0xa1
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff49 	bl	8001518 <read_data>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d14b      	bne.n	8001724 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	331a      	adds	r3, #26
 8001690:	461a      	mov	r2, r3
 8001692:	21e1      	movs	r1, #225	; 0xe1
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff10 	bl	80014ba <read_register16>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d041      	beq.n	8001724 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f103 021c 	add.w	r2, r3, #28
 80016a6:	2301      	movs	r3, #1
 80016a8:	21e3      	movs	r1, #227	; 0xe3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ff34 	bl	8001518 <read_data>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d136      	bne.n	8001724 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80016b6:	f107 030e 	add.w	r3, r7, #14
 80016ba:	461a      	mov	r2, r3
 80016bc:	21e4      	movs	r1, #228	; 0xe4
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fefb 	bl	80014ba <read_register16>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d02c      	beq.n	8001724 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	461a      	mov	r2, r3
 80016d0:	21e5      	movs	r1, #229	; 0xe5
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fef1 	bl	80014ba <read_register16>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d022      	beq.n	8001724 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80016e4:	2301      	movs	r3, #1
 80016e6:	21e7      	movs	r1, #231	; 0xe7
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff15 	bl	8001518 <read_data>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d117      	bne.n	8001724 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80016f4:	89fb      	ldrh	r3, [r7, #14]
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80016fe:	b21a      	sxth	r2, r3
 8001700:	89fb      	ldrh	r3, [r7, #14]
 8001702:	121b      	asrs	r3, r3, #8
 8001704:	b21b      	sxth	r3, r3
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	b21b      	sxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b21a      	sxth	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001714:	89bb      	ldrh	r3, [r7, #12]
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	b29b      	uxth	r3, r3
 800171a:	b21a      	sxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	841a      	strh	r2, [r3, #32]

		return true;
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800172e:	b580      	push	{r7, lr}
 8001730:	b088      	sub	sp, #32
 8001732:	af04      	add	r7, sp, #16
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	460b      	mov	r3, r1
 8001738:	70fb      	strb	r3, [r7, #3]
 800173a:	4613      	mov	r3, r2
 800173c:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	b29a      	uxth	r2, r3
 800174e:	89f9      	ldrh	r1, [r7, #14]
 8001750:	f242 7310 	movw	r3, #10000	; 0x2710
 8001754:	9302      	str	r3, [sp, #8]
 8001756:	2301      	movs	r3, #1
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	1cbb      	adds	r3, r7, #2
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2301      	movs	r3, #1
 8001760:	f003 fec8 	bl	80054f4 <HAL_I2C_Mem_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <write_register8+0x40>
		return false;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <write_register8+0x42>
	else
		return true;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001786:	2b76      	cmp	r3, #118	; 0x76
 8001788:	d005      	beq.n	8001796 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800178e:	2b77      	cmp	r3, #119	; 0x77
 8001790:	d001      	beq.n	8001796 <bmp280_init+0x1e>

		return false;
 8001792:	2300      	movs	r3, #0
 8001794:	e099      	b.n	80018ca <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800179c:	2301      	movs	r3, #1
 800179e:	21d0      	movs	r1, #208	; 0xd0
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff feb9 	bl	8001518 <read_data>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <bmp280_init+0x38>
		return false;
 80017ac:	2300      	movs	r3, #0
 80017ae:	e08c      	b.n	80018ca <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80017b6:	2b58      	cmp	r3, #88	; 0x58
 80017b8:	d006      	beq.n	80017c8 <bmp280_init+0x50>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80017c0:	2b60      	cmp	r3, #96	; 0x60
 80017c2:	d001      	beq.n	80017c8 <bmp280_init+0x50>

		return false;
 80017c4:	2300      	movs	r3, #0
 80017c6:	e080      	b.n	80018ca <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80017c8:	22b6      	movs	r2, #182	; 0xb6
 80017ca:	21e0      	movs	r1, #224	; 0xe0
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ffae 	bl	800172e <write_register8>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <bmp280_init+0x64>
		return false;
 80017d8:	2300      	movs	r3, #0
 80017da:	e076      	b.n	80018ca <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80017dc:	f107 020c 	add.w	r2, r7, #12
 80017e0:	2301      	movs	r3, #1
 80017e2:	21f3      	movs	r1, #243	; 0xf3
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fe97 	bl	8001518 <read_data>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f5      	bne.n	80017dc <bmp280_init+0x64>
				&& (status & 1) == 0)
 80017f0:	7b3b      	ldrb	r3, [r7, #12]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff feb5 	bl	800156a <read_calibration_data>
 8001800:	4603      	mov	r3, r0
 8001802:	f083 0301 	eor.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d100      	bne.n	800180e <bmp280_init+0x96>
 800180c:	e001      	b.n	8001812 <bmp280_init+0x9a>
		return false;
 800180e:	2300      	movs	r3, #0
 8001810:	e05b      	b.n	80018ca <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001818:	2b60      	cmp	r3, #96	; 0x60
 800181a:	d10a      	bne.n	8001832 <bmp280_init+0xba>
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff26 	bl	800166e <read_hum_calibration_data>
 8001822:	4603      	mov	r3, r0
 8001824:	f083 0301 	eor.w	r3, r3, #1
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <bmp280_init+0xba>
		return false;
 800182e:	2300      	movs	r3, #0
 8001830:	e04b      	b.n	80018ca <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	795b      	ldrb	r3, [r3, #5]
 8001836:	015b      	lsls	r3, r3, #5
 8001838:	b25a      	sxtb	r2, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	785b      	ldrb	r3, [r3, #1]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	b25b      	sxtb	r3, r3
 8001842:	4313      	orrs	r3, r2
 8001844:	b25b      	sxtb	r3, r3
 8001846:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	461a      	mov	r2, r3
 800184c:	21f5      	movs	r1, #245	; 0xf5
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ff6d 	bl	800172e <write_register8>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <bmp280_init+0xe6>
		return false;
 800185a:	2300      	movs	r3, #0
 800185c:	e035      	b.n	80018ca <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d102      	bne.n	800186c <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	78db      	ldrb	r3, [r3, #3]
 8001870:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001872:	b25a      	sxtb	r2, r3
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	789b      	ldrb	r3, [r3, #2]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	b25b      	sxtb	r3, r3
 800187c:	4313      	orrs	r3, r2
 800187e:	b25a      	sxtb	r2, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b25b      	sxtb	r3, r3
 8001886:	4313      	orrs	r3, r2
 8001888:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800188a:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001892:	2b60      	cmp	r3, #96	; 0x60
 8001894:	d10d      	bne.n	80018b2 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	791b      	ldrb	r3, [r3, #4]
 800189a:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800189c:	7b7b      	ldrb	r3, [r7, #13]
 800189e:	461a      	mov	r2, r3
 80018a0:	21f2      	movs	r1, #242	; 0xf2
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ff43 	bl	800172e <write_register8>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <bmp280_init+0x13a>
			return false;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e00b      	b.n	80018ca <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80018b2:	7bbb      	ldrb	r3, [r7, #14]
 80018b4:	461a      	mov	r2, r3
 80018b6:	21f4      	movs	r1, #244	; 0xf4
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff38 	bl	800172e <write_register8>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <bmp280_init+0x150>
		return false;
 80018c4:	2300      	movs	r3, #0
 80018c6:	e000      	b.n	80018ca <bmp280_init+0x152>
	}

	return true;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80018d2:	b480      	push	{r7}
 80018d4:	b087      	sub	sp, #28
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	10da      	asrs	r2, r3, #3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80018f0:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80018f4:	12db      	asrs	r3, r3, #11
 80018f6:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	111b      	asrs	r3, r3, #4
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	8812      	ldrh	r2, [r2, #0]
 8001900:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	1112      	asrs	r2, r2, #4
 8001906:	68f9      	ldr	r1, [r7, #12]
 8001908:	8809      	ldrh	r1, [r1, #0]
 800190a:	1a52      	subs	r2, r2, r1
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001918:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800191c:	139b      	asrs	r3, r3, #14
 800191e:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	441a      	add	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	3380      	adds	r3, #128	; 0x80
 8001936:	121b      	asrs	r3, r3, #8
}
 8001938:	4618      	mov	r0, r3
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001942:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4619      	mov	r1, r3
 8001954:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001958:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800195c:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001960:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	6a3a      	ldr	r2, [r7, #32]
 8001968:	fb02 f203 	mul.w	r2, r2, r3
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	6a39      	ldr	r1, [r7, #32]
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	441a      	add	r2, r3
 8001976:	6a39      	ldr	r1, [r7, #32]
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	fba1 3403 	umull	r3, r4, r1, r3
 800197e:	4422      	add	r2, r4
 8001980:	4614      	mov	r4, r2
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001988:	b211      	sxth	r1, r2
 800198a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800198e:	fb01 f504 	mul.w	r5, r1, r4
 8001992:	fb03 f002 	mul.w	r0, r3, r2
 8001996:	4428      	add	r0, r5
 8001998:	fba3 3401 	umull	r3, r4, r3, r1
 800199c:	1902      	adds	r2, r0, r4
 800199e:	4614      	mov	r4, r2
 80019a0:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80019a4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80019b4:	6a3a      	ldr	r2, [r7, #32]
 80019b6:	fb04 f102 	mul.w	r1, r4, r2
 80019ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019bc:	fb03 f202 	mul.w	r2, r3, r2
 80019c0:	1888      	adds	r0, r1, r2
 80019c2:	6a3a      	ldr	r2, [r7, #32]
 80019c4:	fba2 1203 	umull	r1, r2, r2, r3
 80019c8:	1883      	adds	r3, r0, r2
 80019ca:	461a      	mov	r2, r3
 80019cc:	f04f 0500 	mov.w	r5, #0
 80019d0:	f04f 0600 	mov.w	r6, #0
 80019d4:	0456      	lsls	r6, r2, #17
 80019d6:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80019da:	044d      	lsls	r5, r1, #17
 80019dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80019e0:	186b      	adds	r3, r5, r1
 80019e2:	eb46 0402 	adc.w	r4, r6, r2
 80019e6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019f0:	b219      	sxth	r1, r3
 80019f2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80019f6:	f04f 0500 	mov.w	r5, #0
 80019fa:	f04f 0600 	mov.w	r6, #0
 80019fe:	00ce      	lsls	r6, r1, #3
 8001a00:	2500      	movs	r5, #0
 8001a02:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001a06:	186b      	adds	r3, r5, r1
 8001a08:	eb46 0402 	adc.w	r4, r6, r2
 8001a0c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	6a3a      	ldr	r2, [r7, #32]
 8001a14:	fb02 f203 	mul.w	r2, r2, r3
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	6a39      	ldr	r1, [r7, #32]
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	441a      	add	r2, r3
 8001a22:	6a39      	ldr	r1, [r7, #32]
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	fba1 3403 	umull	r3, r4, r1, r3
 8001a2a:	4422      	add	r2, r4
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001a34:	b211      	sxth	r1, r2
 8001a36:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001a3a:	fb01 f504 	mul.w	r5, r1, r4
 8001a3e:	fb03 f002 	mul.w	r0, r3, r2
 8001a42:	4428      	add	r0, r5
 8001a44:	fba3 3401 	umull	r3, r4, r3, r1
 8001a48:	1902      	adds	r2, r0, r4
 8001a4a:	4614      	mov	r4, r2
 8001a4c:	f04f 0100 	mov.w	r1, #0
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	0a19      	lsrs	r1, r3, #8
 8001a56:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001a5a:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a68:	6a38      	ldr	r0, [r7, #32]
 8001a6a:	fb04 f500 	mul.w	r5, r4, r0
 8001a6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a70:	fb03 f000 	mul.w	r0, r3, r0
 8001a74:	4428      	add	r0, r5
 8001a76:	6a3d      	ldr	r5, [r7, #32]
 8001a78:	fba5 5603 	umull	r5, r6, r5, r3
 8001a7c:	1983      	adds	r3, r0, r6
 8001a7e:	461e      	mov	r6, r3
 8001a80:	f04f 0b00 	mov.w	fp, #0
 8001a84:	f04f 0c00 	mov.w	ip, #0
 8001a88:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001a8c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001a90:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001a94:	eb1b 0301 	adds.w	r3, fp, r1
 8001a98:	eb4c 0402 	adc.w	r4, ip, r2
 8001a9c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001aa0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001aa4:	1c19      	adds	r1, r3, #0
 8001aa6:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	88db      	ldrh	r3, [r3, #6]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	f04f 0400 	mov.w	r4, #0
 8001ab4:	fb03 f502 	mul.w	r5, r3, r2
 8001ab8:	fb01 f004 	mul.w	r0, r1, r4
 8001abc:	4428      	add	r0, r5
 8001abe:	fba1 3403 	umull	r3, r4, r1, r3
 8001ac2:	1902      	adds	r2, r0, r4
 8001ac4:	4614      	mov	r4, r2
 8001ac6:	f04f 0100 	mov.w	r1, #0
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	1061      	asrs	r1, r4, #1
 8001ad0:	17e2      	asrs	r2, r4, #31
 8001ad2:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 8001ad6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001ada:	4323      	orrs	r3, r4
 8001adc:	d101      	bne.n	8001ae2 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e0d4      	b.n	8001c8c <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001ae8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001aec:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	ea4f 0963 	mov.w	r9, r3, asr #1
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001afc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001b00:	4645      	mov	r5, r8
 8001b02:	464e      	mov	r6, r9
 8001b04:	1aed      	subs	r5, r5, r3
 8001b06:	eb66 0604 	sbc.w	r6, r6, r4
 8001b0a:	46a8      	mov	r8, r5
 8001b0c:	46b1      	mov	r9, r6
 8001b0e:	eb18 0308 	adds.w	r3, r8, r8
 8001b12:	eb49 0409 	adc.w	r4, r9, r9
 8001b16:	4698      	mov	r8, r3
 8001b18:	46a1      	mov	r9, r4
 8001b1a:	eb18 0805 	adds.w	r8, r8, r5
 8001b1e:	eb49 0906 	adc.w	r9, r9, r6
 8001b22:	f04f 0100 	mov.w	r1, #0
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001b2e:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001b32:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001b36:	eb18 0801 	adds.w	r8, r8, r1
 8001b3a:	eb49 0902 	adc.w	r9, r9, r2
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001b4a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001b4e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001b52:	4688      	mov	r8, r1
 8001b54:	4691      	mov	r9, r2
 8001b56:	eb18 0805 	adds.w	r8, r8, r5
 8001b5a:	eb49 0906 	adc.w	r9, r9, r6
 8001b5e:	f04f 0100 	mov.w	r1, #0
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001b6a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001b6e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001b72:	4688      	mov	r8, r1
 8001b74:	4691      	mov	r9, r2
 8001b76:	eb18 0005 	adds.w	r0, r8, r5
 8001b7a:	eb49 0106 	adc.w	r1, r9, r6
 8001b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b82:	f7ff fac5 	bl	8001110 <__aeabi_ldivmod>
 8001b86:	4603      	mov	r3, r0
 8001b88:	460c      	mov	r4, r1
 8001b8a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001b94:	b219      	sxth	r1, r3
 8001b96:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001b9a:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	f04f 0400 	mov.w	r4, #0
 8001ba6:	0b6b      	lsrs	r3, r5, #13
 8001ba8:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001bac:	1374      	asrs	r4, r6, #13
 8001bae:	fb03 f502 	mul.w	r5, r3, r2
 8001bb2:	fb01 f004 	mul.w	r0, r1, r4
 8001bb6:	4428      	add	r0, r5
 8001bb8:	fba1 1203 	umull	r1, r2, r1, r3
 8001bbc:	1883      	adds	r3, r0, r2
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	f04f 0400 	mov.w	r4, #0
 8001bcc:	0b6b      	lsrs	r3, r5, #13
 8001bce:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001bd2:	1374      	asrs	r4, r6, #13
 8001bd4:	fb03 f502 	mul.w	r5, r3, r2
 8001bd8:	fb01 f004 	mul.w	r0, r1, r4
 8001bdc:	4428      	add	r0, r5
 8001bde:	fba1 1203 	umull	r1, r2, r1, r3
 8001be2:	1883      	adds	r3, r0, r2
 8001be4:	461a      	mov	r2, r3
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	f04f 0400 	mov.w	r4, #0
 8001bee:	0e4b      	lsrs	r3, r1, #25
 8001bf0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8001bf4:	1654      	asrs	r4, r2, #25
 8001bf6:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	fb04 f102 	mul.w	r1, r4, r2
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	fb03 f202 	mul.w	r2, r3, r2
 8001c12:	1888      	adds	r0, r1, r2
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	fba2 1203 	umull	r1, r2, r2, r3
 8001c1a:	1883      	adds	r3, r0, r2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	f04f 0400 	mov.w	r4, #0
 8001c26:	0ccb      	lsrs	r3, r1, #19
 8001c28:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001c2c:	14d4      	asrs	r4, r2, #19
 8001c2e:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001c32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001c36:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001c3a:	eb11 0803 	adds.w	r8, r1, r3
 8001c3e:	eb42 0904 	adc.w	r9, r2, r4
 8001c42:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001c46:	eb13 0508 	adds.w	r5, r3, r8
 8001c4a:	eb44 0609 	adc.w	r6, r4, r9
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	0a29      	lsrs	r1, r5, #8
 8001c58:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001c5c:	1232      	asrs	r2, r6, #8
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001c64:	b21d      	sxth	r5, r3
 8001c66:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001c6a:	f04f 0800 	mov.w	r8, #0
 8001c6e:	f04f 0900 	mov.w	r9, #0
 8001c72:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001c76:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001c7a:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001c7e:	eb18 0301 	adds.w	r3, r8, r1
 8001c82:	eb49 0402 	adc.w	r4, r9, r2
 8001c86:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8001c8a:	693b      	ldr	r3, [r7, #16]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3728      	adds	r7, #40	; 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08001c96 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001c96:	b480      	push	{r7}
 8001c98:	b087      	sub	sp, #28
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001ca8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	039a      	lsls	r2, r3, #14
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001cb4:	051b      	lsls	r3, r3, #20
 8001cb6:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fb03 f301 	mul.w	r3, r3, r1
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001ccc:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	fb02 f201 	mul.w	r2, r2, r1
 8001cdc:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001cde:	68f9      	ldr	r1, [r7, #12]
 8001ce0:	7f09      	ldrb	r1, [r1, #28]
 8001ce2:	4608      	mov	r0, r1
 8001ce4:	6979      	ldr	r1, [r7, #20]
 8001ce6:	fb01 f100 	mul.w	r1, r1, r0
 8001cea:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001cec:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001cf0:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001cf4:	1292      	asrs	r2, r2, #10
 8001cf6:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001cfa:	68f9      	ldr	r1, [r7, #12]
 8001cfc:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001d00:	fb01 f202 	mul.w	r2, r1, r2
 8001d04:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001d08:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	13db      	asrs	r3, r3, #15
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	13d2      	asrs	r2, r2, #15
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	7e12      	ldrb	r2, [r2, #24]
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d34:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001d3c:	bfa8      	it	ge
 8001d3e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001d42:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	131b      	asrs	r3, r3, #12
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr

08001d52 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b08c      	sub	sp, #48	; 0x30
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001d66:	2b60      	cmp	r3, #96	; 0x60
 8001d68:	d007      	beq.n	8001d7a <bmp280_read_fixed+0x28>
		if (humidity)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <bmp280_read_fixed+0x32>
 8001d80:	2308      	movs	r3, #8
 8001d82:	e000      	b.n	8001d86 <bmp280_read_fixed+0x34>
 8001d84:	2306      	movs	r3, #6
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f107 0218 	add.w	r2, r7, #24
 8001d90:	21f7      	movs	r1, #247	; 0xf7
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f7ff fbc0 	bl	8001518 <read_data>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <bmp280_read_fixed+0x50>
		return false;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e038      	b.n	8001e14 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001da2:	7e3b      	ldrb	r3, [r7, #24]
 8001da4:	031a      	lsls	r2, r3, #12
 8001da6:	7e7b      	ldrb	r3, [r7, #25]
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	4313      	orrs	r3, r2
 8001dac:	7eba      	ldrb	r2, [r7, #26]
 8001dae:	0912      	lsrs	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	4313      	orrs	r3, r2
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001db6:	7efb      	ldrb	r3, [r7, #27]
 8001db8:	031a      	lsls	r2, r3, #12
 8001dba:	7f3b      	ldrb	r3, [r7, #28]
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	7f7a      	ldrb	r2, [r7, #29]
 8001dc2:	0912      	lsrs	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	461a      	mov	r2, r3
 8001dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff fd7d 	bl	80018d2 <compensate_temperature>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	461a      	mov	r2, r3
 8001de2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f7ff fdac 	bl	8001942 <compensate_pressure>
 8001dea:	4602      	mov	r2, r0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00d      	beq.n	8001e12 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001df6:	7fbb      	ldrb	r3, [r7, #30]
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	7ffa      	ldrb	r2, [r7, #31]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	461a      	mov	r2, r3
 8001e04:	6a39      	ldr	r1, [r7, #32]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f7ff ff45 	bl	8001c96 <compensate_humidity>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3730      	adds	r7, #48	; 0x30
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <bmp280_read_float+0x1a>
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	e000      	b.n	8001e38 <bmp280_read_float+0x1c>
 8001e36:	2300      	movs	r3, #0
 8001e38:	f107 0218 	add.w	r2, r7, #24
 8001e3c:	f107 011c 	add.w	r1, r7, #28
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f7ff ff86 	bl	8001d52 <bmp280_read_fixed>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d02d      	beq.n	8001ea8 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe ff24 	bl	8000c9c <__aeabi_i2f>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4917      	ldr	r1, [pc, #92]	; (8001eb4 <bmp280_read_float+0x98>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff f827 	bl	8000eac <__aeabi_fdiv>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe ff13 	bl	8000c94 <__aeabi_ui2f>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff f819 	bl	8000eac <__aeabi_fdiv>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	601a      	str	r2, [r3, #0]
		if (humidity)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00d      	beq.n	8001ea4 <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe ff02 	bl	8000c94 <__aeabi_ui2f>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff f808 	bl	8000eac <__aeabi_fdiv>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	601a      	str	r2, [r3, #0]
		return true;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <bmp280_read_float+0x8e>
	}

	return false;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3720      	adds	r7, #32
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	42c80000 	.word	0x42c80000

08001eb8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ebe:	f002 f93b 	bl	8004138 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ec2:	f000 f8cd 	bl	8002060 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ec6:	f000 fa57 	bl	8002378 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001eca:	f000 fa2b 	bl	8002324 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8001ece:	f000 f98b 	bl	80021e8 <MX_TIM1_Init>
	MX_I2C2_Init();
 8001ed2:	f000 f95b 	bl	800218c <MX_I2C2_Init>
	MX_ADC1_Init();
 8001ed6:	f000 f91b 	bl	8002110 <MX_ADC1_Init>
	MX_TIM4_Init();
 8001eda:	f000 f9d5 	bl	8002288 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	Btn_Init();
 8001ede:	f001 f899 	bl	8003014 <Btn_Init>
	SSD1306_Init();
 8001ee2:	f001 fb91 	bl	8003608 <SSD1306_Init>
	Print_Booting_Info();
 8001ee6:	f000 fe79 	bl	8002bdc <Print_Booting_Info>
	HAL_TIM_Base_Start(&htim1);
 8001eea:	4852      	ldr	r0, [pc, #328]	; (8002034 <main+0x17c>)
 8001eec:	f005 f946 	bl	800717c <HAL_TIM_Base_Start>
	BMP280_Init();
 8001ef0:	f000 fae6 	bl	80024c0 <BMP280_Init>
	ADC_Init();
 8001ef4:	f000 fb0a 	bl	800250c <ADC_Init>

	// Send temperature data via UART
	if (Btn_Read(BTN_UP_Pin))
 8001ef8:	2002      	movs	r0, #2
 8001efa:	f001 f8d3 	bl	80030a4 <Btn_Read>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <main+0x5e>
	{
		Print_Info("Sending\n");
 8001f04:	484c      	ldr	r0, [pc, #304]	; (8002038 <main+0x180>)
 8001f06:	f000 fdbf 	bl	8002a88 <Print_Info>
		Temp_Send_UART();
 8001f0a:	f000 fce1 	bl	80028d0 <Temp_Send_UART>
		Print_Info("Reboot to run\n");
 8001f0e:	484b      	ldr	r0, [pc, #300]	; (800203c <main+0x184>)
 8001f10:	f000 fdba 	bl	8002a88 <Print_Info>

		while (1)
 8001f14:	e7fe      	b.n	8001f14 <main+0x5c>
			; // Halt
	}

	HAL_Delay(1000);
 8001f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f1a:	f002 f95d 	bl	80041d8 <HAL_Delay>
	Clear_Booting_Info();
 8001f1e:	f000 fe7b 	bl	8002c18 <Clear_Booting_Info>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	Reset_Cycles();
 8001f22:	f000 fab9 	bl	8002498 <Reset_Cycles>
	next_cycle_tick += CYCLE_PERIOD_MS;
 8001f26:	4b46      	ldr	r3, [pc, #280]	; (8002040 <main+0x188>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8001f2e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8001f32:	4a43      	ldr	r2, [pc, #268]	; (8002040 <main+0x188>)
 8001f34:	6013      	str	r3, [r2, #0]
	cycle_count = Temp_Next_Free_Place();
 8001f36:	f000 fca9 	bl	800288c <Temp_Next_Free_Place>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b41      	ldr	r3, [pc, #260]	; (8002044 <main+0x18c>)
 8001f40:	601a      	str	r2, [r3, #0]
	Temps16 temps;
	while (1)
	{
		cycle_count++;
 8001f42:	4b40      	ldr	r3, [pc, #256]	; (8002044 <main+0x18c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	4a3e      	ldr	r2, [pc, #248]	; (8002044 <main+0x18c>)
 8001f4a:	6013      	str	r3, [r2, #0]
		Print_Simple(0, "RUNNING: %04u\n", cycle_count);
 8001f4c:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <main+0x18c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	493d      	ldr	r1, [pc, #244]	; (8002048 <main+0x190>)
 8001f54:	2000      	movs	r0, #0
 8001f56:	f000 fda5 	bl	8002aa4 <Print_Simple>

		// Check is there space left
		if (cycle_count >= EEPROM_SIZE_BYTES / sizeof(Temps16))
 8001f5a:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <main+0x18c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f241 5354 	movw	r3, #5460	; 0x1554
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d920      	bls.n	8001faa <main+0xf2>
		{
			while (1)
			{
				Print_Simple(0, " -DONE-: %04u\n", cycle_count);
 8001f68:	4b36      	ldr	r3, [pc, #216]	; (8002044 <main+0x18c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4937      	ldr	r1, [pc, #220]	; (800204c <main+0x194>)
 8001f70:	2000      	movs	r0, #0
 8001f72:	f000 fd97 	bl	8002aa4 <Print_Simple>
				Print_Temps(1, temps);
 8001f76:	463b      	mov	r3, r7
 8001f78:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f000 fdf5 	bl	8002b6c <Print_Temps>
				Print_Simple(2, " Reboot to restart");
 8001f82:	4933      	ldr	r1, [pc, #204]	; (8002050 <main+0x198>)
 8001f84:	2002      	movs	r0, #2
 8001f86:	f000 fd8d 	bl	8002aa4 <Print_Simple>
				Print_Simple(3, " Or Reboot holding");
 8001f8a:	4932      	ldr	r1, [pc, #200]	; (8002054 <main+0x19c>)
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f000 fd89 	bl	8002aa4 <Print_Simple>
				Print_Simple(4, "Btn Up to send data");
 8001f92:	4931      	ldr	r1, [pc, #196]	; (8002058 <main+0x1a0>)
 8001f94:	2004      	movs	r0, #4
 8001f96:	f000 fd85 	bl	8002aa4 <Print_Simple>
				Button_Actions();
 8001f9a:	f001 f91d 	bl	80031d8 <Button_Actions>
				SSD1306_UpdateScreen();
 8001f9e:	f001 fbf7 	bl	8003790 <SSD1306_UpdateScreen>
				HAL_Delay(200);
 8001fa2:	20c8      	movs	r0, #200	; 0xc8
 8001fa4:	f002 f918 	bl	80041d8 <HAL_Delay>
				Print_Simple(0, " -DONE-: %04u\n", cycle_count);
 8001fa8:	e7de      	b.n	8001f68 <main+0xb0>
			}
		}

		// Measuring and saving temperature to EEPROM
		temps.temp_1w = Temp_Enc(DS18B20_Read_Temp());
 8001faa:	f000 fab5 	bl	8002518 <DS18B20_Read_Temp>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fd19 	bl	80029e8 <Temp_Enc>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	803b      	strh	r3, [r7, #0]
		temps.temp_i2c = Temp_Enc(BMP280_Read_Temp());
 8001fba:	f000 fafd 	bl	80025b8 <BMP280_Read_Temp>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fd11 	bl	80029e8 <Temp_Enc>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	807b      	strh	r3, [r7, #2]
		temps.temp_adc = Temp_Enc(ADC_Read_Temp()); // First reading is off by 3deg
 8001fca:	f000 fb1d 	bl	8002608 <ADC_Read_Temp>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fd09 	bl	80029e8 <Temp_Enc>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80bb      	strh	r3, [r7, #4]

		Temp_Save(cycle_count - 1, temps);
 8001fda:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <main+0x18c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b298      	uxth	r0, r3
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001fea:	f000 fbea 	bl	80027c2 <Temp_Save>

		// Displaying current info
		Print_Temps(1, temps);
 8001fee:	463b      	mov	r3, r7
 8001ff0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f000 fdb9 	bl	8002b6c <Print_Temps>
		SSD1306_DrawLine(0, FONT_SPACING * 2 - 2, 128, FONT_SPACING * 2 - 2, 1);
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2318      	movs	r3, #24
 8002000:	2280      	movs	r2, #128	; 0x80
 8002002:	2118      	movs	r1, #24
 8002004:	2000      	movs	r0, #0
 8002006:	f001 fd22 	bl	8003a4e <SSD1306_DrawLine>
		SSD1306_UpdateScreen();
 800200a:	f001 fbc1 	bl	8003790 <SSD1306_UpdateScreen>

		// Idling & polling buttons for actions
		while (ms_ticks < next_cycle_tick)
 800200e:	e001      	b.n	8002014 <main+0x15c>
			Button_Actions();
 8002010:	f001 f8e2 	bl	80031d8 <Button_Actions>
		while (ms_ticks < next_cycle_tick)
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <main+0x1a4>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <main+0x188>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d3f7      	bcc.n	8002010 <main+0x158>

		next_cycle_tick += CYCLE_PERIOD_MS;
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <main+0x188>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8002028:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <main+0x188>)
 800202e:	6013      	str	r3, [r2, #0]
		cycle_count++;
 8002030:	e787      	b.n	8001f42 <main+0x8a>
 8002032:	bf00      	nop
 8002034:	20000760 	.word	0x20000760
 8002038:	0800a2b8 	.word	0x0800a2b8
 800203c:	0800a2c4 	.word	0x0800a2c4
 8002040:	20000238 	.word	0x20000238
 8002044:	20000234 	.word	0x20000234
 8002048:	0800a2d4 	.word	0x0800a2d4
 800204c:	0800a2e4 	.word	0x0800a2e4
 8002050:	0800a2f4 	.word	0x0800a2f4
 8002054:	0800a308 	.word	0x0800a308
 8002058:	0800a31c 	.word	0x0800a31c
 800205c:	20000230 	.word	0x20000230

08002060 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b094      	sub	sp, #80	; 0x50
 8002064:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800206a:	2228      	movs	r2, #40	; 0x28
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f006 f8b0 	bl	80081d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002090:	2302      	movs	r3, #2
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002094:	2301      	movs	r3, #1
 8002096:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002098:	2310      	movs	r3, #16
 800209a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800209c:	2302      	movs	r3, #2
 800209e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80020a0:	2300      	movs	r3, #0
 80020a2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80020a4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80020a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 fa86 	bl	80065c0 <HAL_RCC_OscConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <SystemClock_Config+0x5e>
	{
		Error_Handler();
 80020ba:	f001 fa9f 	bl	80035fc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020be:	230f      	movs	r3, #15
 80020c0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020c2:	2302      	movs	r3, #2
 80020c4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ce:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	2102      	movs	r1, #2
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 fcf0 	bl	8006ac0 <HAL_RCC_ClockConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <SystemClock_Config+0x8a>
	{
		Error_Handler();
 80020e6:	f001 fa89 	bl	80035fc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020ea:	2302      	movs	r3, #2
 80020ec:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80020ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80020f2:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	4618      	mov	r0, r3
 80020f8:	f004 fe7e 	bl	8006df8 <HAL_RCCEx_PeriphCLKConfig>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8002102:	f001 fa7b 	bl	80035fc <Error_Handler>
	}
}
 8002106:	bf00      	nop
 8002108:	3750      	adds	r7, #80	; 0x50
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MX_ADC1_Init+0x74>)
 8002122:	4a19      	ldr	r2, [pc, #100]	; (8002188 <MX_ADC1_Init+0x78>)
 8002124:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <MX_ADC1_Init+0x74>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <MX_ADC1_Init+0x74>)
 800212e:	2200      	movs	r2, #0
 8002130:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <MX_ADC1_Init+0x74>)
 8002134:	2200      	movs	r2, #0
 8002136:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <MX_ADC1_Init+0x74>)
 800213a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800213e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002140:	4b10      	ldr	r3, [pc, #64]	; (8002184 <MX_ADC1_Init+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <MX_ADC1_Init+0x74>)
 8002148:	2201      	movs	r2, #1
 800214a:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800214c:	480d      	ldr	r0, [pc, #52]	; (8002184 <MX_ADC1_Init+0x74>)
 800214e:	f002 f865 	bl	800421c <HAL_ADC_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8002158:	f001 fa50 	bl	80035fc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800215c:	2300      	movs	r3, #0
 800215e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002160:	2301      	movs	r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	4619      	mov	r1, r3
 800216c:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_ADC1_Init+0x74>)
 800216e:	f002 fae1 	bl	8004734 <HAL_ADC_ConfigChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8002178:	f001 fa40 	bl	80035fc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200006f0 	.word	0x200006f0
 8002188:	40012400 	.word	0x40012400

0800218c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <MX_I2C2_Init+0x50>)
 8002192:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <MX_I2C2_Init+0x54>)
 8002194:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <MX_I2C2_Init+0x50>)
 8002198:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <MX_I2C2_Init+0x58>)
 800219a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <MX_I2C2_Init+0x50>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <MX_I2C2_Init+0x50>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <MX_I2C2_Init+0x50>)
 80021aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ae:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <MX_I2C2_Init+0x50>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <MX_I2C2_Init+0x50>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021bc:	4b07      	ldr	r3, [pc, #28]	; (80021dc <MX_I2C2_Init+0x50>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <MX_I2C2_Init+0x50>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021c8:	4804      	ldr	r0, [pc, #16]	; (80021dc <MX_I2C2_Init+0x50>)
 80021ca:	f002 ff5d 	bl	8005088 <HAL_I2C_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 80021d4:	f001 fa12 	bl	80035fc <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	2000069c 	.word	0x2000069c
 80021e0:	40005800 	.word	0x40005800
 80021e4:	00061a80 	.word	0x00061a80

080021e8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80021fc:	463b      	mov	r3, r7
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <MX_TIM1_Init+0x98>)
 8002206:	4a1f      	ldr	r2, [pc, #124]	; (8002284 <MX_TIM1_Init+0x9c>)
 8002208:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 64 - 1;
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <MX_TIM1_Init+0x98>)
 800220c:	223f      	movs	r2, #63	; 0x3f
 800220e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002210:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <MX_TIM1_Init+0x98>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0xffff - 1;
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <MX_TIM1_Init+0x98>)
 8002218:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800221c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <MX_TIM1_Init+0x98>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002224:	4b16      	ldr	r3, [pc, #88]	; (8002280 <MX_TIM1_Init+0x98>)
 8002226:	2200      	movs	r2, #0
 8002228:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <MX_TIM1_Init+0x98>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002230:	4813      	ldr	r0, [pc, #76]	; (8002280 <MX_TIM1_Init+0x98>)
 8002232:	f004 ff53 	bl	80070dc <HAL_TIM_Base_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 800223c:	f001 f9de 	bl	80035fc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002244:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002246:	f107 0308 	add.w	r3, r7, #8
 800224a:	4619      	mov	r1, r3
 800224c:	480c      	ldr	r0, [pc, #48]	; (8002280 <MX_TIM1_Init+0x98>)
 800224e:	f005 f967 	bl	8007520 <HAL_TIM_ConfigClockSource>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 8002258:	f001 f9d0 	bl	80035fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225c:	2300      	movs	r3, #0
 800225e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002264:	463b      	mov	r3, r7
 8002266:	4619      	mov	r1, r3
 8002268:	4805      	ldr	r0, [pc, #20]	; (8002280 <MX_TIM1_Init+0x98>)
 800226a:	f005 fb2d 	bl	80078c8 <HAL_TIMEx_MasterConfigSynchronization>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8002274:	f001 f9c2 	bl	80035fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000760 	.word	0x20000760
 8002284:	40012c00 	.word	0x40012c00

08002288 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800228e:	f107 0308 	add.w	r3, r7, #8
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800229c:	463b      	mov	r3, r7
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <MX_TIM4_Init+0x94>)
 80022a6:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <MX_TIM4_Init+0x98>)
 80022a8:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1000 - 1;
 80022aa:	4b1c      	ldr	r3, [pc, #112]	; (800231c <MX_TIM4_Init+0x94>)
 80022ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022b0:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MX_TIM4_Init+0x94>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = (64 * BTN_CHECK_PERIOD_MS) - 1;
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <MX_TIM4_Init+0x94>)
 80022ba:	f240 227f 	movw	r2, #639	; 0x27f
 80022be:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <MX_TIM4_Init+0x94>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <MX_TIM4_Init+0x94>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022cc:	4813      	ldr	r0, [pc, #76]	; (800231c <MX_TIM4_Init+0x94>)
 80022ce:	f004 ff05 	bl	80070dc <HAL_TIM_Base_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM4_Init+0x54>
	{
		Error_Handler();
 80022d8:	f001 f990 	bl	80035fc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	4619      	mov	r1, r3
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <MX_TIM4_Init+0x94>)
 80022ea:	f005 f919 	bl	8007520 <HAL_TIM_ConfigClockSource>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 80022f4:	f001 f982 	bl	80035fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002300:	463b      	mov	r3, r7
 8002302:	4619      	mov	r1, r3
 8002304:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_TIM4_Init+0x94>)
 8002306:	f005 fadf 	bl	80078c8 <HAL_TIMEx_MasterConfigSynchronization>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 8002310:	f001 f974 	bl	80035fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000654 	.word	0x20000654
 8002320:	40000800 	.word	0x40000800

08002324 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <MX_USART1_UART_Init+0x50>)
 800232c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 8002330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002334:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_USART1_UART_Init+0x4c>)
 800235c:	f005 fb24 	bl	80079a8 <HAL_UART_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8002366:	f001 f949 	bl	80035fc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000720 	.word	0x20000720
 8002374:	40013800 	.word	0x40013800

08002378 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800237e:	f107 0310 	add.w	r3, r7, #16
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800238c:	4b3e      	ldr	r3, [pc, #248]	; (8002488 <MX_GPIO_Init+0x110>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a3d      	ldr	r2, [pc, #244]	; (8002488 <MX_GPIO_Init+0x110>)
 8002392:	f043 0310 	orr.w	r3, r3, #16
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <MX_GPIO_Init+0x110>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023a4:	4b38      	ldr	r3, [pc, #224]	; (8002488 <MX_GPIO_Init+0x110>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	4a37      	ldr	r2, [pc, #220]	; (8002488 <MX_GPIO_Init+0x110>)
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	6193      	str	r3, [r2, #24]
 80023b0:	4b35      	ldr	r3, [pc, #212]	; (8002488 <MX_GPIO_Init+0x110>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023bc:	4b32      	ldr	r3, [pc, #200]	; (8002488 <MX_GPIO_Init+0x110>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	4a31      	ldr	r2, [pc, #196]	; (8002488 <MX_GPIO_Init+0x110>)
 80023c2:	f043 0308 	orr.w	r3, r3, #8
 80023c6:	6193      	str	r3, [r2, #24]
 80023c8:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <MX_GPIO_Init+0x110>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 80023d4:	2200      	movs	r2, #0
 80023d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023da:	482c      	ldr	r0, [pc, #176]	; (800248c <MX_GPIO_Init+0x114>)
 80023dc:	f002 fe23 	bl	8005026 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_BUILTIN_Pin */
	GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80023e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023e4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e6:	2301      	movs	r3, #1
 80023e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ee:	2302      	movs	r3, #2
 80023f0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f107 0310 	add.w	r3, r7, #16
 80023f6:	4619      	mov	r1, r3
 80023f8:	4824      	ldr	r0, [pc, #144]	; (800248c <MX_GPIO_Init+0x114>)
 80023fa:	f002 fca3 	bl	8004d44 <HAL_GPIO_Init>

	/*Configure GPIO pin : DS18B20_Pin */
	GPIO_InitStruct.Pin = DS18B20_Pin;
 80023fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002402:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002408:	2301      	movs	r3, #1
 800240a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	4619      	mov	r1, r3
 8002412:	481e      	ldr	r0, [pc, #120]	; (800248c <MX_GPIO_Init+0x114>)
 8002414:	f002 fc96 	bl	8004d44 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_UP_Pin BTN_LEFT_Pin BTN_CENTER_Pin BTN_RIGHT_Pin
	 BTN_DOWN_Pin */
	GPIO_InitStruct.Pin = BTN_UP_Pin | BTN_LEFT_Pin | BTN_CENTER_Pin | BTN_RIGHT_Pin | BTN_DOWN_Pin;
 8002418:	233e      	movs	r3, #62	; 0x3e
 800241a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800241c:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <MX_GPIO_Init+0x118>)
 800241e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002420:	2301      	movs	r3, #1
 8002422:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	4619      	mov	r1, r3
 800242a:	481a      	ldr	r0, [pc, #104]	; (8002494 <MX_GPIO_Init+0x11c>)
 800242c:	f002 fc8a 	bl	8004d44 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2100      	movs	r1, #0
 8002434:	2007      	movs	r0, #7
 8002436:	f002 fbd8 	bl	8004bea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800243a:	2007      	movs	r0, #7
 800243c:	f002 fbf1 	bl	8004c22 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	2008      	movs	r0, #8
 8002446:	f002 fbd0 	bl	8004bea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800244a:	2008      	movs	r0, #8
 800244c:	f002 fbe9 	bl	8004c22 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	2100      	movs	r1, #0
 8002454:	2009      	movs	r0, #9
 8002456:	f002 fbc8 	bl	8004bea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800245a:	2009      	movs	r0, #9
 800245c:	f002 fbe1 	bl	8004c22 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002460:	2200      	movs	r2, #0
 8002462:	2100      	movs	r1, #0
 8002464:	200a      	movs	r0, #10
 8002466:	f002 fbc0 	bl	8004bea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800246a:	200a      	movs	r0, #10
 800246c:	f002 fbd9 	bl	8004c22 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002470:	2200      	movs	r2, #0
 8002472:	2100      	movs	r1, #0
 8002474:	2017      	movs	r0, #23
 8002476:	f002 fbb8 	bl	8004bea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800247a:	2017      	movs	r0, #23
 800247c:	f002 fbd1 	bl	8004c22 <HAL_NVIC_EnableIRQ>

}
 8002480:	bf00      	nop
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	40011000 	.word	0x40011000
 8002490:	10310000 	.word	0x10310000
 8002494:	40010800 	.word	0x40010800

08002498 <Reset_Cycles>:

/* USER CODE BEGIN 4 */
void Reset_Cycles(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
	cycle_count = 0;
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <Reset_Cycles+0x1c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
	next_cycle_tick = ms_ticks;
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <Reset_Cycles+0x20>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a05      	ldr	r2, [pc, #20]	; (80024bc <Reset_Cycles+0x24>)
 80024a8:	6013      	str	r3, [r2, #0]
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000234 	.word	0x20000234
 80024b8:	20000230 	.word	0x20000230
 80024bc:	20000238 	.word	0x20000238

080024c0 <BMP280_Init>:

void BMP280_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	bmp280_init_default_params(&bmp280.params);
 80024c4:	480d      	ldr	r0, [pc, #52]	; (80024fc <BMP280_Init+0x3c>)
 80024c6:	f7fe ffdd 	bl	8001484 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <BMP280_Init+0x40>)
 80024cc:	2276      	movs	r2, #118	; 0x76
 80024ce:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c2;
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <BMP280_Init+0x40>)
 80024d2:	4a0c      	ldr	r2, [pc, #48]	; (8002504 <BMP280_Init+0x44>)
 80024d4:	629a      	str	r2, [r3, #40]	; 0x28

	if (!bmp280_init(&bmp280, &bmp280.params))
 80024d6:	4909      	ldr	r1, [pc, #36]	; (80024fc <BMP280_Init+0x3c>)
 80024d8:	4809      	ldr	r0, [pc, #36]	; (8002500 <BMP280_Init+0x40>)
 80024da:	f7ff f94d 	bl	8001778 <bmp280_init>
 80024de:	4603      	mov	r3, r0
 80024e0:	f083 0301 	eor.w	r3, r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <BMP280_Init+0x38>
	{
		Print_Info("I2C init FAILED\n");
 80024ea:	4807      	ldr	r0, [pc, #28]	; (8002508 <BMP280_Init+0x48>)
 80024ec:	f000 facc 	bl	8002a88 <Print_Info>
		HAL_Delay(1000);
 80024f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024f4:	f001 fe70 	bl	80041d8 <HAL_Delay>
	}

//	bool bme280p = (bmp280.id == BME280_CHIP_ID);
//	Print_Simple(9, (char*)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200007d4 	.word	0x200007d4
 8002500:	200007a8 	.word	0x200007a8
 8002504:	2000069c 	.word	0x2000069c
 8002508:	0800a330 	.word	0x0800a330

0800250c <ADC_Init>:

void ADC_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
	// Discards first bad reading
	ADC_Read_Temp();
 8002510:	f000 f87a 	bl	8002608 <ADC_Read_Temp>
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <DS18B20_Read_Temp>:

float DS18B20_Read_Temp(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
	// Start temperature sensing and wait until it's done
	int s1 = DS18B20_Start();
 800251e:	f000 fbe5 	bl	8002cec <DS18B20_Start>
 8002522:	4603      	mov	r3, r0
 8002524:	60fb      	str	r3, [r7, #12]
	DS18B20_Write(0xCC); // Skip ROM
 8002526:	20cc      	movs	r0, #204	; 0xcc
 8002528:	f000 fc14 	bl	8002d54 <DS18B20_Write>
	DS18B20_Write(0x44); // Convert t
 800252c:	2044      	movs	r0, #68	; 0x44
 800252e:	f000 fc11 	bl	8002d54 <DS18B20_Write>
	HAL_Delay(800); // Waiting for conversion to end
 8002532:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002536:	f001 fe4f 	bl	80041d8 <HAL_Delay>

	// Read acquired temperature
	int s2 = DS18B20_Start();
 800253a:	f000 fbd7 	bl	8002cec <DS18B20_Start>
 800253e:	4603      	mov	r3, r0
 8002540:	60bb      	str	r3, [r7, #8]
	DS18B20_Write(0xCC); // Skip ROM
 8002542:	20cc      	movs	r0, #204	; 0xcc
 8002544:	f000 fc06 	bl	8002d54 <DS18B20_Write>
	DS18B20_Write(0xBE); // Read Scratch-pad
 8002548:	20be      	movs	r0, #190	; 0xbe
 800254a:	f000 fc03 	bl	8002d54 <DS18B20_Write>
	uint8_t temp_byte1 = DS18B20_Read();
 800254e:	f000 fc4f 	bl	8002df0 <DS18B20_Read>
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_byte2 = DS18B20_Read();
 8002556:	f000 fc4b 	bl	8002df0 <DS18B20_Read>
 800255a:	4603      	mov	r3, r0
 800255c:	71bb      	strb	r3, [r7, #6]

	if (!s1 || !s2)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <DS18B20_Read_Temp+0x52>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d108      	bne.n	800257c <DS18B20_Read_Temp+0x64>
	{
		Print_Info("1-Wire Failed");
 800256a:	4811      	ldr	r0, [pc, #68]	; (80025b0 <DS18B20_Read_Temp+0x98>)
 800256c:	f000 fa8c 	bl	8002a88 <Print_Info>
		HAL_Delay(500);
 8002570:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002574:	f001 fe30 	bl	80041d8 <HAL_Delay>
		return TEMP_FAILED;
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <DS18B20_Read_Temp+0x9c>)
 800257a:	e014      	b.n	80025a6 <DS18B20_Read_Temp+0x8e>
	}

	// Decode temperature
	uint16_t temp = (temp_byte2 << 8) | temp_byte1;
 800257c:	79bb      	ldrb	r3, [r7, #6]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	b21a      	sxth	r2, r3
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	b21b      	sxth	r3, r3
 8002586:	4313      	orrs	r3, r2
 8002588:	b21b      	sxth	r3, r3
 800258a:	80bb      	strh	r3, [r7, #4]
	float temperature = (float)temp / 16.0;
 800258c:	88bb      	ldrh	r3, [r7, #4]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fb80 	bl	8000c94 <__aeabi_ui2f>
 8002594:	4603      	mov	r3, r0
 8002596:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fc86 	bl	8000eac <__aeabi_fdiv>
 80025a0:	4603      	mov	r3, r0
 80025a2:	603b      	str	r3, [r7, #0]

	return temperature;
 80025a4:	683b      	ldr	r3, [r7, #0]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	0800a344 	.word	0x0800a344
 80025b4:	c3ca0000 	.word	0xc3ca0000

080025b8 <BMP280_Read_Temp>:

float BMP280_Read_Temp(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
	float pressure, temperature, humidity;

	if (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity))
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	f107 020c 	add.w	r2, r7, #12
 80025c4:	f107 0108 	add.w	r1, r7, #8
 80025c8:	480b      	ldr	r0, [pc, #44]	; (80025f8 <BMP280_Read_Temp+0x40>)
 80025ca:	f7ff fc27 	bl	8001e1c <bmp280_read_float>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f083 0301 	eor.w	r3, r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d008      	beq.n	80025ec <BMP280_Read_Temp+0x34>
	{
		Print_Info("I2C read FAILED\n");
 80025da:	4808      	ldr	r0, [pc, #32]	; (80025fc <BMP280_Read_Temp+0x44>)
 80025dc:	f000 fa54 	bl	8002a88 <Print_Info>
		HAL_Delay(500);
 80025e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025e4:	f001 fdf8 	bl	80041d8 <HAL_Delay>
		temperature = TEMP_FAILED;
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <BMP280_Read_Temp+0x48>)
 80025ea:	60bb      	str	r3, [r7, #8]
	}

	return temperature;
 80025ec:	68bb      	ldr	r3, [r7, #8]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200007a8 	.word	0x200007a8
 80025fc:	0800a354 	.word	0x0800a354
 8002600:	c3ca0000 	.word	0xc3ca0000
 8002604:	00000000 	.word	0x00000000

08002608 <ADC_Read_Temp>:

float ADC_Read_Temp(void)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
	uint8_t readings_num = 10;
 800260e:	230a      	movs	r3, #10
 8002610:	71fb      	strb	r3, [r7, #7]
	float temperature;
	uint32_t adc_val = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]

	HAL_ADC_Start(&hadc1);
 8002616:	4824      	ldr	r0, [pc, #144]	; (80026a8 <ADC_Read_Temp+0xa0>)
 8002618:	f001 fed8 	bl	80043cc <HAL_ADC_Start>
	for (int i = 0; i < readings_num; i++)
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	e010      	b.n	8002644 <ADC_Read_Temp+0x3c>
	{
		HAL_ADC_PollForConversion(&hadc1, 10);
 8002622:	210a      	movs	r1, #10
 8002624:	4820      	ldr	r0, [pc, #128]	; (80026a8 <ADC_Read_Temp+0xa0>)
 8002626:	f001 ff7f 	bl	8004528 <HAL_ADC_PollForConversion>
		adc_val += HAL_ADC_GetValue(&hadc1);
 800262a:	481f      	ldr	r0, [pc, #124]	; (80026a8 <ADC_Read_Temp+0xa0>)
 800262c:	f002 f876 	bl	800471c <HAL_ADC_GetValue>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4413      	add	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1);
 8002638:	2001      	movs	r0, #1
 800263a:	f001 fdcd 	bl	80041d8 <HAL_Delay>
	for (int i = 0; i < readings_num; i++)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	3301      	adds	r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	429a      	cmp	r2, r3
 800264a:	dbea      	blt.n	8002622 <ADC_Read_Temp+0x1a>
	}
	adc_val /= readings_num;
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	60fb      	str	r3, [r7, #12]

	temperature = ADC_CALIB_SLOPE * adc_val + ADC_CALIB_BIAS; // ADC value to temperature conversion
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7fd fec4 	bl	80003e4 <__aeabi_ui2d>
 800265c:	a30e      	add	r3, pc, #56	; (adr r3, 8002698 <ADC_Read_Temp+0x90>)
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	f7fd ff39 	bl	80004d8 <__aeabi_dmul>
 8002666:	4603      	mov	r3, r0
 8002668:	460c      	mov	r4, r1
 800266a:	4618      	mov	r0, r3
 800266c:	4621      	mov	r1, r4
 800266e:	a30c      	add	r3, pc, #48	; (adr r3, 80026a0 <ADC_Read_Temp+0x98>)
 8002670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002674:	f7fd fd7a 	bl	800016c <__adddf3>
 8002678:	4603      	mov	r3, r0
 800267a:	460c      	mov	r4, r1
 800267c:	4618      	mov	r0, r3
 800267e:	4621      	mov	r1, r4
 8002680:	f7fe fa02 	bl	8000a88 <__aeabi_d2f>
 8002684:	4603      	mov	r3, r0
 8002686:	603b      	str	r3, [r7, #0]

	return temperature;
 8002688:	683b      	ldr	r3, [r7, #0]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bd90      	pop	{r4, r7, pc}
 8002692:	bf00      	nop
 8002694:	f3af 8000 	nop.w
 8002698:	8ce703b0 	.word	0x8ce703b0
 800269c:	bfbded28 	.word	0xbfbded28
 80026a0:	0a3d70a4 	.word	0x0a3d70a4
 80026a4:	407763d7 	.word	0x407763d7
 80026a8:	200006f0 	.word	0x200006f0

080026ac <EEPROM_Read>:

void EEPROM_Read(uint16_t mem_addr, uint8_t *p_data, uint16_t data_size)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af04      	add	r7, sp, #16
 80026b2:	4603      	mov	r3, r0
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	80fb      	strh	r3, [r7, #6]
 80026b8:	4613      	mov	r3, r2
 80026ba:	80bb      	strh	r3, [r7, #4]
	while (HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDRESS, mem_addr, I2C_MEMADD_SIZE_16BIT, p_data, data_size, 1000) != HAL_OK)
 80026bc:	e002      	b.n	80026c4 <EEPROM_Read+0x18>
		HAL_Delay(1);
 80026be:	2001      	movs	r0, #1
 80026c0:	f001 fd8a 	bl	80041d8 <HAL_Delay>
	while (HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDRESS, mem_addr, I2C_MEMADD_SIZE_16BIT, p_data, data_size, 1000) != HAL_OK)
 80026c4:	88fa      	ldrh	r2, [r7, #6]
 80026c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ca:	9302      	str	r3, [sp, #8]
 80026cc:	88bb      	ldrh	r3, [r7, #4]
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2310      	movs	r3, #16
 80026d6:	21a0      	movs	r1, #160	; 0xa0
 80026d8:	4804      	ldr	r0, [pc, #16]	; (80026ec <EEPROM_Read+0x40>)
 80026da:	f003 f805 	bl	80056e8 <HAL_I2C_Mem_Read>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1ec      	bne.n	80026be <EEPROM_Read+0x12>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	2000069c 	.word	0x2000069c

080026f0 <EEPROM_Write>:

void EEPROM_Write(uint16_t mem_addr, uint8_t *p_data, uint16_t data_size)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af04      	add	r7, sp, #16
 80026f6:	4603      	mov	r3, r0
 80026f8:	6039      	str	r1, [r7, #0]
 80026fa:	80fb      	strh	r3, [r7, #6]
 80026fc:	4613      	mov	r3, r2
 80026fe:	80bb      	strh	r3, [r7, #4]
	// TODO maybe: Needs checking for page crossing; page = 64B. Or else use carefully
	while (HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, mem_addr, I2C_MEMADD_SIZE_16BIT, p_data, data_size, 1000) != HAL_OK)
 8002700:	e002      	b.n	8002708 <EEPROM_Write+0x18>
		HAL_Delay(1);
 8002702:	2001      	movs	r0, #1
 8002704:	f001 fd68 	bl	80041d8 <HAL_Delay>
	while (HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, mem_addr, I2C_MEMADD_SIZE_16BIT, p_data, data_size, 1000) != HAL_OK)
 8002708:	88fa      	ldrh	r2, [r7, #6]
 800270a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800270e:	9302      	str	r3, [sp, #8]
 8002710:	88bb      	ldrh	r3, [r7, #4]
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2310      	movs	r3, #16
 800271a:	21a0      	movs	r1, #160	; 0xa0
 800271c:	4804      	ldr	r0, [pc, #16]	; (8002730 <EEPROM_Write+0x40>)
 800271e:	f002 fee9 	bl	80054f4 <HAL_I2C_Mem_Write>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ec      	bne.n	8002702 <EEPROM_Write+0x12>
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	2000069c 	.word	0x2000069c

08002734 <EEPROM_Erase>:

void EEPROM_Erase(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b096      	sub	sp, #88	; 0x58
 8002738:	af04      	add	r7, sp, #16
	uint8_t erased[EEPROM_BLOCK_ERASE_SIZE];
	memset(erased, EEPROM_ERASED_VALUE, sizeof(erased));
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	2240      	movs	r2, #64	; 0x40
 800273e:	21ff      	movs	r1, #255	; 0xff
 8002740:	4618      	mov	r0, r3
 8002742:	f005 fd47 	bl	80081d4 <memset>

	for (int i = 0; i < (int)(EEPROM_SIZE_BYTES / EEPROM_BLOCK_ERASE_SIZE); i++)
 8002746:	2300      	movs	r3, #0
 8002748:	647b      	str	r3, [r7, #68]	; 0x44
 800274a:	e018      	b.n	800277e <EEPROM_Erase+0x4a>
	{
		while (HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, i * EEPROM_BLOCK_ERASE_SIZE,
		I2C_MEMADD_SIZE_16BIT, erased, EEPROM_BLOCK_ERASE_SIZE, 1000) != HAL_OK)
			HAL_Delay(1);
 800274c:	2001      	movs	r0, #1
 800274e:	f001 fd43 	bl	80041d8 <HAL_Delay>
		while (HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDRESS, i * EEPROM_BLOCK_ERASE_SIZE,
 8002752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002754:	b29b      	uxth	r3, r3
 8002756:	019b      	lsls	r3, r3, #6
 8002758:	b29a      	uxth	r2, r3
 800275a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275e:	9302      	str	r3, [sp, #8]
 8002760:	2340      	movs	r3, #64	; 0x40
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	1d3b      	adds	r3, r7, #4
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2310      	movs	r3, #16
 800276a:	21a0      	movs	r1, #160	; 0xa0
 800276c:	4808      	ldr	r0, [pc, #32]	; (8002790 <EEPROM_Erase+0x5c>)
 800276e:	f002 fec1 	bl	80054f4 <HAL_I2C_Mem_Write>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e9      	bne.n	800274c <EEPROM_Erase+0x18>
	for (int i = 0; i < (int)(EEPROM_SIZE_BYTES / EEPROM_BLOCK_ERASE_SIZE); i++)
 8002778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277a:	3301      	adds	r3, #1
 800277c:	647b      	str	r3, [r7, #68]	; 0x44
 800277e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002784:	dbe5      	blt.n	8002752 <EEPROM_Erase+0x1e>
	}
}
 8002786:	bf00      	nop
 8002788:	3748      	adds	r7, #72	; 0x48
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000069c 	.word	0x2000069c

08002794 <Temp_Save_Single>:

void Temp_Save_Single(uint16_t place, uint16_t temp)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	460a      	mov	r2, r1
 800279e:	80fb      	strh	r3, [r7, #6]
 80027a0:	4613      	mov	r3, r2
 80027a2:	80bb      	strh	r3, [r7, #4]
	EEPROM_Write(ADDR_TEMP + 2 * place, (uint8_t*)&temp, 2); // Won't cross page boundary 64 % 2 = 0
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	1d39      	adds	r1, r7, #4
 80027b2:	2202      	movs	r2, #2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff9b 	bl	80026f0 <EEPROM_Write>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <Temp_Save>:

void Temp_Save(uint16_t place, Temps16 temps)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	e883 0006 	stmia.w	r3, {r1, r2}
 80027ce:	4603      	mov	r3, r0
 80027d0:	81fb      	strh	r3, [r7, #14]
	// Saved separately to prevent page boundary crossing
	Temp_Save_Single(3 * place + 0, temps.temp_1w);
 80027d2:	89fb      	ldrh	r3, [r7, #14]
 80027d4:	461a      	mov	r2, r3
 80027d6:	0052      	lsls	r2, r2, #1
 80027d8:	4413      	add	r3, r2
 80027da:	b29b      	uxth	r3, r3
 80027dc:	88ba      	ldrh	r2, [r7, #4]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ffd7 	bl	8002794 <Temp_Save_Single>
	Temp_Save_Single(3 * place + 1, temps.temp_i2c);
 80027e6:	89fb      	ldrh	r3, [r7, #14]
 80027e8:	461a      	mov	r2, r3
 80027ea:	0052      	lsls	r2, r2, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	88fa      	ldrh	r2, [r7, #6]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ffcb 	bl	8002794 <Temp_Save_Single>
	Temp_Save_Single(3 * place + 2, temps.temp_adc);
 80027fe:	89fb      	ldrh	r3, [r7, #14]
 8002800:	461a      	mov	r2, r3
 8002802:	0052      	lsls	r2, r2, #1
 8002804:	4413      	add	r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	3302      	adds	r3, #2
 800280a:	b29b      	uxth	r3, r3
 800280c:	893a      	ldrh	r2, [r7, #8]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ffbf 	bl	8002794 <Temp_Save_Single>
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <Temp_Read_Single>:

uint16_t Temp_Read_Single(uint16_t place)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	80fb      	strh	r3, [r7, #6]
	uint16_t temp_encoded;
	EEPROM_Read(ADDR_TEMP + sizeof(temp_encoded) * place, (uint8_t*)&temp_encoded, sizeof(temp_encoded));
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800282e:	b29b      	uxth	r3, r3
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	b29b      	uxth	r3, r3
 8002834:	f107 010e 	add.w	r1, r7, #14
 8002838:	2202      	movs	r2, #2
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff36 	bl	80026ac <EEPROM_Read>
	return temp_encoded;
 8002840:	89fb      	ldrh	r3, [r7, #14]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <Temp_Read>:

Temps16 Temp_Read(uint16_t place)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	460b      	mov	r3, r1
 8002854:	807b      	strh	r3, [r7, #2]
	Temps16 temps;
	EEPROM_Read(ADDR_TEMP + sizeof(temps) * place, (uint8_t*)&temps, sizeof(temps));
 8002856:	887b      	ldrh	r3, [r7, #2]
 8002858:	461a      	mov	r2, r3
 800285a:	0052      	lsls	r2, r2, #1
 800285c:	4413      	add	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	b29b      	uxth	r3, r3
 8002862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002866:	b29b      	uxth	r3, r3
 8002868:	f107 0108 	add.w	r1, r7, #8
 800286c:	2206      	movs	r2, #6
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff1c 	bl	80026ac <EEPROM_Read>
	return temps;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	461a      	mov	r2, r3
 8002878:	f107 0308 	add.w	r3, r7, #8
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	6010      	str	r0, [r2, #0]
 8002880:	889b      	ldrh	r3, [r3, #4]
 8002882:	8093      	strh	r3, [r2, #4]
}
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <Temp_Next_Free_Place>:

uint16_t Temp_Next_Free_Place(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < EEPROM_SIZE_BYTES / sizeof(Temps16); i++)
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	e00e      	b.n	80028b6 <Temp_Next_Free_Place+0x2a>
	{
		Temps16 t = Temp_Read(i);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	b29a      	uxth	r2, r3
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ffd2 	bl	800284a <Temp_Read>
		if (t.temp_adc == EEPROM_ERASED_TEMP)
 80028a6:	893b      	ldrh	r3, [r7, #8]
 80028a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d008      	beq.n	80028c2 <Temp_Next_Free_Place+0x36>
	for (i = 0; i < EEPROM_SIZE_BYTES / sizeof(Temps16); i++)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3301      	adds	r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f241 5254 	movw	r2, #5460	; 0x1554
 80028bc:	4293      	cmp	r3, r2
 80028be:	d9eb      	bls.n	8002898 <Temp_Next_Free_Place+0xc>
 80028c0:	e000      	b.n	80028c4 <Temp_Next_Free_Place+0x38>
			break;
 80028c2:	bf00      	nop
	}

	return i;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	b29b      	uxth	r3, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <Temp_Send_UART>:

// Send temperature data via UART in CSV format
void Temp_Send_UART(void)
{
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b08d      	sub	sp, #52	; 0x34
 80028d4:	af00      	add	r7, sp, #0
	const uint8_t num_of_temp_channels = 3;
 80028d6:	2303      	movs	r3, #3
 80028d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	char text[16];
	uint8_t text_len;

	// Reading number
	const uint16_t readings_count = Temp_Next_Free_Place();
 80028dc:	f7ff ffd6 	bl	800288c <Temp_Next_Free_Place>
 80028e0:	4603      	mov	r3, r0
 80028e2:	843b      	strh	r3, [r7, #32]
	for (int i = 0; i < readings_count; i++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e8:	e011      	b.n	800290e <Temp_Send_UART+0x3e>
	{
		text_len = sprintf(text, "%d,", i);
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ee:	4939      	ldr	r1, [pc, #228]	; (80029d4 <Temp_Send_UART+0x104>)
 80028f0:	4618      	mov	r0, r3
 80028f2:	f006 f8c7 	bl	8008a84 <siprintf>
 80028f6:	4603      	mov	r3, r0
 80028f8:	75fb      	strb	r3, [r7, #23]
		HAL_UART_Transmit(&huart1, (uint8_t*)text, text_len, 10);
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	1d39      	adds	r1, r7, #4
 8002900:	230a      	movs	r3, #10
 8002902:	4835      	ldr	r0, [pc, #212]	; (80029d8 <Temp_Send_UART+0x108>)
 8002904:	f005 f89d 	bl	8007a42 <HAL_UART_Transmit>
	for (int i = 0; i < readings_count; i++)
 8002908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290a:	3301      	adds	r3, #1
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290e:	8c3b      	ldrh	r3, [r7, #32]
 8002910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002912:	429a      	cmp	r2, r3
 8002914:	dbe9      	blt.n	80028ea <Temp_Send_UART+0x1a>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 10);
 8002916:	230a      	movs	r3, #10
 8002918:	2201      	movs	r2, #1
 800291a:	4930      	ldr	r1, [pc, #192]	; (80029dc <Temp_Send_UART+0x10c>)
 800291c:	482e      	ldr	r0, [pc, #184]	; (80029d8 <Temp_Send_UART+0x108>)
 800291e:	f005 f890 	bl	8007a42 <HAL_UART_Transmit>

	// Temperatures in 3 rows
	for (int i = 0; i < num_of_temp_channels; i++)
 8002922:	2300      	movs	r3, #0
 8002924:	62bb      	str	r3, [r7, #40]	; 0x28
 8002926:	e04b      	b.n	80029c0 <Temp_Send_UART+0xf0>
	{
		for (int j = i; j < EEPROM_SIZE_BYTES; j += num_of_temp_channels)
 8002928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	e039      	b.n	80029a2 <Temp_Send_UART+0xd2>
		{
			uint16_t temp = Temp_Read_Single(j);
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	b29b      	uxth	r3, r3
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff73 	bl	800281e <Temp_Read_Single>
 8002938:	4603      	mov	r3, r0
 800293a:	83fb      	strh	r3, [r7, #30]
			if (temp == EEPROM_ERASED_TEMP)
 800293c:	8bfb      	ldrh	r3, [r7, #30]
 800293e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002942:	4293      	cmp	r3, r2
 8002944:	d032      	beq.n	80029ac <Temp_Send_UART+0xdc>
				break;

			float temp_float = Temp_Dec(temp);
 8002946:	8bfb      	ldrh	r3, [r7, #30]
 8002948:	4618      	mov	r0, r3
 800294a:	f000 f873 	bl	8002a34 <Temp_Dec>
 800294e:	61b8      	str	r0, [r7, #24]
			text_len = sprintf(text, "%.3f,", temp_float);
 8002950:	69b8      	ldr	r0, [r7, #24]
 8002952:	f7fd fd69 	bl	8000428 <__aeabi_f2d>
 8002956:	4603      	mov	r3, r0
 8002958:	460c      	mov	r4, r1
 800295a:	1d38      	adds	r0, r7, #4
 800295c:	461a      	mov	r2, r3
 800295e:	4623      	mov	r3, r4
 8002960:	491f      	ldr	r1, [pc, #124]	; (80029e0 <Temp_Send_UART+0x110>)
 8002962:	f006 f88f 	bl	8008a84 <siprintf>
 8002966:	4603      	mov	r3, r0
 8002968:	75fb      	strb	r3, [r7, #23]
			HAL_UART_Transmit(&huart1, (uint8_t*)text, text_len, 10);
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	b29a      	uxth	r2, r3
 800296e:	1d39      	adds	r1, r7, #4
 8002970:	230a      	movs	r3, #10
 8002972:	4819      	ldr	r0, [pc, #100]	; (80029d8 <Temp_Send_UART+0x108>)
 8002974:	f005 f865 	bl	8007a42 <HAL_UART_Transmit>

			if (j % 100 == 0)
 8002978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297a:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <Temp_Send_UART+0x114>)
 800297c:	fb83 1302 	smull	r1, r3, r3, r2
 8002980:	1159      	asrs	r1, r3, #5
 8002982:	17d3      	asrs	r3, r2, #31
 8002984:	1acb      	subs	r3, r1, r3
 8002986:	2164      	movs	r1, #100	; 0x64
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d102      	bne.n	8002998 <Temp_Send_UART+0xc8>
				HAL_Delay(10);
 8002992:	200a      	movs	r0, #10
 8002994:	f001 fc20 	bl	80041d8 <HAL_Delay>
		for (int j = i; j < EEPROM_SIZE_BYTES; j += num_of_temp_channels)
 8002998:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800299c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299e:	4413      	add	r3, r2
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a8:	dbc1      	blt.n	800292e <Temp_Send_UART+0x5e>
 80029aa:	e000      	b.n	80029ae <Temp_Send_UART+0xde>
				break;
 80029ac:	bf00      	nop
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)"\n", 1, 10);
 80029ae:	230a      	movs	r3, #10
 80029b0:	2201      	movs	r2, #1
 80029b2:	490a      	ldr	r1, [pc, #40]	; (80029dc <Temp_Send_UART+0x10c>)
 80029b4:	4808      	ldr	r0, [pc, #32]	; (80029d8 <Temp_Send_UART+0x108>)
 80029b6:	f005 f844 	bl	8007a42 <HAL_UART_Transmit>
	for (int i = 0; i < num_of_temp_channels; i++)
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	3301      	adds	r3, #1
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029c6:	429a      	cmp	r2, r3
 80029c8:	dbae      	blt.n	8002928 <Temp_Send_UART+0x58>
	}
}
 80029ca:	bf00      	nop
 80029cc:	3734      	adds	r7, #52	; 0x34
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd90      	pop	{r4, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	0800a368 	.word	0x0800a368
 80029d8:	20000720 	.word	0x20000720
 80029dc:	0800a36c 	.word	0x0800a36c
 80029e0:	0800a370 	.word	0x0800a370
 80029e4:	51eb851f 	.word	0x51eb851f

080029e8 <Temp_Enc>:

// Encode temperature
uint16_t Temp_Enc(const float temp)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	float temp_clamped = Clamp(temp, TEMP_MIN, TEMP_MAX);
 80029f0:	4a0c      	ldr	r2, [pc, #48]	; (8002a24 <Temp_Enc+0x3c>)
 80029f2:	490d      	ldr	r1, [pc, #52]	; (8002a28 <Temp_Enc+0x40>)
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fa3d 	bl	8002e74 <Clamp>
 80029fa:	60f8      	str	r0, [r7, #12]
	return (temp_clamped + 20) * 655;
 80029fc:	490b      	ldr	r1, [pc, #44]	; (8002a2c <Temp_Enc+0x44>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f7fe f898 	bl	8000b34 <__addsf3>
 8002a04:	4603      	mov	r3, r0
 8002a06:	490a      	ldr	r1, [pc, #40]	; (8002a30 <Temp_Enc+0x48>)
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe f99b 	bl	8000d44 <__aeabi_fmul>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fb5d 	bl	80010d0 <__aeabi_f2uiz>
 8002a16:	4603      	mov	r3, r0
 8002a18:	b29b      	uxth	r3, r3
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	42a00000 	.word	0x42a00000
 8002a28:	c1a00000 	.word	0xc1a00000
 8002a2c:	41a00000 	.word	0x41a00000
 8002a30:	4423c000 	.word	0x4423c000

08002a34 <Temp_Dec>:

// Decode temperature
float Temp_Dec(const uint16_t temp)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	80fb      	strh	r3, [r7, #6]
	return (float)temp / 655.0 - 20.0;
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe f927 	bl	8000c94 <__aeabi_ui2f>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fced 	bl	8000428 <__aeabi_f2d>
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <Temp_Dec+0x4c>)
 8002a54:	f7fd fe6a 	bl	800072c <__aeabi_ddiv>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	4621      	mov	r1, r4
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <Temp_Dec+0x50>)
 8002a66:	f7fd fb7f 	bl	8000168 <__aeabi_dsub>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	460c      	mov	r4, r1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	4621      	mov	r1, r4
 8002a72:	f7fe f809 	bl	8000a88 <__aeabi_d2f>
 8002a76:	4603      	mov	r3, r0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd90      	pop	{r4, r7, pc}
 8002a80:	40847800 	.word	0x40847800
 8002a84:	40340000 	.word	0x40340000

08002a88 <Print_Info>:

void Print_Info(const char *info)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	Print_Simple(0, info);
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	2000      	movs	r0, #0
 8002a94:	f000 f806 	bl	8002aa4 <Print_Simple>
	SSD1306_UpdateScreen();
 8002a98:	f000 fe7a 	bl	8003790 <SSD1306_UpdateScreen>
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <Print_Simple>:
	SSD1306_Puts(text, &Font_7x10, 1);
}

// For debugging
void Print_Simple(uint8_t line, const char *format, ...)
{
 8002aa4:	b40e      	push	{r1, r2, r3}
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b0a5      	sub	sp, #148	; 0x94
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	71fb      	strb	r3, [r7, #7]
	char text[128];
	int text_len;

	va_list args;
	va_start(args, format);
 8002ab0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ab4:	60bb      	str	r3, [r7, #8]

// Send via UART and display on screen
	text_len = vsprintf(text, format, args);
 8002ab6:	f107 030c 	add.w	r3, r7, #12
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f006 f815 	bl	8008af0 <vsiprintf>
 8002ac6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	HAL_UART_Transmit(&huart1, (uint8_t*)text, text_len, 1000);
 8002aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	f107 010c 	add.w	r1, r7, #12
 8002ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad8:	4821      	ldr	r0, [pc, #132]	; (8002b60 <Print_Simple+0xbc>)
 8002ada:	f004 ffb2 	bl	8007a42 <HAL_UART_Transmit>

// Clear line
	SSD1306_GotoXY(0, FONT_SPACING * line);
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	0052      	lsls	r2, r2, #1
 8002ae6:	441a      	add	r2, r3
 8002ae8:	0092      	lsls	r2, r2, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	4619      	mov	r1, r3
 8002af0:	2000      	movs	r0, #0
 8002af2:	f000 fef1 	bl	80038d8 <SSD1306_GotoXY>
	SSD1306_Puts("                    ", &Font_7x10, 1);
 8002af6:	2201      	movs	r2, #1
 8002af8:	491a      	ldr	r1, [pc, #104]	; (8002b64 <Print_Simple+0xc0>)
 8002afa:	481b      	ldr	r0, [pc, #108]	; (8002b68 <Print_Simple+0xc4>)
 8002afc:	f000 ff82 	bl	8003a04 <SSD1306_Puts>

// Clear \n character for display
	if (text[text_len - 1] == '\n')
 8002b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b04:	3b01      	subs	r3, #1
 8002b06:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f813 3c84 	ldrb.w	r3, [r3, #-132]
 8002b10:	2b0a      	cmp	r3, #10
 8002b12:	d108      	bne.n	8002b26 <Print_Simple+0x82>
		text[text_len - 1] = '\0';
 8002b14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002b1e:	4413      	add	r3, r2
 8002b20:	2200      	movs	r2, #0
 8002b22:	f803 2c84 	strb.w	r2, [r3, #-132]

	SSD1306_GotoXY(0, FONT_SPACING * line);
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	0052      	lsls	r2, r2, #1
 8002b2e:	441a      	add	r2, r3
 8002b30:	0092      	lsls	r2, r2, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	4619      	mov	r1, r3
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f000 fecd 	bl	80038d8 <SSD1306_GotoXY>
	SSD1306_Puts(text, &Font_7x10, 1);
 8002b3e:	f107 030c 	add.w	r3, r7, #12
 8002b42:	2201      	movs	r2, #1
 8002b44:	4907      	ldr	r1, [pc, #28]	; (8002b64 <Print_Simple+0xc0>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 ff5c 	bl	8003a04 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // Could be removed for performance and updated only when needed
 8002b4c:	f000 fe20 	bl	8003790 <SSD1306_UpdateScreen>

	va_end(args);
}
 8002b50:	bf00      	nop
 8002b52:	3794      	adds	r7, #148	; 0x94
 8002b54:	46bd      	mov	sp, r7
 8002b56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b5a:	b003      	add	sp, #12
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000720 	.word	0x20000720
 8002b64:	20000000 	.word	0x20000000
 8002b68:	0800a380 	.word	0x0800a380

08002b6c <Print_Temps>:

void Print_Temps(uint8_t line, Temps16 temps)
{
 8002b6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b70:	b088      	sub	sp, #32
 8002b72:	af04      	add	r7, sp, #16
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	e883 0006 	stmia.w	r3, {r1, r2}
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	73fb      	strb	r3, [r7, #15]
	Print_Simple(line, "%0.2f %0.2f %0.2f\n", Temp_Dec(temps.temp_1w), Temp_Dec(temps.temp_i2c), Temp_Dec(temps.temp_adc));
 8002b7e:	88bb      	ldrh	r3, [r7, #4]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff57 	bl	8002a34 <Temp_Dec>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fc4d 	bl	8000428 <__aeabi_f2d>
 8002b8e:	4680      	mov	r8, r0
 8002b90:	4689      	mov	r9, r1
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff4d 	bl	8002a34 <Temp_Dec>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fc43 	bl	8000428 <__aeabi_f2d>
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	460d      	mov	r5, r1
 8002ba6:	893b      	ldrh	r3, [r7, #8]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff43 	bl	8002a34 <Temp_Dec>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fc39 	bl	8000428 <__aeabi_f2d>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	7bf8      	ldrb	r0, [r7, #15]
 8002bbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bc0:	e9cd 4500 	strd	r4, r5, [sp]
 8002bc4:	4642      	mov	r2, r8
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	4903      	ldr	r1, [pc, #12]	; (8002bd8 <Print_Temps+0x6c>)
 8002bca:	f7ff ff6b 	bl	8002aa4 <Print_Simple>
}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bd8:	0800a398 	.word	0x0800a398

08002bdc <Print_Booting_Info>:

void Print_Booting_Info(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
	Print_Info("BOOTING\n");
 8002be0:	4809      	ldr	r0, [pc, #36]	; (8002c08 <Print_Booting_Info+0x2c>)
 8002be2:	f7ff ff51 	bl	8002a88 <Print_Info>
	Print_Simple(2, " Reboot holding\n");
 8002be6:	4909      	ldr	r1, [pc, #36]	; (8002c0c <Print_Booting_Info+0x30>)
 8002be8:	2002      	movs	r0, #2
 8002bea:	f7ff ff5b 	bl	8002aa4 <Print_Simple>
	Print_Simple(3, "  Button UP to\n");
 8002bee:	4908      	ldr	r1, [pc, #32]	; (8002c10 <Print_Booting_Info+0x34>)
 8002bf0:	2003      	movs	r0, #3
 8002bf2:	f7ff ff57 	bl	8002aa4 <Print_Simple>
	Print_Simple(4, "send data via UART\n");
 8002bf6:	4907      	ldr	r1, [pc, #28]	; (8002c14 <Print_Booting_Info+0x38>)
 8002bf8:	2004      	movs	r0, #4
 8002bfa:	f7ff ff53 	bl	8002aa4 <Print_Simple>
	SSD1306_UpdateScreen();
 8002bfe:	f000 fdc7 	bl	8003790 <SSD1306_UpdateScreen>
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	0800a3ac 	.word	0x0800a3ac
 8002c0c:	0800a3b8 	.word	0x0800a3b8
 8002c10:	0800a3cc 	.word	0x0800a3cc
 8002c14:	0800a3dc 	.word	0x0800a3dc

08002c18 <Clear_Booting_Info>:

void Clear_Booting_Info(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
	Print_Info("");
 8002c1c:	4809      	ldr	r0, [pc, #36]	; (8002c44 <Clear_Booting_Info+0x2c>)
 8002c1e:	f7ff ff33 	bl	8002a88 <Print_Info>
	Print_Simple(2, "");
 8002c22:	4908      	ldr	r1, [pc, #32]	; (8002c44 <Clear_Booting_Info+0x2c>)
 8002c24:	2002      	movs	r0, #2
 8002c26:	f7ff ff3d 	bl	8002aa4 <Print_Simple>
	Print_Simple(3, "");
 8002c2a:	4906      	ldr	r1, [pc, #24]	; (8002c44 <Clear_Booting_Info+0x2c>)
 8002c2c:	2003      	movs	r0, #3
 8002c2e:	f7ff ff39 	bl	8002aa4 <Print_Simple>
	Print_Simple(4, "");
 8002c32:	4904      	ldr	r1, [pc, #16]	; (8002c44 <Clear_Booting_Info+0x2c>)
 8002c34:	2004      	movs	r0, #4
 8002c36:	f7ff ff35 	bl	8002aa4 <Print_Simple>
	SSD1306_UpdateScreen();
 8002c3a:	f000 fda9 	bl	8003790 <SSD1306_UpdateScreen>
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	0800a3f0 	.word	0x0800a3f0

08002c48 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c54:	f107 0308 	add.w	r3, r7, #8
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002c62:	887b      	ldrh	r3, [r7, #2]
 8002c64:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c66:	2301      	movs	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002c6e:	f107 0308 	add.w	r3, r7, #8
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f002 f865 	bl	8004d44 <HAL_GPIO_Init>
}
 8002c7a:	bf00      	nop
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b086      	sub	sp, #24
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c8e:	f107 0308 	add.w	r3, r7, #8
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002c9c:	887b      	ldrh	r3, [r7, #2]
 8002c9e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002ca8:	f107 0308 	add.w	r3, r7, #8
 8002cac:	4619      	mov	r1, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f002 f848 	bl	8004d44 <HAL_GPIO_Init>
}
 8002cb4:	bf00      	nop
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <Delay_Us>:

void Delay_Us(uint16_t us)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0); // Set the counter value a 0
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <Delay_Us+0x2c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us)
 8002cce:	bf00      	nop
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <Delay_Us+0x2c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d3f9      	bcc.n	8002cd0 <Delay_Us+0x14>
		; // Wait for the counter to reach the us input in the parameter
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000760 	.word	0x20000760

08002cec <DS18B20_Start>:

uint8_t DS18B20_Start(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
	uint8_t presence = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);
 8002cf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cfa:	4815      	ldr	r0, [pc, #84]	; (8002d50 <DS18B20_Start+0x64>)
 8002cfc:	f7ff ffa4 	bl	8002c48 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, 0);
 8002d00:	2200      	movs	r2, #0
 8002d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d06:	4812      	ldr	r0, [pc, #72]	; (8002d50 <DS18B20_Start+0x64>)
 8002d08:	f002 f98d 	bl	8005026 <HAL_GPIO_WritePin>
	Delay_Us(480);
 8002d0c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002d10:	f7ff ffd4 	bl	8002cbc <Delay_Us>

	Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 8002d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d18:	480d      	ldr	r0, [pc, #52]	; (8002d50 <DS18B20_Start+0x64>)
 8002d1a:	f7ff ffb2 	bl	8002c82 <Set_Pin_Input>
	Delay_Us(100); // min: 30us max ~240us
 8002d1e:	2064      	movs	r0, #100	; 0x64
 8002d20:	f7ff ffcc 	bl	8002cbc <Delay_Us>

	if (!(HAL_GPIO_ReadPin(DS18B20_GPIO_Port, DS18B20_Pin)))
 8002d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d28:	4809      	ldr	r0, [pc, #36]	; (8002d50 <DS18B20_Start+0x64>)
 8002d2a:	f002 f965 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d102      	bne.n	8002d3a <DS18B20_Start+0x4e>
		presence = 1;
 8002d34:	2301      	movs	r3, #1
 8002d36:	71fb      	strb	r3, [r7, #7]
 8002d38:	e001      	b.n	8002d3e <DS18B20_Start+0x52>
	else
		presence = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	71fb      	strb	r3, [r7, #7]

	Delay_Us(380); // Min total delay 480 us
 8002d3e:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8002d42:	f7ff ffbb 	bl	8002cbc <Delay_Us>

	return presence;
 8002d46:	79fb      	ldrb	r3, [r7, #7]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40011000 	.word	0x40011000

08002d54 <DS18B20_Write>:

void DS18B20_Write(uint8_t data)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);
 8002d5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d62:	4822      	ldr	r0, [pc, #136]	; (8002dec <DS18B20_Write+0x98>)
 8002d64:	f7ff ff70 	bl	8002c48 <Set_Pin_Output>

	for (int i = 0; i < 8; i++)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	e037      	b.n	8002dde <DS18B20_Write+0x8a>
	{
		if ((data & (1 << i)) != 0)
 8002d6e:	79fa      	ldrb	r2, [r7, #7]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	fa42 f303 	asr.w	r3, r2, r3
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d016      	beq.n	8002dac <DS18B20_Write+0x58>
		{
			// Write 1
			Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);
 8002d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d82:	481a      	ldr	r0, [pc, #104]	; (8002dec <DS18B20_Write+0x98>)
 8002d84:	f7ff ff60 	bl	8002c48 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, 0);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d8e:	4817      	ldr	r0, [pc, #92]	; (8002dec <DS18B20_Write+0x98>)
 8002d90:	f002 f949 	bl	8005026 <HAL_GPIO_WritePin>
			Delay_Us(2); // Mininum 1us to pull low
 8002d94:	2002      	movs	r0, #2
 8002d96:	f7ff ff91 	bl	8002cbc <Delay_Us>
			Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 8002d9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d9e:	4813      	ldr	r0, [pc, #76]	; (8002dec <DS18B20_Write+0x98>)
 8002da0:	f7ff ff6f 	bl	8002c82 <Set_Pin_Input>
			Delay_Us(60); // DS18B20 samples state after 15-60us from falling edge
 8002da4:	203c      	movs	r0, #60	; 0x3c
 8002da6:	f7ff ff89 	bl	8002cbc <Delay_Us>
 8002daa:	e015      	b.n	8002dd8 <DS18B20_Write+0x84>
		}
		else
		{
			// Write 0
			Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);
 8002dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002db0:	480e      	ldr	r0, [pc, #56]	; (8002dec <DS18B20_Write+0x98>)
 8002db2:	f7ff ff49 	bl	8002c48 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dbc:	480b      	ldr	r0, [pc, #44]	; (8002dec <DS18B20_Write+0x98>)
 8002dbe:	f002 f932 	bl	8005026 <HAL_GPIO_WritePin>
			Delay_Us(60); // DS18B20 samples state after 15-60us from falling edge
 8002dc2:	203c      	movs	r0, #60	; 0x3c
 8002dc4:	f7ff ff7a 	bl	8002cbc <Delay_Us>
			Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 8002dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dcc:	4807      	ldr	r0, [pc, #28]	; (8002dec <DS18B20_Write+0x98>)
 8002dce:	f7ff ff58 	bl	8002c82 <Set_Pin_Input>
			Delay_Us(1);
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f7ff ff72 	bl	8002cbc <Delay_Us>
	for (int i = 0; i < 8; i++)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b07      	cmp	r3, #7
 8002de2:	ddc4      	ble.n	8002d6e <DS18B20_Write+0x1a>
		}
	}
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40011000 	.word	0x40011000

08002df0 <DS18B20_Read>:

uint8_t DS18B20_Read(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 8002dfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dfe:	481c      	ldr	r0, [pc, #112]	; (8002e70 <DS18B20_Read+0x80>)
 8002e00:	f7ff ff3f 	bl	8002c82 <Set_Pin_Input>

	for (int i = 0; i < 8; i++)
 8002e04:	2300      	movs	r3, #0
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	e02a      	b.n	8002e60 <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);
 8002e0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e0e:	4818      	ldr	r0, [pc, #96]	; (8002e70 <DS18B20_Read+0x80>)
 8002e10:	f7ff ff1a 	bl	8002c48 <Set_Pin_Output>

		HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, 0);
 8002e14:	2200      	movs	r2, #0
 8002e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e1a:	4815      	ldr	r0, [pc, #84]	; (8002e70 <DS18B20_Read+0x80>)
 8002e1c:	f002 f903 	bl	8005026 <HAL_GPIO_WritePin>
		Delay_Us(2);
 8002e20:	2002      	movs	r0, #2
 8002e22:	f7ff ff4b 	bl	8002cbc <Delay_Us>
		Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 8002e26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e2a:	4811      	ldr	r0, [pc, #68]	; (8002e70 <DS18B20_Read+0x80>)
 8002e2c:	f7ff ff29 	bl	8002c82 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin(DS18B20_GPIO_Port, DS18B20_Pin))  // If the pin is HIGH
 8002e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e34:	480e      	ldr	r0, [pc, #56]	; (8002e70 <DS18B20_Read+0x80>)
 8002e36:	f002 f8df 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d009      	beq.n	8002e54 <DS18B20_Read+0x64>
			value |= 1 << i;  // read = 1
 8002e40:	2201      	movs	r2, #1
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	b25a      	sxtb	r2, r3
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	b25b      	sxtb	r3, r3
 8002e52:	71fb      	strb	r3, [r7, #7]

		Delay_Us(60);
 8002e54:	203c      	movs	r0, #60	; 0x3c
 8002e56:	f7ff ff31 	bl	8002cbc <Delay_Us>
	for (int i = 0; i < 8; i++)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b07      	cmp	r3, #7
 8002e64:	ddd1      	ble.n	8002e0a <DS18B20_Read+0x1a>
	}

	return value;
 8002e66:	79fb      	ldrb	r3, [r7, #7]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40011000 	.word	0x40011000

08002e74 <Clamp>:
 return t;
 }
 */

float Clamp(float val, float min, float max)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
	val = val < min ? min : val;
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f7fe f8fc 	bl	8001080 <__aeabi_fcmplt>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <Clamp+0x1e>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	e000      	b.n	8002e94 <Clamp+0x20>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	60fb      	str	r3, [r7, #12]
	return val > max ? max : val;
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f7fe f90f 	bl	80010bc <__aeabi_fcmpgt>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <Clamp+0x34>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	e000      	b.n	8002eaa <Clamp+0x36>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_IncTick>:

void HAL_IncTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
	ms_ticks++;
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_IncTick+0x28>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_IncTick+0x28>)
 8002ec0:	6013      	str	r3, [r2, #0]
	uwTick += uwTickFreq;  // DO NOT MODIFY THIS LINE
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <HAL_IncTick+0x2c>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_IncTick+0x30>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4413      	add	r3, r2
 8002ece:	4a05      	ldr	r2, [pc, #20]	; (8002ee4 <HAL_IncTick+0x30>)
 8002ed0:	6013      	str	r3, [r2, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000230 	.word	0x20000230
 8002ee0:	20000010 	.word	0x20000010
 8002ee4:	200007dc 	.word	0x200007dc

08002ee8 <HAL_GPIO_EXTI_Callback>:

// Starts button debouncing routine
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
	uint8_t ind = Btn_Index(GPIO_Pin);
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 f8b5 	bl	8003064 <Btn_Index>
 8002efa:	4603      	mov	r3, r0
 8002efc:	73fb      	strb	r3, [r7, #15]
	if (ind != 0)
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d010      	beq.n	8002f26 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		btn_arr[ind].ms_change = ms_ticks;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <HAL_GPIO_EXTI_Callback+0x48>)
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	490a      	ldr	r1, [pc, #40]	; (8002f34 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002f0c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		btn_arr[ind].do_debounce_checks = true;
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	791a      	ldrb	r2, [r3, #4]
 8002f1a:	f042 0204 	orr.w	r2, r2, #4
 8002f1e:	711a      	strb	r2, [r3, #4]
		HAL_TIM_Base_Start_IT(&htim4);  // Burst check for bouncing
 8002f20:	4805      	ldr	r0, [pc, #20]	; (8002f38 <HAL_GPIO_EXTI_Callback+0x50>)
 8002f22:	f004 f975 	bl	8007210 <HAL_TIM_Base_Start_IT>
	}
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000230 	.word	0x20000230
 8002f34:	20000200 	.word	0x20000200
 8002f38:	20000654 	.word	0x20000654

08002f3c <HAL_TIM_PeriodElapsedCallback>:

// Handles buttons debouncing
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	static uint8_t keep_running;

	keep_running = false;
 8002f44:	4b2d      	ldr	r3, [pc, #180]	; (8002ffc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < sizeof(btn_mapping); i++)
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	e046      	b.n	8002fde <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		if (btn_arr[i].do_debounce_checks)
 8002f50:	4a2b      	ldr	r2, [pc, #172]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	791b      	ldrb	r3, [r3, #4]
 8002f5a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d039      	beq.n	8002fd8 <HAL_TIM_PeriodElapsedCallback+0x9c>
		{
			keep_running = true;
 8002f64:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]
			if (ms_ticks - btn_arr[i].ms_change >= DEBOUNCE_PERIOD_MS + 1)
 8002f6a:	4b26      	ldr	r3, [pc, #152]	; (8003004 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4924      	ldr	r1, [pc, #144]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b1d      	cmp	r3, #29
 8002f7a:	d92d      	bls.n	8002fd8 <HAL_TIM_PeriodElapsedCallback+0x9c>
			{
				btn_arr[i].prev_state = btn_arr[i].state;
 8002f7c:	4a20      	ldr	r2, [pc, #128]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	791b      	ldrb	r3, [r3, #4]
 8002f86:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002f8a:	b2d9      	uxtb	r1, r3
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	791a      	ldrb	r2, [r3, #4]
 8002f96:	f361 0241 	bfi	r2, r1, #1, #1
 8002f9a:	711a      	strb	r2, [r3, #4]
				btn_arr[i].state = !HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, btn_mapping[i]); // Invert because pull-up
 8002f9c:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4819      	ldr	r0, [pc, #100]	; (800300c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002fa8:	f002 f826 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2d9      	uxtb	r1, r3
 8002fb8:	4a11      	ldr	r2, [pc, #68]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	791a      	ldrb	r2, [r3, #4]
 8002fc2:	f361 0200 	bfi	r2, r1, #0, #1
 8002fc6:	711a      	strb	r2, [r3, #4]
				btn_arr[i].do_debounce_checks = false;  // To preserve prev_state
 8002fc8:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	791a      	ldrb	r2, [r3, #4]
 8002fd2:	f36f 0282 	bfc	r2, #2, #1
 8002fd6:	711a      	strb	r2, [r3, #4]
	for (int i = 1; i < sizeof(btn_mapping); i++)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b0b      	cmp	r3, #11
 8002fe2:	d9b5      	bls.n	8002f50 <HAL_TIM_PeriodElapsedCallback+0x14>
			}
		}
	}

// Stop timer/debouncing button because no new input is received
	if (!keep_running)
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d102      	bne.n	8002ff2 <HAL_TIM_PeriodElapsedCallback+0xb6>
		HAL_TIM_Base_Stop_IT(&htim4);
 8002fec:	4808      	ldr	r0, [pc, #32]	; (8003010 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002fee:	f004 f961 	bl	80072b4 <HAL_TIM_Base_Stop_IT>
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000023c 	.word	0x2000023c
 8003000:	20000200 	.word	0x20000200
 8003004:	20000230 	.word	0x20000230
 8003008:	0800ac6c 	.word	0x0800ac6c
 800300c:	40010800 	.word	0x40010800
 8003010:	20000654 	.word	0x20000654

08003014 <Btn_Init>:

// Get initial button states
void Btn_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
	for (int i = 1; i < BTN_COUNT + 1; i++)
 800301a:	2301      	movs	r3, #1
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	e010      	b.n	8003042 <Btn_Init+0x2e>
	{
		btn_arr[i].ms_change = ms_ticks;
 8003020:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <Btn_Init+0x44>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	490d      	ldr	r1, [pc, #52]	; (800305c <Btn_Init+0x48>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		btn_arr[i].do_debounce_checks = true;
 800302c:	4a0b      	ldr	r2, [pc, #44]	; (800305c <Btn_Init+0x48>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	791a      	ldrb	r2, [r3, #4]
 8003036:	f042 0204 	orr.w	r2, r2, #4
 800303a:	711a      	strb	r2, [r3, #4]
	for (int i = 1; i < BTN_COUNT + 1; i++)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3301      	adds	r3, #1
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b05      	cmp	r3, #5
 8003046:	ddeb      	ble.n	8003020 <Btn_Init+0xc>
	}
	HAL_TIM_Base_Start_IT(&htim4);  // Burst check for bouncing
 8003048:	4805      	ldr	r0, [pc, #20]	; (8003060 <Btn_Init+0x4c>)
 800304a:	f004 f8e1 	bl	8007210 <HAL_TIM_Base_Start_IT>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000230 	.word	0x20000230
 800305c:	20000200 	.word	0x20000200
 8003060:	20000654 	.word	0x20000654

08003064 <Btn_Index>:

uint8_t Btn_Index(const uint16_t btn_pin)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	80fb      	strh	r3, [r7, #6]
	for (int i = 1; i < sizeof(btn_mapping); i++)
 800306e:	2301      	movs	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	e00c      	b.n	800308e <Btn_Index+0x2a>
		if (btn_mapping[i] == btn_pin)
 8003074:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <Btn_Index+0x3c>)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	429a      	cmp	r2, r3
 8003080:	d102      	bne.n	8003088 <Btn_Index+0x24>
			return i;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	e006      	b.n	8003096 <Btn_Index+0x32>
	for (int i = 1; i < sizeof(btn_mapping); i++)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3301      	adds	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b0b      	cmp	r3, #11
 8003092:	d9ef      	bls.n	8003074 <Btn_Index+0x10>

	return 0;  // NO_PIN
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	0800ac6c 	.word	0x0800ac6c

080030a4 <Btn_Read>:

uint8_t Btn_Read(const uint16_t btn_pin)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	80fb      	strh	r3, [r7, #6]
	const uint8_t ind = Btn_Index(btn_pin);
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ffd7 	bl	8003064 <Btn_Index>
 80030b6:	4603      	mov	r3, r0
 80030b8:	73fb      	strb	r3, [r7, #15]
	btn_arr[ind].prev_state = btn_arr[ind].state;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	490d      	ldr	r1, [pc, #52]	; (80030f4 <Btn_Read+0x50>)
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	440b      	add	r3, r1
 80030c4:	791b      	ldrb	r3, [r3, #4]
 80030c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80030ca:	b2d9      	uxtb	r1, r3
 80030cc:	4809      	ldr	r0, [pc, #36]	; (80030f4 <Btn_Read+0x50>)
 80030ce:	00d3      	lsls	r3, r2, #3
 80030d0:	4403      	add	r3, r0
 80030d2:	791a      	ldrb	r2, [r3, #4]
 80030d4:	f361 0241 	bfi	r2, r1, #1, #1
 80030d8:	711a      	strb	r2, [r3, #4]
	return btn_arr[ind].state;
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <Btn_Read+0x50>)
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	791b      	ldrb	r3, [r3, #4]
 80030e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80030e8:	b2db      	uxtb	r3, r3
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000200 	.word	0x20000200

080030f8 <Btn_Hold>:

uint8_t Btn_Hold(const uint16_t btn_pin, const uint16_t hold_time_ms)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	460a      	mov	r2, r1
 8003102:	80fb      	strh	r3, [r7, #6]
 8003104:	4613      	mov	r3, r2
 8003106:	80bb      	strh	r3, [r7, #4]
	const uint8_t ind = Btn_Index(btn_pin);
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ffaa 	bl	8003064 <Btn_Index>
 8003110:	4603      	mov	r3, r0
 8003112:	73fb      	strb	r3, [r7, #15]
	const uint8_t hold = ms_ticks - btn_arr[ind].ms_change >= hold_time_ms;
 8003114:	4b11      	ldr	r3, [pc, #68]	; (800315c <Btn_Hold+0x64>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	4911      	ldr	r1, [pc, #68]	; (8003160 <Btn_Hold+0x68>)
 800311c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8003120:	1ad2      	subs	r2, r2, r3
 8003122:	88bb      	ldrh	r3, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	bf2c      	ite	cs
 8003128:	2301      	movcs	r3, #1
 800312a:	2300      	movcc	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	73bb      	strb	r3, [r7, #14]
	return hold && btn_arr[ind].state;
 8003130:	7bbb      	ldrb	r3, [r7, #14]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <Btn_Hold+0x56>
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	4a09      	ldr	r2, [pc, #36]	; (8003160 <Btn_Hold+0x68>)
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	791b      	ldrb	r3, [r3, #4]
 8003140:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <Btn_Hold+0x56>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <Btn_Hold+0x58>
 800314e:	2300      	movs	r3, #0
 8003150:	b2db      	uxtb	r3, r3

}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000230 	.word	0x20000230
 8003160:	20000200 	.word	0x20000200

08003164 <Btn_Falling>:

uint8_t Btn_Falling(const uint16_t btn_pin)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	80fb      	strh	r3, [r7, #6]
// WARNING: this makes that falling egde can't be detected more than once but that's a problem if
// one wants to use multiple falling edge detections for a single button press

	const uint8_t ind = Btn_Index(btn_pin);
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff77 	bl	8003064 <Btn_Index>
 8003176:	4603      	mov	r3, r0
 8003178:	73fb      	strb	r3, [r7, #15]
	const uint8_t is_falling = (btn_arr[ind].prev_state == 0 && btn_arr[ind].state == 1);
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <Btn_Falling+0x70>)
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	791b      	ldrb	r3, [r3, #4]
 8003184:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10b      	bne.n	80031a6 <Btn_Falling+0x42>
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <Btn_Falling+0x70>)
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	791b      	ldrb	r3, [r3, #4]
 8003198:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <Btn_Falling+0x42>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <Btn_Falling+0x44>
 80031a6:	2300      	movs	r3, #0
 80031a8:	73bb      	strb	r3, [r7, #14]
	btn_arr[ind].prev_state = btn_arr[ind].state;
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	4909      	ldr	r1, [pc, #36]	; (80031d4 <Btn_Falling+0x70>)
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	791b      	ldrb	r3, [r3, #4]
 80031b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80031ba:	b2d9      	uxtb	r1, r3
 80031bc:	4805      	ldr	r0, [pc, #20]	; (80031d4 <Btn_Falling+0x70>)
 80031be:	00d3      	lsls	r3, r2, #3
 80031c0:	4403      	add	r3, r0
 80031c2:	791a      	ldrb	r2, [r3, #4]
 80031c4:	f361 0241 	bfi	r2, r1, #1, #1
 80031c8:	711a      	strb	r2, [r3, #4]

	return is_falling;
 80031ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000200 	.word	0x20000200

080031d8 <Button_Actions>:
	btn_arr[ind].prev_state = btn_arr[ind].state;
	return is_rising;
}

void Button_Actions(void)
{
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
	Temps16 temps;

	if (Btn_Falling(BTN_UP_Pin))
 80031de:	2002      	movs	r0, #2
 80031e0:	f7ff ffc0 	bl	8003164 <Btn_Falling>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00f      	beq.n	800320a <Button_Actions+0x32>
	{
		temps = Temp_Max_All_Time();
 80031ea:	f107 0308 	add.w	r3, r7, #8
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f8d4 	bl	800339c <Temp_Max_All_Time>
		Print_Simple(3, " Max of All Time");
 80031f4:	495d      	ldr	r1, [pc, #372]	; (800336c <Button_Actions+0x194>)
 80031f6:	2003      	movs	r0, #3
 80031f8:	f7ff fc54 	bl	8002aa4 <Print_Simple>
		Print_Temps(4, temps);
 80031fc:	f107 0308 	add.w	r3, r7, #8
 8003200:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003204:	2004      	movs	r0, #4
 8003206:	f7ff fcb1 	bl	8002b6c <Print_Temps>
	}

	if (Btn_Falling(BTN_LEFT_Pin))
 800320a:	2004      	movs	r0, #4
 800320c:	f7ff ffaa 	bl	8003164 <Btn_Falling>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d065      	beq.n	80032e2 <Button_Actions+0x10a>
	{
		temps = Temp_Max_Last_Day();
 8003216:	463b      	mov	r3, r7
 8003218:	4618      	mov	r0, r3
 800321a:	f000 f905 	bl	8003428 <Temp_Max_Last_Day>
 800321e:	f107 0308 	add.w	r3, r7, #8
 8003222:	463a      	mov	r2, r7
 8003224:	6810      	ldr	r0, [r2, #0]
 8003226:	6018      	str	r0, [r3, #0]
 8003228:	8892      	ldrh	r2, [r2, #4]
 800322a:	809a      	strh	r2, [r3, #4]
		Print_Simple(3, " Max of The Day");
 800322c:	4950      	ldr	r1, [pc, #320]	; (8003370 <Button_Actions+0x198>)
 800322e:	2003      	movs	r0, #3
 8003230:	f7ff fc38 	bl	8002aa4 <Print_Simple>
		Print_Temps(4, temps);
 8003234:	f107 0308 	add.w	r3, r7, #8
 8003238:	e893 0006 	ldmia.w	r3, {r1, r2}
 800323c:	2004      	movs	r0, #4
 800323e:	f7ff fc95 	bl	8002b6c <Print_Temps>
	}

	while (Btn_Read(BTN_CENTER_Pin))
 8003242:	e04e      	b.n	80032e2 <Button_Actions+0x10a>
	{
		const uint16_t erase_hold_time = 3000;
 8003244:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003248:	82fb      	strh	r3, [r7, #22]
		int erase_in = erase_hold_time - ms_ticks + btn_arr[Btn_Index(BTN_CENTER_Pin)].ms_change;
 800324a:	8afa      	ldrh	r2, [r7, #22]
 800324c:	4b49      	ldr	r3, [pc, #292]	; (8003374 <Button_Actions+0x19c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	1ad4      	subs	r4, r2, r3
 8003252:	2008      	movs	r0, #8
 8003254:	f7ff ff06 	bl	8003064 <Btn_Index>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	4b46      	ldr	r3, [pc, #280]	; (8003378 <Button_Actions+0x1a0>)
 800325e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003262:	4423      	add	r3, r4
 8003264:	613b      	str	r3, [r7, #16]

		Print_Simple(1, "     WARNING         \n");
 8003266:	4945      	ldr	r1, [pc, #276]	; (800337c <Button_Actions+0x1a4>)
 8003268:	2001      	movs	r0, #1
 800326a:	f7ff fc1b 	bl	8002aa4 <Print_Simple>
		Print_Simple(2, "   KEEP HOLDING      \n");
 800326e:	4944      	ldr	r1, [pc, #272]	; (8003380 <Button_Actions+0x1a8>)
 8003270:	2002      	movs	r0, #2
 8003272:	f7ff fc17 	bl	8002aa4 <Print_Simple>
		Print_Simple(3, " TO ERASE EEPROM     \n");
 8003276:	4943      	ldr	r1, [pc, #268]	; (8003384 <Button_Actions+0x1ac>)
 8003278:	2003      	movs	r0, #3
 800327a:	f7ff fc13 	bl	8002aa4 <Print_Simple>
		Print_Simple(4, " ERASING IN: %04d    \n", MAX(0, erase_in));
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003284:	461a      	mov	r2, r3
 8003286:	4940      	ldr	r1, [pc, #256]	; (8003388 <Button_Actions+0x1b0>)
 8003288:	2004      	movs	r0, #4
 800328a:	f7ff fc0b 	bl	8002aa4 <Print_Simple>
		SSD1306_UpdateScreen();
 800328e:	f000 fa7f 	bl	8003790 <SSD1306_UpdateScreen>

		if (Btn_Hold(BTN_CENTER_Pin, erase_hold_time))
 8003292:	8afb      	ldrh	r3, [r7, #22]
 8003294:	4619      	mov	r1, r3
 8003296:	2008      	movs	r0, #8
 8003298:	f7ff ff2e 	bl	80030f8 <Btn_Hold>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d019      	beq.n	80032d6 <Button_Actions+0xfe>
		{
			Print_Simple(1, "                     \n");
 80032a2:	493a      	ldr	r1, [pc, #232]	; (800338c <Button_Actions+0x1b4>)
 80032a4:	2001      	movs	r0, #1
 80032a6:	f7ff fbfd 	bl	8002aa4 <Print_Simple>
			Print_Simple(2, "   EEPROM ERASED     \n");
 80032aa:	4939      	ldr	r1, [pc, #228]	; (8003390 <Button_Actions+0x1b8>)
 80032ac:	2002      	movs	r0, #2
 80032ae:	f7ff fbf9 	bl	8002aa4 <Print_Simple>
			Print_Simple(3, "                     \n");
 80032b2:	4936      	ldr	r1, [pc, #216]	; (800338c <Button_Actions+0x1b4>)
 80032b4:	2003      	movs	r0, #3
 80032b6:	f7ff fbf5 	bl	8002aa4 <Print_Simple>
			Print_Simple(4, "                     \n");
 80032ba:	4934      	ldr	r1, [pc, #208]	; (800338c <Button_Actions+0x1b4>)
 80032bc:	2004      	movs	r0, #4
 80032be:	f7ff fbf1 	bl	8002aa4 <Print_Simple>
			SSD1306_UpdateScreen();
 80032c2:	f000 fa65 	bl	8003790 <SSD1306_UpdateScreen>

			EEPROM_Erase();
 80032c6:	f7ff fa35 	bl	8002734 <EEPROM_Erase>
			Reset_Cycles();
 80032ca:	f7ff f8e5 	bl	8002498 <Reset_Cycles>

			SSD1306_Fill(0);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f000 fa8c 	bl	80037ec <SSD1306_Fill>
			break;
 80032d4:	e00b      	b.n	80032ee <Button_Actions+0x116>
		}

		HAL_Delay(100);
 80032d6:	2064      	movs	r0, #100	; 0x64
 80032d8:	f000 ff7e 	bl	80041d8 <HAL_Delay>
		SSD1306_Fill(0);
 80032dc:	2000      	movs	r0, #0
 80032de:	f000 fa85 	bl	80037ec <SSD1306_Fill>
	while (Btn_Read(BTN_CENTER_Pin))
 80032e2:	2008      	movs	r0, #8
 80032e4:	f7ff fede 	bl	80030a4 <Btn_Read>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1aa      	bne.n	8003244 <Button_Actions+0x6c>
	}

	if (Btn_Falling(BTN_RIGHT_Pin))
 80032ee:	2010      	movs	r0, #16
 80032f0:	f7ff ff38 	bl	8003164 <Btn_Falling>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d015      	beq.n	8003326 <Button_Actions+0x14e>
	{
		temps = Temp_Min_Last_Day();
 80032fa:	463b      	mov	r3, r7
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f92b 	bl	8003558 <Temp_Min_Last_Day>
 8003302:	f107 0308 	add.w	r3, r7, #8
 8003306:	463a      	mov	r2, r7
 8003308:	6810      	ldr	r0, [r2, #0]
 800330a:	6018      	str	r0, [r3, #0]
 800330c:	8892      	ldrh	r2, [r2, #4]
 800330e:	809a      	strh	r2, [r3, #4]
		Print_Simple(3, " Min of Last Day");
 8003310:	4920      	ldr	r1, [pc, #128]	; (8003394 <Button_Actions+0x1bc>)
 8003312:	2003      	movs	r0, #3
 8003314:	f7ff fbc6 	bl	8002aa4 <Print_Simple>
		Print_Temps(4, temps);
 8003318:	f107 0308 	add.w	r3, r7, #8
 800331c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003320:	2004      	movs	r0, #4
 8003322:	f7ff fc23 	bl	8002b6c <Print_Temps>
	}

	if (Btn_Falling(BTN_DOWN_Pin))
 8003326:	2020      	movs	r0, #32
 8003328:	f7ff ff1c 	bl	8003164 <Btn_Falling>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d015      	beq.n	800335e <Button_Actions+0x186>
	{
		temps = Temp_Min_All_Time();
 8003332:	463b      	mov	r3, r7
 8003334:	4618      	mov	r0, r3
 8003336:	f000 f8c5 	bl	80034c4 <Temp_Min_All_Time>
 800333a:	f107 0308 	add.w	r3, r7, #8
 800333e:	463a      	mov	r2, r7
 8003340:	6810      	ldr	r0, [r2, #0]
 8003342:	6018      	str	r0, [r3, #0]
 8003344:	8892      	ldrh	r2, [r2, #4]
 8003346:	809a      	strh	r2, [r3, #4]
		Print_Simple(3, " Min of All Time");
 8003348:	4913      	ldr	r1, [pc, #76]	; (8003398 <Button_Actions+0x1c0>)
 800334a:	2003      	movs	r0, #3
 800334c:	f7ff fbaa 	bl	8002aa4 <Print_Simple>
		Print_Temps(4, temps);
 8003350:	f107 0308 	add.w	r3, r7, #8
 8003354:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003358:	2004      	movs	r0, #4
 800335a:	f7ff fc07 	bl	8002b6c <Print_Temps>
	}

	SSD1306_UpdateScreen();
 800335e:	f000 fa17 	bl	8003790 <SSD1306_UpdateScreen>
}
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	bd90      	pop	{r4, r7, pc}
 800336a:	bf00      	nop
 800336c:	0800a3f4 	.word	0x0800a3f4
 8003370:	0800a408 	.word	0x0800a408
 8003374:	20000230 	.word	0x20000230
 8003378:	20000200 	.word	0x20000200
 800337c:	0800a418 	.word	0x0800a418
 8003380:	0800a430 	.word	0x0800a430
 8003384:	0800a448 	.word	0x0800a448
 8003388:	0800a460 	.word	0x0800a460
 800338c:	0800a478 	.word	0x0800a478
 8003390:	0800a490 	.word	0x0800a490
 8003394:	0800a4a8 	.word	0x0800a4a8
 8003398:	0800a4bc 	.word	0x0800a4bc

0800339c <Temp_Max_All_Time>:

Temps16 Temp_Max_All_Time(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	Temps16 t_max = { 0, 0, 0 };
 80033a4:	2300      	movs	r3, #0
 80033a6:	82bb      	strh	r3, [r7, #20]
 80033a8:	2300      	movs	r3, #0
 80033aa:	82fb      	strh	r3, [r7, #22]
 80033ac:	2300      	movs	r3, #0
 80033ae:	833b      	strh	r3, [r7, #24]
	for (int i = 0; i < EEPROM_SIZE_BYTES / sizeof(Temps16); i++)
 80033b0:	2300      	movs	r3, #0
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	e024      	b.n	8003400 <Temp_Max_All_Time+0x64>
	{
		Temps16 t = Temp_Read(i);
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	f107 030c 	add.w	r3, r7, #12
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fa42 	bl	800284a <Temp_Read>
		if (t.temp_adc == EEPROM_ERASED_TEMP)
 80033c6:	8a3b      	ldrh	r3, [r7, #16]
 80033c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d01d      	beq.n	800340c <Temp_Max_All_Time+0x70>
			break;

		t_max.temp_1w = MAX(t.temp_1w, t_max.temp_1w);
 80033d0:	8aba      	ldrh	r2, [r7, #20]
 80033d2:	89bb      	ldrh	r3, [r7, #12]
 80033d4:	4293      	cmp	r3, r2
 80033d6:	bf38      	it	cc
 80033d8:	4613      	movcc	r3, r2
 80033da:	b29b      	uxth	r3, r3
 80033dc:	82bb      	strh	r3, [r7, #20]
		t_max.temp_i2c = MAX(t.temp_i2c, t_max.temp_i2c);
 80033de:	8afa      	ldrh	r2, [r7, #22]
 80033e0:	89fb      	ldrh	r3, [r7, #14]
 80033e2:	4293      	cmp	r3, r2
 80033e4:	bf38      	it	cc
 80033e6:	4613      	movcc	r3, r2
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	82fb      	strh	r3, [r7, #22]
		t_max.temp_adc = MAX(t.temp_adc, t_max.temp_adc);
 80033ec:	8b3a      	ldrh	r2, [r7, #24]
 80033ee:	8a3b      	ldrh	r3, [r7, #16]
 80033f0:	4293      	cmp	r3, r2
 80033f2:	bf38      	it	cc
 80033f4:	4613      	movcc	r3, r2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	833b      	strh	r3, [r7, #24]
	for (int i = 0; i < EEPROM_SIZE_BYTES / sizeof(Temps16); i++)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3301      	adds	r3, #1
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f241 5254 	movw	r2, #5460	; 0x1554
 8003406:	4293      	cmp	r3, r2
 8003408:	d9d5      	bls.n	80033b6 <Temp_Max_All_Time+0x1a>
 800340a:	e000      	b.n	800340e <Temp_Max_All_Time+0x72>
			break;
 800340c:	bf00      	nop
	}

	return t_max;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	461a      	mov	r2, r3
 8003412:	f107 0314 	add.w	r3, r7, #20
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	6010      	str	r0, [r2, #0]
 800341a:	889b      	ldrh	r3, [r3, #4]
 800341c:	8093      	strh	r3, [r2, #4]
}
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <Temp_Max_Last_Day>:

Temps16 Temp_Max_Last_Day(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	Temps16 t_max = { 0, 0, 0 };
 8003430:	2300      	movs	r3, #0
 8003432:	823b      	strh	r3, [r7, #16]
 8003434:	2300      	movs	r3, #0
 8003436:	827b      	strh	r3, [r7, #18]
 8003438:	2300      	movs	r3, #0
 800343a:	82bb      	strh	r3, [r7, #20]
	int mem_start = MAX(0, cycle_count - CYCLES_PER_DAY);
 800343c:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <Temp_Max_Last_Day+0x98>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003444:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003448:	61bb      	str	r3, [r7, #24]

	for (int i = mem_start; i < EEPROM_SIZE_BYTES / sizeof(Temps16); i++)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	e024      	b.n	800349a <Temp_Max_Last_Day+0x72>
	{
		Temps16 t = Temp_Read(i);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	b29a      	uxth	r2, r3
 8003454:	f107 0308 	add.w	r3, r7, #8
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff f9f5 	bl	800284a <Temp_Read>
		if (t.temp_adc == EEPROM_ERASED_TEMP)
 8003460:	89bb      	ldrh	r3, [r7, #12]
 8003462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003466:	4293      	cmp	r3, r2
 8003468:	d01d      	beq.n	80034a6 <Temp_Max_Last_Day+0x7e>
			break;

		t_max.temp_1w = MAX(t.temp_1w, t_max.temp_1w);
 800346a:	8a3a      	ldrh	r2, [r7, #16]
 800346c:	893b      	ldrh	r3, [r7, #8]
 800346e:	4293      	cmp	r3, r2
 8003470:	bf38      	it	cc
 8003472:	4613      	movcc	r3, r2
 8003474:	b29b      	uxth	r3, r3
 8003476:	823b      	strh	r3, [r7, #16]
		t_max.temp_i2c = MAX(t.temp_i2c, t_max.temp_i2c);
 8003478:	8a7a      	ldrh	r2, [r7, #18]
 800347a:	897b      	ldrh	r3, [r7, #10]
 800347c:	4293      	cmp	r3, r2
 800347e:	bf38      	it	cc
 8003480:	4613      	movcc	r3, r2
 8003482:	b29b      	uxth	r3, r3
 8003484:	827b      	strh	r3, [r7, #18]
		t_max.temp_adc = MAX(t.temp_adc, t_max.temp_adc);
 8003486:	8aba      	ldrh	r2, [r7, #20]
 8003488:	89bb      	ldrh	r3, [r7, #12]
 800348a:	4293      	cmp	r3, r2
 800348c:	bf38      	it	cc
 800348e:	4613      	movcc	r3, r2
 8003490:	b29b      	uxth	r3, r3
 8003492:	82bb      	strh	r3, [r7, #20]
	for (int i = mem_start; i < EEPROM_SIZE_BYTES / sizeof(Temps16); i++)
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	3301      	adds	r3, #1
 8003498:	61fb      	str	r3, [r7, #28]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f241 5254 	movw	r2, #5460	; 0x1554
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d9d5      	bls.n	8003450 <Temp_Max_Last_Day+0x28>
 80034a4:	e000      	b.n	80034a8 <Temp_Max_Last_Day+0x80>
			break;
 80034a6:	bf00      	nop
	}

	return t_max;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f107 0310 	add.w	r3, r7, #16
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	6010      	str	r0, [r2, #0]
 80034b4:	889b      	ldrh	r3, [r3, #4]
 80034b6:	8093      	strh	r3, [r2, #4]
}
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	3720      	adds	r7, #32
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000234 	.word	0x20000234

080034c4 <Temp_Min_All_Time>:

Temps16 Temp_Min_All_Time(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	Temps16 t_min = { UINT16_MAX, UINT16_MAX, UINT16_MAX };
 80034cc:	4a21      	ldr	r2, [pc, #132]	; (8003554 <Temp_Min_All_Time+0x90>)
 80034ce:	f107 0314 	add.w	r3, r7, #20
 80034d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034d6:	6018      	str	r0, [r3, #0]
 80034d8:	3304      	adds	r3, #4
 80034da:	8019      	strh	r1, [r3, #0]

	for (int i = 0; i < EEPROM_SIZE_BYTES / sizeof(Temps16); i++)
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
 80034e0:	e024      	b.n	800352c <Temp_Min_All_Time+0x68>
	{
		Temps16 t = Temp_Read(i);
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	f107 030c 	add.w	r3, r7, #12
 80034ea:	4611      	mov	r1, r2
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff f9ac 	bl	800284a <Temp_Read>
		if (t.temp_adc == EEPROM_ERASED_TEMP)
 80034f2:	8a3b      	ldrh	r3, [r7, #16]
 80034f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d01d      	beq.n	8003538 <Temp_Min_All_Time+0x74>
			break;

		t_min.temp_1w = MIN(t.temp_1w, t_min.temp_1w);
 80034fc:	8aba      	ldrh	r2, [r7, #20]
 80034fe:	89bb      	ldrh	r3, [r7, #12]
 8003500:	4293      	cmp	r3, r2
 8003502:	bf28      	it	cs
 8003504:	4613      	movcs	r3, r2
 8003506:	b29b      	uxth	r3, r3
 8003508:	82bb      	strh	r3, [r7, #20]
		t_min.temp_i2c = MIN(t.temp_i2c, t_min.temp_i2c);
 800350a:	8afa      	ldrh	r2, [r7, #22]
 800350c:	89fb      	ldrh	r3, [r7, #14]
 800350e:	4293      	cmp	r3, r2
 8003510:	bf28      	it	cs
 8003512:	4613      	movcs	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	82fb      	strh	r3, [r7, #22]
		t_min.temp_adc = MIN(t.temp_adc, t_min.temp_adc);
 8003518:	8b3a      	ldrh	r2, [r7, #24]
 800351a:	8a3b      	ldrh	r3, [r7, #16]
 800351c:	4293      	cmp	r3, r2
 800351e:	bf28      	it	cs
 8003520:	4613      	movcs	r3, r2
 8003522:	b29b      	uxth	r3, r3
 8003524:	833b      	strh	r3, [r7, #24]
	for (int i = 0; i < EEPROM_SIZE_BYTES / sizeof(Temps16); i++)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3301      	adds	r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f241 5254 	movw	r2, #5460	; 0x1554
 8003532:	4293      	cmp	r3, r2
 8003534:	d9d5      	bls.n	80034e2 <Temp_Min_All_Time+0x1e>
 8003536:	e000      	b.n	800353a <Temp_Min_All_Time+0x76>
			break;
 8003538:	bf00      	nop
	}

	return t_min;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	461a      	mov	r2, r3
 800353e:	f107 0314 	add.w	r3, r7, #20
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	6010      	str	r0, [r2, #0]
 8003546:	889b      	ldrh	r3, [r3, #4]
 8003548:	8093      	strh	r3, [r2, #4]
}
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	0800a4d0 	.word	0x0800a4d0

08003558 <Temp_Min_Last_Day>:

Temps16 Temp_Min_Last_Day(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	Temps16 t_min = { UINT16_MAX, UINT16_MAX, UINT16_MAX };
 8003560:	4a24      	ldr	r2, [pc, #144]	; (80035f4 <Temp_Min_Last_Day+0x9c>)
 8003562:	f107 0310 	add.w	r3, r7, #16
 8003566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800356a:	6018      	str	r0, [r3, #0]
 800356c:	3304      	adds	r3, #4
 800356e:	8019      	strh	r1, [r3, #0]
	int mem_start = MAX(0, cycle_count - CYCLES_PER_DAY);
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <Temp_Min_Last_Day+0xa0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003578:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800357c:	61bb      	str	r3, [r7, #24]

	for (int i = mem_start; i < EEPROM_SIZE_BYTES / sizeof(Temps16); i++)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	e024      	b.n	80035ce <Temp_Min_Last_Day+0x76>
	{
		Temps16 t = Temp_Read(i);
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	b29a      	uxth	r2, r3
 8003588:	f107 0308 	add.w	r3, r7, #8
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff f95b 	bl	800284a <Temp_Read>
		if (t.temp_adc == EEPROM_ERASED_TEMP)
 8003594:	89bb      	ldrh	r3, [r7, #12]
 8003596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800359a:	4293      	cmp	r3, r2
 800359c:	d01d      	beq.n	80035da <Temp_Min_Last_Day+0x82>
			break;

		t_min.temp_1w = MIN(t.temp_1w, t_min.temp_1w);
 800359e:	8a3a      	ldrh	r2, [r7, #16]
 80035a0:	893b      	ldrh	r3, [r7, #8]
 80035a2:	4293      	cmp	r3, r2
 80035a4:	bf28      	it	cs
 80035a6:	4613      	movcs	r3, r2
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	823b      	strh	r3, [r7, #16]
		t_min.temp_i2c = MIN(t.temp_i2c, t_min.temp_i2c);
 80035ac:	8a7a      	ldrh	r2, [r7, #18]
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	4293      	cmp	r3, r2
 80035b2:	bf28      	it	cs
 80035b4:	4613      	movcs	r3, r2
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	827b      	strh	r3, [r7, #18]
		t_min.temp_adc = MIN(t.temp_adc, t_min.temp_adc);
 80035ba:	8aba      	ldrh	r2, [r7, #20]
 80035bc:	89bb      	ldrh	r3, [r7, #12]
 80035be:	4293      	cmp	r3, r2
 80035c0:	bf28      	it	cs
 80035c2:	4613      	movcs	r3, r2
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	82bb      	strh	r3, [r7, #20]
	for (int i = mem_start; i < EEPROM_SIZE_BYTES / sizeof(Temps16); i++)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	3301      	adds	r3, #1
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f241 5254 	movw	r2, #5460	; 0x1554
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d9d5      	bls.n	8003584 <Temp_Min_Last_Day+0x2c>
 80035d8:	e000      	b.n	80035dc <Temp_Min_Last_Day+0x84>
			break;
 80035da:	bf00      	nop
	}

	return t_min;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	461a      	mov	r2, r3
 80035e0:	f107 0310 	add.w	r3, r7, #16
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	6010      	str	r0, [r2, #0]
 80035e8:	889b      	ldrh	r3, [r3, #4]
 80035ea:	8093      	strh	r3, [r2, #4]
}
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	3720      	adds	r7, #32
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	0800a4d0 	.word	0x0800a4d0
 80035f8:	20000234 	.word	0x20000234

080035fc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800360e:	f000 fb19 	bl	8003c44 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003612:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003616:	2201      	movs	r2, #1
 8003618:	2178      	movs	r1, #120	; 0x78
 800361a:	485b      	ldr	r0, [pc, #364]	; (8003788 <SSD1306_Init+0x180>)
 800361c:	f002 fac6 	bl	8005bac <HAL_I2C_IsDeviceReady>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003626:	2300      	movs	r3, #0
 8003628:	e0a9      	b.n	800377e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800362a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800362e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003630:	e002      	b.n	8003638 <SSD1306_Init+0x30>
		p--;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3b01      	subs	r3, #1
 8003636:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f9      	bne.n	8003632 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800363e:	22ae      	movs	r2, #174	; 0xae
 8003640:	2100      	movs	r1, #0
 8003642:	2078      	movs	r0, #120	; 0x78
 8003644:	f000 fb5a 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003648:	2220      	movs	r2, #32
 800364a:	2100      	movs	r1, #0
 800364c:	2078      	movs	r0, #120	; 0x78
 800364e:	f000 fb55 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003652:	2210      	movs	r2, #16
 8003654:	2100      	movs	r1, #0
 8003656:	2078      	movs	r0, #120	; 0x78
 8003658:	f000 fb50 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800365c:	22b0      	movs	r2, #176	; 0xb0
 800365e:	2100      	movs	r1, #0
 8003660:	2078      	movs	r0, #120	; 0x78
 8003662:	f000 fb4b 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003666:	22c8      	movs	r2, #200	; 0xc8
 8003668:	2100      	movs	r1, #0
 800366a:	2078      	movs	r0, #120	; 0x78
 800366c:	f000 fb46 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003670:	2200      	movs	r2, #0
 8003672:	2100      	movs	r1, #0
 8003674:	2078      	movs	r0, #120	; 0x78
 8003676:	f000 fb41 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800367a:	2210      	movs	r2, #16
 800367c:	2100      	movs	r1, #0
 800367e:	2078      	movs	r0, #120	; 0x78
 8003680:	f000 fb3c 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003684:	2240      	movs	r2, #64	; 0x40
 8003686:	2100      	movs	r1, #0
 8003688:	2078      	movs	r0, #120	; 0x78
 800368a:	f000 fb37 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800368e:	2281      	movs	r2, #129	; 0x81
 8003690:	2100      	movs	r1, #0
 8003692:	2078      	movs	r0, #120	; 0x78
 8003694:	f000 fb32 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003698:	22ff      	movs	r2, #255	; 0xff
 800369a:	2100      	movs	r1, #0
 800369c:	2078      	movs	r0, #120	; 0x78
 800369e:	f000 fb2d 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80036a2:	22a1      	movs	r2, #161	; 0xa1
 80036a4:	2100      	movs	r1, #0
 80036a6:	2078      	movs	r0, #120	; 0x78
 80036a8:	f000 fb28 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80036ac:	22a6      	movs	r2, #166	; 0xa6
 80036ae:	2100      	movs	r1, #0
 80036b0:	2078      	movs	r0, #120	; 0x78
 80036b2:	f000 fb23 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80036b6:	22a8      	movs	r2, #168	; 0xa8
 80036b8:	2100      	movs	r1, #0
 80036ba:	2078      	movs	r0, #120	; 0x78
 80036bc:	f000 fb1e 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80036c0:	223f      	movs	r2, #63	; 0x3f
 80036c2:	2100      	movs	r1, #0
 80036c4:	2078      	movs	r0, #120	; 0x78
 80036c6:	f000 fb19 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80036ca:	22a4      	movs	r2, #164	; 0xa4
 80036cc:	2100      	movs	r1, #0
 80036ce:	2078      	movs	r0, #120	; 0x78
 80036d0:	f000 fb14 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80036d4:	22d3      	movs	r2, #211	; 0xd3
 80036d6:	2100      	movs	r1, #0
 80036d8:	2078      	movs	r0, #120	; 0x78
 80036da:	f000 fb0f 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80036de:	2200      	movs	r2, #0
 80036e0:	2100      	movs	r1, #0
 80036e2:	2078      	movs	r0, #120	; 0x78
 80036e4:	f000 fb0a 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80036e8:	22d5      	movs	r2, #213	; 0xd5
 80036ea:	2100      	movs	r1, #0
 80036ec:	2078      	movs	r0, #120	; 0x78
 80036ee:	f000 fb05 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80036f2:	22f0      	movs	r2, #240	; 0xf0
 80036f4:	2100      	movs	r1, #0
 80036f6:	2078      	movs	r0, #120	; 0x78
 80036f8:	f000 fb00 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80036fc:	22d9      	movs	r2, #217	; 0xd9
 80036fe:	2100      	movs	r1, #0
 8003700:	2078      	movs	r0, #120	; 0x78
 8003702:	f000 fafb 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003706:	2222      	movs	r2, #34	; 0x22
 8003708:	2100      	movs	r1, #0
 800370a:	2078      	movs	r0, #120	; 0x78
 800370c:	f000 faf6 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003710:	22da      	movs	r2, #218	; 0xda
 8003712:	2100      	movs	r1, #0
 8003714:	2078      	movs	r0, #120	; 0x78
 8003716:	f000 faf1 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800371a:	2212      	movs	r2, #18
 800371c:	2100      	movs	r1, #0
 800371e:	2078      	movs	r0, #120	; 0x78
 8003720:	f000 faec 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003724:	22db      	movs	r2, #219	; 0xdb
 8003726:	2100      	movs	r1, #0
 8003728:	2078      	movs	r0, #120	; 0x78
 800372a:	f000 fae7 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800372e:	2220      	movs	r2, #32
 8003730:	2100      	movs	r1, #0
 8003732:	2078      	movs	r0, #120	; 0x78
 8003734:	f000 fae2 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003738:	228d      	movs	r2, #141	; 0x8d
 800373a:	2100      	movs	r1, #0
 800373c:	2078      	movs	r0, #120	; 0x78
 800373e:	f000 fadd 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003742:	2214      	movs	r2, #20
 8003744:	2100      	movs	r1, #0
 8003746:	2078      	movs	r0, #120	; 0x78
 8003748:	f000 fad8 	bl	8003cfc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800374c:	22af      	movs	r2, #175	; 0xaf
 800374e:	2100      	movs	r1, #0
 8003750:	2078      	movs	r0, #120	; 0x78
 8003752:	f000 fad3 	bl	8003cfc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8003756:	222e      	movs	r2, #46	; 0x2e
 8003758:	2100      	movs	r1, #0
 800375a:	2078      	movs	r0, #120	; 0x78
 800375c:	f000 face 	bl	8003cfc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003760:	2000      	movs	r0, #0
 8003762:	f000 f843 	bl	80037ec <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8003766:	f000 f813 	bl	8003790 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800376a:	4b08      	ldr	r3, [pc, #32]	; (800378c <SSD1306_Init+0x184>)
 800376c:	2200      	movs	r2, #0
 800376e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <SSD1306_Init+0x184>)
 8003772:	2200      	movs	r2, #0
 8003774:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <SSD1306_Init+0x184>)
 8003778:	2201      	movs	r2, #1
 800377a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800377c:	2301      	movs	r3, #1
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	2000069c 	.word	0x2000069c
 800378c:	20000640 	.word	0x20000640

08003790 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8003796:	2300      	movs	r3, #0
 8003798:	71fb      	strb	r3, [r7, #7]
 800379a:	e01d      	b.n	80037d8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	3b50      	subs	r3, #80	; 0x50
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	2100      	movs	r1, #0
 80037a6:	2078      	movs	r0, #120	; 0x78
 80037a8:	f000 faa8 	bl	8003cfc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80037ac:	2200      	movs	r2, #0
 80037ae:	2100      	movs	r1, #0
 80037b0:	2078      	movs	r0, #120	; 0x78
 80037b2:	f000 faa3 	bl	8003cfc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80037b6:	2210      	movs	r2, #16
 80037b8:	2100      	movs	r1, #0
 80037ba:	2078      	movs	r0, #120	; 0x78
 80037bc:	f000 fa9e 	bl	8003cfc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	01db      	lsls	r3, r3, #7
 80037c4:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <SSD1306_UpdateScreen+0x58>)
 80037c6:	441a      	add	r2, r3
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	2140      	movs	r1, #64	; 0x40
 80037cc:	2078      	movs	r0, #120	; 0x78
 80037ce:	f000 fa4d 	bl	8003c6c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	3301      	adds	r3, #1
 80037d6:	71fb      	strb	r3, [r7, #7]
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	2b07      	cmp	r3, #7
 80037dc:	d9de      	bls.n	800379c <SSD1306_UpdateScreen+0xc>
	}
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000240 	.word	0x20000240

080037ec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <SSD1306_Fill+0x14>
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <SSD1306_Fill+0x16>
 8003800:	23ff      	movs	r3, #255	; 0xff
 8003802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003806:	4619      	mov	r1, r3
 8003808:	4803      	ldr	r0, [pc, #12]	; (8003818 <SSD1306_Fill+0x2c>)
 800380a:	f004 fce3 	bl	80081d4 <memset>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000240 	.word	0x20000240

0800381c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	80fb      	strh	r3, [r7, #6]
 8003826:	460b      	mov	r3, r1
 8003828:	80bb      	strh	r3, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	70fb      	strb	r3, [r7, #3]
	if (
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2b7f      	cmp	r3, #127	; 0x7f
 8003832:	d848      	bhi.n	80038c6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003834:	88bb      	ldrh	r3, [r7, #4]
 8003836:	2b3f      	cmp	r3, #63	; 0x3f
 8003838:	d845      	bhi.n	80038c6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800383a:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <SSD1306_DrawPixel+0xb4>)
 800383c:	791b      	ldrb	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d11a      	bne.n	800388c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	88bb      	ldrh	r3, [r7, #4]
 800385a:	08db      	lsrs	r3, r3, #3
 800385c:	b298      	uxth	r0, r3
 800385e:	4603      	mov	r3, r0
 8003860:	01db      	lsls	r3, r3, #7
 8003862:	4413      	add	r3, r2
 8003864:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <SSD1306_DrawPixel+0xb8>)
 8003866:	5cd3      	ldrb	r3, [r2, r3]
 8003868:	b25a      	sxtb	r2, r3
 800386a:	88bb      	ldrh	r3, [r7, #4]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	2101      	movs	r1, #1
 8003872:	fa01 f303 	lsl.w	r3, r1, r3
 8003876:	b25b      	sxtb	r3, r3
 8003878:	4313      	orrs	r3, r2
 800387a:	b259      	sxtb	r1, r3
 800387c:	88fa      	ldrh	r2, [r7, #6]
 800387e:	4603      	mov	r3, r0
 8003880:	01db      	lsls	r3, r3, #7
 8003882:	4413      	add	r3, r2
 8003884:	b2c9      	uxtb	r1, r1
 8003886:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <SSD1306_DrawPixel+0xb8>)
 8003888:	54d1      	strb	r1, [r2, r3]
 800388a:	e01d      	b.n	80038c8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800388c:	88fa      	ldrh	r2, [r7, #6]
 800388e:	88bb      	ldrh	r3, [r7, #4]
 8003890:	08db      	lsrs	r3, r3, #3
 8003892:	b298      	uxth	r0, r3
 8003894:	4603      	mov	r3, r0
 8003896:	01db      	lsls	r3, r3, #7
 8003898:	4413      	add	r3, r2
 800389a:	4a0e      	ldr	r2, [pc, #56]	; (80038d4 <SSD1306_DrawPixel+0xb8>)
 800389c:	5cd3      	ldrb	r3, [r2, r3]
 800389e:	b25a      	sxtb	r2, r3
 80038a0:	88bb      	ldrh	r3, [r7, #4]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	2101      	movs	r1, #1
 80038a8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ac:	b25b      	sxtb	r3, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	b25b      	sxtb	r3, r3
 80038b2:	4013      	ands	r3, r2
 80038b4:	b259      	sxtb	r1, r3
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	4603      	mov	r3, r0
 80038ba:	01db      	lsls	r3, r3, #7
 80038bc:	4413      	add	r3, r2
 80038be:	b2c9      	uxtb	r1, r1
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <SSD1306_DrawPixel+0xb8>)
 80038c2:	54d1      	strb	r1, [r2, r3]
 80038c4:	e000      	b.n	80038c8 <SSD1306_DrawPixel+0xac>
		return;
 80038c6:	bf00      	nop
	}
}
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	20000640 	.word	0x20000640
 80038d4:	20000240 	.word	0x20000240

080038d8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	460a      	mov	r2, r1
 80038e2:	80fb      	strh	r3, [r7, #6]
 80038e4:	4613      	mov	r3, r2
 80038e6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80038e8:	4a05      	ldr	r2, [pc, #20]	; (8003900 <SSD1306_GotoXY+0x28>)
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80038ee:	4a04      	ldr	r2, [pc, #16]	; (8003900 <SSD1306_GotoXY+0x28>)
 80038f0:	88bb      	ldrh	r3, [r7, #4]
 80038f2:	8053      	strh	r3, [r2, #2]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000640 	.word	0x20000640

08003904 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	6039      	str	r1, [r7, #0]
 800390e:	71fb      	strb	r3, [r7, #7]
 8003910:	4613      	mov	r3, r2
 8003912:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003914:	4b3a      	ldr	r3, [pc, #232]	; (8003a00 <SSD1306_Putc+0xfc>)
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	4413      	add	r3, r2
	if (
 8003920:	2b7f      	cmp	r3, #127	; 0x7f
 8003922:	dc07      	bgt.n	8003934 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003924:	4b36      	ldr	r3, [pc, #216]	; (8003a00 <SSD1306_Putc+0xfc>)
 8003926:	885b      	ldrh	r3, [r3, #2]
 8003928:	461a      	mov	r2, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	785b      	ldrb	r3, [r3, #1]
 800392e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003930:	2b3f      	cmp	r3, #63	; 0x3f
 8003932:	dd01      	ble.n	8003938 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003934:	2300      	movs	r3, #0
 8003936:	e05e      	b.n	80039f6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e04b      	b.n	80039d6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	3b20      	subs	r3, #32
 8003946:	6839      	ldr	r1, [r7, #0]
 8003948:	7849      	ldrb	r1, [r1, #1]
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4619      	mov	r1, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	440b      	add	r3, r1
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4413      	add	r3, r2
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800395c:	2300      	movs	r3, #0
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	e030      	b.n	80039c4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d010      	beq.n	8003994 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003972:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <SSD1306_Putc+0xfc>)
 8003974:	881a      	ldrh	r2, [r3, #0]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	b29b      	uxth	r3, r3
 800397a:	4413      	add	r3, r2
 800397c:	b298      	uxth	r0, r3
 800397e:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <SSD1306_Putc+0xfc>)
 8003980:	885a      	ldrh	r2, [r3, #2]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	b29b      	uxth	r3, r3
 8003986:	4413      	add	r3, r2
 8003988:	b29b      	uxth	r3, r3
 800398a:	79ba      	ldrb	r2, [r7, #6]
 800398c:	4619      	mov	r1, r3
 800398e:	f7ff ff45 	bl	800381c <SSD1306_DrawPixel>
 8003992:	e014      	b.n	80039be <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003994:	4b1a      	ldr	r3, [pc, #104]	; (8003a00 <SSD1306_Putc+0xfc>)
 8003996:	881a      	ldrh	r2, [r3, #0]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	b29b      	uxth	r3, r3
 800399c:	4413      	add	r3, r2
 800399e:	b298      	uxth	r0, r3
 80039a0:	4b17      	ldr	r3, [pc, #92]	; (8003a00 <SSD1306_Putc+0xfc>)
 80039a2:	885a      	ldrh	r2, [r3, #2]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	b299      	uxth	r1, r3
 80039ac:	79bb      	ldrb	r3, [r7, #6]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bf0c      	ite	eq
 80039b2:	2301      	moveq	r3, #1
 80039b4:	2300      	movne	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	f7ff ff2f 	bl	800381c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	3301      	adds	r3, #1
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d3c8      	bcc.n	8003962 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	3301      	adds	r3, #1
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	785b      	ldrb	r3, [r3, #1]
 80039da:	461a      	mov	r2, r3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	4293      	cmp	r3, r2
 80039e0:	d3ad      	bcc.n	800393e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80039e2:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <SSD1306_Putc+0xfc>)
 80039e4:	881a      	ldrh	r2, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	4413      	add	r3, r2
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <SSD1306_Putc+0xfc>)
 80039f2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80039f4:	79fb      	ldrb	r3, [r7, #7]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000640 	.word	0x20000640

08003a04 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003a12:	e012      	b.n	8003a3a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	79fa      	ldrb	r2, [r7, #7]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff71 	bl	8003904 <SSD1306_Putc>
 8003a22:	4603      	mov	r3, r0
 8003a24:	461a      	mov	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d002      	beq.n	8003a34 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	e008      	b.n	8003a46 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3301      	adds	r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e8      	bne.n	8003a14 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	781b      	ldrb	r3, [r3, #0]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8003a4e:	b590      	push	{r4, r7, lr}
 8003a50:	b087      	sub	sp, #28
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4604      	mov	r4, r0
 8003a56:	4608      	mov	r0, r1
 8003a58:	4611      	mov	r1, r2
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	4623      	mov	r3, r4
 8003a5e:	80fb      	strh	r3, [r7, #6]
 8003a60:	4603      	mov	r3, r0
 8003a62:	80bb      	strh	r3, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a70:	d901      	bls.n	8003a76 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8003a72:	237f      	movs	r3, #127	; 0x7f
 8003a74:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8003a76:	887b      	ldrh	r3, [r7, #2]
 8003a78:	2b7f      	cmp	r3, #127	; 0x7f
 8003a7a:	d901      	bls.n	8003a80 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8003a7c:	237f      	movs	r3, #127	; 0x7f
 8003a7e:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8003a80:	88bb      	ldrh	r3, [r7, #4]
 8003a82:	2b3f      	cmp	r3, #63	; 0x3f
 8003a84:	d901      	bls.n	8003a8a <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8003a86:	233f      	movs	r3, #63	; 0x3f
 8003a88:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8003a8a:	883b      	ldrh	r3, [r7, #0]
 8003a8c:	2b3f      	cmp	r3, #63	; 0x3f
 8003a8e:	d901      	bls.n	8003a94 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8003a90:	233f      	movs	r3, #63	; 0x3f
 8003a92:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8003a94:	88fa      	ldrh	r2, [r7, #6]
 8003a96:	887b      	ldrh	r3, [r7, #2]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d205      	bcs.n	8003aa8 <SSD1306_DrawLine+0x5a>
 8003a9c:	887a      	ldrh	r2, [r7, #2]
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	b21b      	sxth	r3, r3
 8003aa6:	e004      	b.n	8003ab2 <SSD1306_DrawLine+0x64>
 8003aa8:	88fa      	ldrh	r2, [r7, #6]
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	b21b      	sxth	r3, r3
 8003ab2:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8003ab4:	88ba      	ldrh	r2, [r7, #4]
 8003ab6:	883b      	ldrh	r3, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d205      	bcs.n	8003ac8 <SSD1306_DrawLine+0x7a>
 8003abc:	883a      	ldrh	r2, [r7, #0]
 8003abe:	88bb      	ldrh	r3, [r7, #4]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	b21b      	sxth	r3, r3
 8003ac6:	e004      	b.n	8003ad2 <SSD1306_DrawLine+0x84>
 8003ac8:	88ba      	ldrh	r2, [r7, #4]
 8003aca:	883b      	ldrh	r3, [r7, #0]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	b21b      	sxth	r3, r3
 8003ad2:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8003ad4:	88fa      	ldrh	r2, [r7, #6]
 8003ad6:	887b      	ldrh	r3, [r7, #2]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d201      	bcs.n	8003ae0 <SSD1306_DrawLine+0x92>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e001      	b.n	8003ae4 <SSD1306_DrawLine+0x96>
 8003ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae4:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8003ae6:	88ba      	ldrh	r2, [r7, #4]
 8003ae8:	883b      	ldrh	r3, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d201      	bcs.n	8003af2 <SSD1306_DrawLine+0xa4>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e001      	b.n	8003af6 <SSD1306_DrawLine+0xa8>
 8003af2:	f04f 33ff 	mov.w	r3, #4294967295
 8003af6:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8003af8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003afc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	dd06      	ble.n	8003b12 <SSD1306_DrawLine+0xc4>
 8003b04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b08:	0fda      	lsrs	r2, r3, #31
 8003b0a:	4413      	add	r3, r2
 8003b0c:	105b      	asrs	r3, r3, #1
 8003b0e:	b21b      	sxth	r3, r3
 8003b10:	e006      	b.n	8003b20 <SSD1306_DrawLine+0xd2>
 8003b12:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b16:	425b      	negs	r3, r3
 8003b18:	0fda      	lsrs	r2, r3, #31
 8003b1a:	4413      	add	r3, r2
 8003b1c:	105b      	asrs	r3, r3, #1
 8003b1e:	b21b      	sxth	r3, r3
 8003b20:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8003b22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d129      	bne.n	8003b7e <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8003b2a:	883a      	ldrh	r2, [r7, #0]
 8003b2c:	88bb      	ldrh	r3, [r7, #4]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d205      	bcs.n	8003b3e <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8003b32:	883b      	ldrh	r3, [r7, #0]
 8003b34:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8003b36:	88bb      	ldrh	r3, [r7, #4]
 8003b38:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8003b3a:	893b      	ldrh	r3, [r7, #8]
 8003b3c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8003b3e:	887a      	ldrh	r2, [r7, #2]
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d205      	bcs.n	8003b52 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8003b4e:	893b      	ldrh	r3, [r7, #8]
 8003b50:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8003b52:	88bb      	ldrh	r3, [r7, #4]
 8003b54:	82bb      	strh	r3, [r7, #20]
 8003b56:	e00c      	b.n	8003b72 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8003b58:	8ab9      	ldrh	r1, [r7, #20]
 8003b5a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fe5b 	bl	800381c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8003b66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	82bb      	strh	r3, [r7, #20]
 8003b72:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003b76:	883b      	ldrh	r3, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	dded      	ble.n	8003b58 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8003b7c:	e05f      	b.n	8003c3e <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8003b7e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d129      	bne.n	8003bda <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8003b86:	883a      	ldrh	r2, [r7, #0]
 8003b88:	88bb      	ldrh	r3, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d205      	bcs.n	8003b9a <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8003b8e:	883b      	ldrh	r3, [r7, #0]
 8003b90:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8003b92:	88bb      	ldrh	r3, [r7, #4]
 8003b94:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8003b96:	893b      	ldrh	r3, [r7, #8]
 8003b98:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8003b9a:	887a      	ldrh	r2, [r7, #2]
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d205      	bcs.n	8003bae <SSD1306_DrawLine+0x160>
			tmp = x1;
 8003ba2:	887b      	ldrh	r3, [r7, #2]
 8003ba4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8003baa:	893b      	ldrh	r3, [r7, #8]
 8003bac:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	82bb      	strh	r3, [r7, #20]
 8003bb2:	e00c      	b.n	8003bce <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8003bb4:	8abb      	ldrh	r3, [r7, #20]
 8003bb6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003bba:	88b9      	ldrh	r1, [r7, #4]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fe2d 	bl	800381c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8003bc2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3301      	adds	r3, #1
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	82bb      	strh	r3, [r7, #20]
 8003bce:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003bd2:	887b      	ldrh	r3, [r7, #2]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	dded      	ble.n	8003bb4 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8003bd8:	e031      	b.n	8003c3e <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8003bda:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003bde:	88b9      	ldrh	r1, [r7, #4]
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff fe1a 	bl	800381c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	887b      	ldrh	r3, [r7, #2]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d103      	bne.n	8003bf8 <SSD1306_DrawLine+0x1aa>
 8003bf0:	88ba      	ldrh	r2, [r7, #4]
 8003bf2:	883b      	ldrh	r3, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d021      	beq.n	8003c3c <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8003bf8:	8afb      	ldrh	r3, [r7, #22]
 8003bfa:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8003bfc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003c00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c04:	425b      	negs	r3, r3
 8003c06:	429a      	cmp	r2, r3
 8003c08:	dd08      	ble.n	8003c1c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8003c0a:	8afa      	ldrh	r2, [r7, #22]
 8003c0c:	8a3b      	ldrh	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8003c14:	89fa      	ldrh	r2, [r7, #14]
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	4413      	add	r3, r2
 8003c1a:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8003c1c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003c20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	dad8      	bge.n	8003bda <SSD1306_DrawLine+0x18c>
			err += dx;
 8003c28:	8afa      	ldrh	r2, [r7, #22]
 8003c2a:	8a7b      	ldrh	r3, [r7, #18]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8003c32:	89ba      	ldrh	r2, [r7, #12]
 8003c34:	88bb      	ldrh	r3, [r7, #4]
 8003c36:	4413      	add	r3, r2
 8003c38:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8003c3a:	e7ce      	b.n	8003bda <SSD1306_DrawLine+0x18c>
			break;
 8003c3c:	bf00      	nop
		} 
	}
}
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd90      	pop	{r4, r7, pc}

08003c44 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <ssd1306_I2C_Init+0x24>)
 8003c4c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003c4e:	e002      	b.n	8003c56 <ssd1306_I2C_Init+0x12>
		p--;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f9      	bne.n	8003c50 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	0003d090 	.word	0x0003d090

08003c6c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b0c7      	sub	sp, #284	; 0x11c
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	4604      	mov	r4, r0
 8003c74:	4608      	mov	r0, r1
 8003c76:	4639      	mov	r1, r7
 8003c78:	600a      	str	r2, [r1, #0]
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	1dfb      	adds	r3, r7, #7
 8003c7e:	4622      	mov	r2, r4
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	1dbb      	adds	r3, r7, #6
 8003c84:	4602      	mov	r2, r0
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	1d3b      	adds	r3, r7, #4
 8003c8a:	460a      	mov	r2, r1
 8003c8c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003c8e:	f107 030c 	add.w	r3, r7, #12
 8003c92:	1dba      	adds	r2, r7, #6
 8003c94:	7812      	ldrb	r2, [r2, #0]
 8003c96:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003c9e:	e010      	b.n	8003cc2 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8003ca0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003ca4:	463a      	mov	r2, r7
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	441a      	add	r2, r3
 8003caa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003cae:	3301      	adds	r3, #1
 8003cb0:	7811      	ldrb	r1, [r2, #0]
 8003cb2:	f107 020c 	add.w	r2, r7, #12
 8003cb6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003cb8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003cc2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	1d3a      	adds	r2, r7, #4
 8003cca:	8812      	ldrh	r2, [r2, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d8e7      	bhi.n	8003ca0 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8003cd0:	1dfb      	adds	r3, r7, #7
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b299      	uxth	r1, r3
 8003cd6:	1d3b      	adds	r3, r7, #4
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	b298      	uxth	r0, r3
 8003cde:	f107 020c 	add.w	r2, r7, #12
 8003ce2:	230a      	movs	r3, #10
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4803      	ldr	r0, [pc, #12]	; (8003cf8 <ssd1306_I2C_WriteMulti+0x8c>)
 8003cea:	f001 fb05 	bl	80052f8 <HAL_I2C_Master_Transmit>
}
 8003cee:	bf00      	nop
 8003cf0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd90      	pop	{r4, r7, pc}
 8003cf8:	2000069c 	.word	0x2000069c

08003cfc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	4603      	mov	r3, r0
 8003d04:	71fb      	strb	r3, [r7, #7]
 8003d06:	460b      	mov	r3, r1
 8003d08:	71bb      	strb	r3, [r7, #6]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003d0e:	79bb      	ldrb	r3, [r7, #6]
 8003d10:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003d12:	797b      	ldrb	r3, [r7, #5]
 8003d14:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	b299      	uxth	r1, r3
 8003d1a:	f107 020c 	add.w	r2, r7, #12
 8003d1e:	230a      	movs	r3, #10
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	2302      	movs	r3, #2
 8003d24:	4803      	ldr	r0, [pc, #12]	; (8003d34 <ssd1306_I2C_Write+0x38>)
 8003d26:	f001 fae7 	bl	80052f8 <HAL_I2C_Master_Transmit>
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	2000069c 	.word	0x2000069c

08003d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d3e:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <HAL_MspInit+0x5c>)
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	4a14      	ldr	r2, [pc, #80]	; (8003d94 <HAL_MspInit+0x5c>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	6193      	str	r3, [r2, #24]
 8003d4a:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <HAL_MspInit+0x5c>)
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <HAL_MspInit+0x5c>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	4a0e      	ldr	r2, [pc, #56]	; (8003d94 <HAL_MspInit+0x5c>)
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d60:	61d3      	str	r3, [r2, #28]
 8003d62:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <HAL_MspInit+0x5c>)
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <HAL_MspInit+0x60>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	4a04      	ldr	r2, [pc, #16]	; (8003d98 <HAL_MspInit+0x60>)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40010000 	.word	0x40010000

08003d9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da4:	f107 0310 	add.w	r3, r7, #16
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a14      	ldr	r2, [pc, #80]	; (8003e08 <HAL_ADC_MspInit+0x6c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d121      	bne.n	8003e00 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <HAL_ADC_MspInit+0x70>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	4a12      	ldr	r2, [pc, #72]	; (8003e0c <HAL_ADC_MspInit+0x70>)
 8003dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dc6:	6193      	str	r3, [r2, #24]
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_ADC_MspInit+0x70>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <HAL_ADC_MspInit+0x70>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	4a0c      	ldr	r2, [pc, #48]	; (8003e0c <HAL_ADC_MspInit+0x70>)
 8003dda:	f043 0304 	orr.w	r3, r3, #4
 8003dde:	6193      	str	r3, [r2, #24]
 8003de0:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <HAL_ADC_MspInit+0x70>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_TEMP_Pin;
 8003dec:	2301      	movs	r3, #1
 8003dee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003df0:	2303      	movs	r3, #3
 8003df2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_TEMP_GPIO_Port, &GPIO_InitStruct);
 8003df4:	f107 0310 	add.w	r3, r7, #16
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4805      	ldr	r0, [pc, #20]	; (8003e10 <HAL_ADC_MspInit+0x74>)
 8003dfc:	f000 ffa2 	bl	8004d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e00:	bf00      	nop
 8003e02:	3720      	adds	r7, #32
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40012400 	.word	0x40012400
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40010800 	.word	0x40010800

08003e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e1c:	f107 0310 	add.w	r3, r7, #16
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a16      	ldr	r2, [pc, #88]	; (8003e88 <HAL_I2C_MspInit+0x74>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d124      	bne.n	8003e7e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e34:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_I2C_MspInit+0x78>)
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <HAL_I2C_MspInit+0x78>)
 8003e3a:	f043 0308 	orr.w	r3, r3, #8
 8003e3e:	6193      	str	r3, [r2, #24]
 8003e40:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_I2C_MspInit+0x78>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e52:	2312      	movs	r3, #18
 8003e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e56:	2303      	movs	r3, #3
 8003e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e5a:	f107 0310 	add.w	r3, r7, #16
 8003e5e:	4619      	mov	r1, r3
 8003e60:	480b      	ldr	r0, [pc, #44]	; (8003e90 <HAL_I2C_MspInit+0x7c>)
 8003e62:	f000 ff6f 	bl	8004d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <HAL_I2C_MspInit+0x78>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <HAL_I2C_MspInit+0x78>)
 8003e6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e70:	61d3      	str	r3, [r2, #28]
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_I2C_MspInit+0x78>)
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003e7e:	bf00      	nop
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40005800 	.word	0x40005800
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40010c00 	.word	0x40010c00

08003e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a16      	ldr	r2, [pc, #88]	; (8003efc <HAL_TIM_Base_MspInit+0x68>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ea6:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <HAL_TIM_Base_MspInit+0x6c>)
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	4a15      	ldr	r2, [pc, #84]	; (8003f00 <HAL_TIM_Base_MspInit+0x6c>)
 8003eac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003eb0:	6193      	str	r3, [r2, #24]
 8003eb2:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <HAL_TIM_Base_MspInit+0x6c>)
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ebe:	e018      	b.n	8003ef2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a0f      	ldr	r2, [pc, #60]	; (8003f04 <HAL_TIM_Base_MspInit+0x70>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d113      	bne.n	8003ef2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003eca:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <HAL_TIM_Base_MspInit+0x6c>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	4a0c      	ldr	r2, [pc, #48]	; (8003f00 <HAL_TIM_Base_MspInit+0x6c>)
 8003ed0:	f043 0304 	orr.w	r3, r3, #4
 8003ed4:	61d3      	str	r3, [r2, #28]
 8003ed6:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <HAL_TIM_Base_MspInit+0x6c>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	201e      	movs	r0, #30
 8003ee8:	f000 fe7f 	bl	8004bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003eec:	201e      	movs	r0, #30
 8003eee:	f000 fe98 	bl	8004c22 <HAL_NVIC_EnableIRQ>
}
 8003ef2:	bf00      	nop
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40000800 	.word	0x40000800

08003f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	f107 0310 	add.w	r3, r7, #16
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a20      	ldr	r2, [pc, #128]	; (8003fa4 <HAL_UART_MspInit+0x9c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d139      	bne.n	8003f9c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f28:	4b1f      	ldr	r3, [pc, #124]	; (8003fa8 <HAL_UART_MspInit+0xa0>)
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	4a1e      	ldr	r2, [pc, #120]	; (8003fa8 <HAL_UART_MspInit+0xa0>)
 8003f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f32:	6193      	str	r3, [r2, #24]
 8003f34:	4b1c      	ldr	r3, [pc, #112]	; (8003fa8 <HAL_UART_MspInit+0xa0>)
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f40:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <HAL_UART_MspInit+0xa0>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <HAL_UART_MspInit+0xa0>)
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	6193      	str	r3, [r2, #24]
 8003f4c:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <HAL_UART_MspInit+0xa0>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f62:	2303      	movs	r3, #3
 8003f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f66:	f107 0310 	add.w	r3, r7, #16
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	480f      	ldr	r0, [pc, #60]	; (8003fac <HAL_UART_MspInit+0xa4>)
 8003f6e:	f000 fee9 	bl	8004d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f80:	f107 0310 	add.w	r3, r7, #16
 8003f84:	4619      	mov	r1, r3
 8003f86:	4809      	ldr	r0, [pc, #36]	; (8003fac <HAL_UART_MspInit+0xa4>)
 8003f88:	f000 fedc 	bl	8004d44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2100      	movs	r1, #0
 8003f90:	2025      	movs	r0, #37	; 0x25
 8003f92:	f000 fe2a 	bl	8004bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f96:	2025      	movs	r0, #37	; 0x25
 8003f98:	f000 fe43 	bl	8004c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003f9c:	bf00      	nop
 8003f9e:	3720      	adds	r7, #32
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40013800 	.word	0x40013800
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40010800 	.word	0x40010800

08003fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fc0:	e7fe      	b.n	8003fc0 <HardFault_Handler+0x4>

08003fc2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fc6:	e7fe      	b.n	8003fc6 <MemManage_Handler+0x4>

08003fc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fcc:	e7fe      	b.n	8003fcc <BusFault_Handler+0x4>

08003fce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fd2:	e7fe      	b.n	8003fd2 <UsageFault_Handler+0x4>

08003fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fd8:	bf00      	nop
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ffc:	f7fe ff5a 	bl	8002eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004000:	bf00      	nop
 8004002:	bd80      	pop	{r7, pc}

08004004 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004008:	2002      	movs	r0, #2
 800400a:	f001 f825 	bl	8005058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}

08004012 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004016:	2004      	movs	r0, #4
 8004018:	f001 f81e 	bl	8005058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800401c:	bf00      	nop
 800401e:	bd80      	pop	{r7, pc}

08004020 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004024:	2008      	movs	r0, #8
 8004026:	f001 f817 	bl	8005058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}

0800402e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004032:	2010      	movs	r0, #16
 8004034:	f001 f810 	bl	8005058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}

0800403c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004040:	2020      	movs	r0, #32
 8004042:	f001 f809 	bl	8005058 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004050:	4802      	ldr	r0, [pc, #8]	; (800405c <TIM4_IRQHandler+0x10>)
 8004052:	f003 f95d 	bl	8007310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000654 	.word	0x20000654

08004060 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004064:	4802      	ldr	r0, [pc, #8]	; (8004070 <USART1_IRQHandler+0x10>)
 8004066:	f003 fd7f 	bl	8007b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000720 	.word	0x20000720

08004074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800407c:	4a14      	ldr	r2, [pc, #80]	; (80040d0 <_sbrk+0x5c>)
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <_sbrk+0x60>)
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004088:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <_sbrk+0x64>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d102      	bne.n	8004096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004090:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <_sbrk+0x64>)
 8004092:	4a12      	ldr	r2, [pc, #72]	; (80040dc <_sbrk+0x68>)
 8004094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004096:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <_sbrk+0x64>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4413      	add	r3, r2
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d207      	bcs.n	80040b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040a4:	f004 f86c 	bl	8008180 <__errno>
 80040a8:	4602      	mov	r2, r0
 80040aa:	230c      	movs	r3, #12
 80040ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80040ae:	f04f 33ff 	mov.w	r3, #4294967295
 80040b2:	e009      	b.n	80040c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <_sbrk+0x64>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040ba:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <_sbrk+0x64>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	4a05      	ldr	r2, [pc, #20]	; (80040d8 <_sbrk+0x64>)
 80040c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040c6:	68fb      	ldr	r3, [r7, #12]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20005000 	.word	0x20005000
 80040d4:	00000400 	.word	0x00000400
 80040d8:	20000648 	.word	0x20000648
 80040dc:	200007e8 	.word	0x200007e8

080040e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr

080040ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80040ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80040ee:	e003      	b.n	80040f8 <LoopCopyDataInit>

080040f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80040f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80040f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80040f6:	3104      	adds	r1, #4

080040f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80040f8:	480a      	ldr	r0, [pc, #40]	; (8004124 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80040fa:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80040fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80040fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004100:	d3f6      	bcc.n	80040f0 <CopyDataInit>
  ldr r2, =_sbss
 8004102:	4a0a      	ldr	r2, [pc, #40]	; (800412c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004104:	e002      	b.n	800410c <LoopFillZerobss>

08004106 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004106:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004108:	f842 3b04 	str.w	r3, [r2], #4

0800410c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800410c:	4b08      	ldr	r3, [pc, #32]	; (8004130 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800410e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004110:	d3f9      	bcc.n	8004106 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004112:	f7ff ffe5 	bl	80040e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004116:	f004 f839 	bl	800818c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800411a:	f7fd fecd 	bl	8001eb8 <main>
  bx lr
 800411e:	4770      	bx	lr
  ldr r3, =_sidata
 8004120:	0800af00 	.word	0x0800af00
  ldr r0, =_sdata
 8004124:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004128:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 800412c:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8004130:	200007e4 	.word	0x200007e4

08004134 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004134:	e7fe      	b.n	8004134 <ADC1_2_IRQHandler>
	...

08004138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800413c:	4b08      	ldr	r3, [pc, #32]	; (8004160 <HAL_Init+0x28>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a07      	ldr	r2, [pc, #28]	; (8004160 <HAL_Init+0x28>)
 8004142:	f043 0310 	orr.w	r3, r3, #16
 8004146:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004148:	2003      	movs	r0, #3
 800414a:	f000 fd43 	bl	8004bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800414e:	2000      	movs	r0, #0
 8004150:	f000 f808 	bl	8004164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004154:	f7ff fdf0 	bl	8003d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40022000 	.word	0x40022000

08004164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800416c:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <HAL_InitTick+0x54>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_InitTick+0x58>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	4619      	mov	r1, r3
 8004176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800417a:	fbb3 f3f1 	udiv	r3, r3, r1
 800417e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fd5b 	bl	8004c3e <HAL_SYSTICK_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e00e      	b.n	80041b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b0f      	cmp	r3, #15
 8004196:	d80a      	bhi.n	80041ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004198:	2200      	movs	r2, #0
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	f000 fd23 	bl	8004bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041a4:	4a06      	ldr	r2, [pc, #24]	; (80041c0 <HAL_InitTick+0x5c>)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e000      	b.n	80041b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20000008 	.word	0x20000008
 80041bc:	20000010 	.word	0x20000010
 80041c0:	2000000c 	.word	0x2000000c

080041c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return uwTick;
 80041c8:	4b02      	ldr	r3, [pc, #8]	; (80041d4 <HAL_GetTick+0x10>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr
 80041d4:	200007dc 	.word	0x200007dc

080041d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041e0:	f7ff fff0 	bl	80041c4 <HAL_GetTick>
 80041e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d005      	beq.n	80041fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041f2:	4b09      	ldr	r3, [pc, #36]	; (8004218 <HAL_Delay+0x40>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041fe:	bf00      	nop
 8004200:	f7ff ffe0 	bl	80041c4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	429a      	cmp	r2, r3
 800420e:	d8f7      	bhi.n	8004200 <HAL_Delay+0x28>
  {
  }
}
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000010 	.word	0x20000010

0800421c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e0be      	b.n	80043bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004248:	2b00      	cmp	r3, #0
 800424a:	d109      	bne.n	8004260 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fd9e 	bl	8003d9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fbb1 	bl	80049c8 <ADC_ConversionStop_Disable>
 8004266:	4603      	mov	r3, r0
 8004268:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 8099 	bne.w	80043aa <HAL_ADC_Init+0x18e>
 8004278:	7dfb      	ldrb	r3, [r7, #23]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f040 8095 	bne.w	80043aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004288:	f023 0302 	bic.w	r3, r3, #2
 800428c:	f043 0202 	orr.w	r2, r3, #2
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800429c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	7b1b      	ldrb	r3, [r3, #12]
 80042a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80042a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b4:	d003      	beq.n	80042be <HAL_ADC_Init+0xa2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d102      	bne.n	80042c4 <HAL_ADC_Init+0xa8>
 80042be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042c2:	e000      	b.n	80042c6 <HAL_ADC_Init+0xaa>
 80042c4:	2300      	movs	r3, #0
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7d1b      	ldrb	r3, [r3, #20]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d119      	bne.n	8004308 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	7b1b      	ldrb	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	035a      	lsls	r2, r3, #13
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	e00b      	b.n	8004308 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	f043 0201 	orr.w	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	430a      	orrs	r2, r1
 800431a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <HAL_ADC_Init+0x1a8>)
 8004324:	4013      	ands	r3, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	430b      	orrs	r3, r1
 800432e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004338:	d003      	beq.n	8004342 <HAL_ADC_Init+0x126>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d104      	bne.n	800434c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	3b01      	subs	r3, #1
 8004348:	051b      	lsls	r3, r3, #20
 800434a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	430a      	orrs	r2, r1
 800435e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	4b18      	ldr	r3, [pc, #96]	; (80043c8 <HAL_ADC_Init+0x1ac>)
 8004368:	4013      	ands	r3, r2
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	429a      	cmp	r2, r3
 800436e:	d10b      	bne.n	8004388 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	f023 0303 	bic.w	r3, r3, #3
 800437e:	f043 0201 	orr.w	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004386:	e018      	b.n	80043ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	f023 0312 	bic.w	r3, r3, #18
 8004390:	f043 0210 	orr.w	r2, r3, #16
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	f043 0201 	orr.w	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80043a8:	e007      	b.n	80043ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	f043 0210 	orr.w	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	ffe1f7fd 	.word	0xffe1f7fd
 80043c8:	ff1f0efe 	.word	0xff1f0efe

080043cc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_Start+0x1a>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e098      	b.n	8004518 <HAL_ADC_Start+0x14c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa98 	bl	8004924 <ADC_Enable>
 80043f4:	4603      	mov	r3, r0
 80043f6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f040 8087 	bne.w	800450e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a41      	ldr	r2, [pc, #260]	; (8004520 <HAL_ADC_Start+0x154>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d105      	bne.n	800442a <HAL_ADC_Start+0x5e>
 800441e:	4b41      	ldr	r3, [pc, #260]	; (8004524 <HAL_ADC_Start+0x158>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d115      	bne.n	8004456 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004440:	2b00      	cmp	r3, #0
 8004442:	d026      	beq.n	8004492 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800444c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004454:	e01d      	b.n	8004492 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a2f      	ldr	r2, [pc, #188]	; (8004524 <HAL_ADC_Start+0x158>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_ADC_Start+0xaa>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2b      	ldr	r2, [pc, #172]	; (8004520 <HAL_ADC_Start+0x154>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10d      	bne.n	8004492 <HAL_ADC_Start+0xc6>
 8004476:	4b2b      	ldr	r3, [pc, #172]	; (8004524 <HAL_ADC_Start+0x158>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800448a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d006      	beq.n	80044ac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	f023 0206 	bic.w	r2, r3, #6
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80044aa:	e002      	b.n	80044b2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f06f 0202 	mvn.w	r2, #2
 80044c2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80044ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80044d2:	d113      	bne.n	80044fc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80044d8:	4a11      	ldr	r2, [pc, #68]	; (8004520 <HAL_ADC_Start+0x154>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d105      	bne.n	80044ea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80044de:	4b11      	ldr	r3, [pc, #68]	; (8004524 <HAL_ADC_Start+0x158>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d108      	bne.n	80044fc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80044f8:	609a      	str	r2, [r3, #8]
 80044fa:	e00c      	b.n	8004516 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	e003      	b.n	8004516 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004516:	7bfb      	ldrb	r3, [r7, #15]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40012800 	.word	0x40012800
 8004524:	40012400 	.word	0x40012400

08004528 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004528:	b590      	push	{r4, r7, lr}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800453e:	f7ff fe41 	bl	80041c4 <HAL_GetTick>
 8004542:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00b      	beq.n	800456a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	f043 0220 	orr.w	r2, r3, #32
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e0c8      	b.n	80046fc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d12a      	bne.n	80045ce <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004582:	2b00      	cmp	r3, #0
 8004584:	d123      	bne.n	80045ce <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004586:	e01a      	b.n	80045be <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458e:	d016      	beq.n	80045be <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d007      	beq.n	80045a6 <HAL_ADC_PollForConversion+0x7e>
 8004596:	f7ff fe15 	bl	80041c4 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d20b      	bcs.n	80045be <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	f043 0204 	orr.w	r2, r3, #4
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e09e      	b.n	80046fc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0dd      	beq.n	8004588 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80045cc:	e06c      	b.n	80046a8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80045ce:	4b4d      	ldr	r3, [pc, #308]	; (8004704 <HAL_ADC_PollForConversion+0x1dc>)
 80045d0:	681c      	ldr	r4, [r3, #0]
 80045d2:	2002      	movs	r0, #2
 80045d4:	f002 fcc6 	bl	8006f64 <HAL_RCCEx_GetPeriphCLKFreq>
 80045d8:	4603      	mov	r3, r0
 80045da:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6919      	ldr	r1, [r3, #16]
 80045e4:	4b48      	ldr	r3, [pc, #288]	; (8004708 <HAL_ADC_PollForConversion+0x1e0>)
 80045e6:	400b      	ands	r3, r1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d118      	bne.n	800461e <HAL_ADC_PollForConversion+0xf6>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68d9      	ldr	r1, [r3, #12]
 80045f2:	4b46      	ldr	r3, [pc, #280]	; (800470c <HAL_ADC_PollForConversion+0x1e4>)
 80045f4:	400b      	ands	r3, r1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d111      	bne.n	800461e <HAL_ADC_PollForConversion+0xf6>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6919      	ldr	r1, [r3, #16]
 8004600:	4b43      	ldr	r3, [pc, #268]	; (8004710 <HAL_ADC_PollForConversion+0x1e8>)
 8004602:	400b      	ands	r3, r1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d108      	bne.n	800461a <HAL_ADC_PollForConversion+0xf2>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68d9      	ldr	r1, [r3, #12]
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <HAL_ADC_PollForConversion+0x1ec>)
 8004610:	400b      	ands	r3, r1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_ADC_PollForConversion+0xf2>
 8004616:	2314      	movs	r3, #20
 8004618:	e020      	b.n	800465c <HAL_ADC_PollForConversion+0x134>
 800461a:	2329      	movs	r3, #41	; 0x29
 800461c:	e01e      	b.n	800465c <HAL_ADC_PollForConversion+0x134>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6919      	ldr	r1, [r3, #16]
 8004624:	4b3a      	ldr	r3, [pc, #232]	; (8004710 <HAL_ADC_PollForConversion+0x1e8>)
 8004626:	400b      	ands	r3, r1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <HAL_ADC_PollForConversion+0x112>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68d9      	ldr	r1, [r3, #12]
 8004632:	4b38      	ldr	r3, [pc, #224]	; (8004714 <HAL_ADC_PollForConversion+0x1ec>)
 8004634:	400b      	ands	r3, r1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00d      	beq.n	8004656 <HAL_ADC_PollForConversion+0x12e>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6919      	ldr	r1, [r3, #16]
 8004640:	4b35      	ldr	r3, [pc, #212]	; (8004718 <HAL_ADC_PollForConversion+0x1f0>)
 8004642:	400b      	ands	r3, r1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d108      	bne.n	800465a <HAL_ADC_PollForConversion+0x132>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68d9      	ldr	r1, [r3, #12]
 800464e:	4b32      	ldr	r3, [pc, #200]	; (8004718 <HAL_ADC_PollForConversion+0x1f0>)
 8004650:	400b      	ands	r3, r1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_ADC_PollForConversion+0x132>
 8004656:	2354      	movs	r3, #84	; 0x54
 8004658:	e000      	b.n	800465c <HAL_ADC_PollForConversion+0x134>
 800465a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800465c:	fb02 f303 	mul.w	r3, r2, r3
 8004660:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004662:	e01d      	b.n	80046a0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d016      	beq.n	800469a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <HAL_ADC_PollForConversion+0x15a>
 8004672:	f7ff fda7 	bl	80041c4 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d20b      	bcs.n	800469a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	f043 0204 	orr.w	r2, r3, #4
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e030      	b.n	80046fc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3301      	adds	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d8dd      	bhi.n	8004664 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0212 	mvn.w	r2, #18
 80046b0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80046c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80046cc:	d115      	bne.n	80046fa <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d111      	bne.n	80046fa <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d105      	bne.n	80046fa <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	f043 0201 	orr.w	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	bd90      	pop	{r4, r7, pc}
 8004704:	20000008 	.word	0x20000008
 8004708:	24924924 	.word	0x24924924
 800470c:	00924924 	.word	0x00924924
 8004710:	12492492 	.word	0x12492492
 8004714:	00492492 	.word	0x00492492
 8004718:	00249249 	.word	0x00249249

0800471c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr

08004734 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x20>
 8004750:	2302      	movs	r3, #2
 8004752:	e0dc      	b.n	800490e <HAL_ADC_ConfigChannel+0x1da>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b06      	cmp	r3, #6
 8004762:	d81c      	bhi.n	800479e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	3b05      	subs	r3, #5
 8004776:	221f      	movs	r2, #31
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	4019      	ands	r1, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	3b05      	subs	r3, #5
 8004790:	fa00 f203 	lsl.w	r2, r0, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	635a      	str	r2, [r3, #52]	; 0x34
 800479c:	e03c      	b.n	8004818 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d81c      	bhi.n	80047e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	3b23      	subs	r3, #35	; 0x23
 80047b8:	221f      	movs	r2, #31
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43db      	mvns	r3, r3
 80047c0:	4019      	ands	r1, r3
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	3b23      	subs	r3, #35	; 0x23
 80047d2:	fa00 f203 	lsl.w	r2, r0, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	631a      	str	r2, [r3, #48]	; 0x30
 80047de:	e01b      	b.n	8004818 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	3b41      	subs	r3, #65	; 0x41
 80047f2:	221f      	movs	r2, #31
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	4019      	ands	r1, r3
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	3b41      	subs	r3, #65	; 0x41
 800480c:	fa00 f203 	lsl.w	r2, r0, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b09      	cmp	r3, #9
 800481e:	d91c      	bls.n	800485a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68d9      	ldr	r1, [r3, #12]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4613      	mov	r3, r2
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	4413      	add	r3, r2
 8004830:	3b1e      	subs	r3, #30
 8004832:	2207      	movs	r2, #7
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	4019      	ands	r1, r3
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	6898      	ldr	r0, [r3, #8]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4613      	mov	r3, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	4413      	add	r3, r2
 800484a:	3b1e      	subs	r3, #30
 800484c:	fa00 f203 	lsl.w	r2, r0, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	60da      	str	r2, [r3, #12]
 8004858:	e019      	b.n	800488e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6919      	ldr	r1, [r3, #16]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	4413      	add	r3, r2
 800486a:	2207      	movs	r2, #7
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	43db      	mvns	r3, r3
 8004872:	4019      	ands	r1, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	6898      	ldr	r0, [r3, #8]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	4413      	add	r3, r2
 8004882:	fa00 f203 	lsl.w	r2, r0, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b10      	cmp	r3, #16
 8004894:	d003      	beq.n	800489e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800489a:	2b11      	cmp	r3, #17
 800489c:	d132      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1d      	ldr	r2, [pc, #116]	; (8004918 <HAL_ADC_ConfigChannel+0x1e4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d125      	bne.n	80048f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d126      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80048c4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b10      	cmp	r3, #16
 80048cc:	d11a      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048ce:	4b13      	ldr	r3, [pc, #76]	; (800491c <HAL_ADC_ConfigChannel+0x1e8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a13      	ldr	r2, [pc, #76]	; (8004920 <HAL_ADC_ConfigChannel+0x1ec>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	0c9a      	lsrs	r2, r3, #18
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048e4:	e002      	b.n	80048ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f9      	bne.n	80048e6 <HAL_ADC_ConfigChannel+0x1b2>
 80048f2:	e007      	b.n	8004904 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	f043 0220 	orr.w	r2, r3, #32
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	40012400 	.word	0x40012400
 800491c:	20000008 	.word	0x20000008
 8004920:	431bde83 	.word	0x431bde83

08004924 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d039      	beq.n	80049b6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0201 	orr.w	r2, r2, #1
 8004950:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004952:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <ADC_Enable+0x9c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1b      	ldr	r2, [pc, #108]	; (80049c4 <ADC_Enable+0xa0>)
 8004958:	fba2 2303 	umull	r2, r3, r2, r3
 800495c:	0c9b      	lsrs	r3, r3, #18
 800495e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004960:	e002      	b.n	8004968 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	3b01      	subs	r3, #1
 8004966:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f9      	bne.n	8004962 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800496e:	f7ff fc29 	bl	80041c4 <HAL_GetTick>
 8004972:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004974:	e018      	b.n	80049a8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004976:	f7ff fc25 	bl	80041c4 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d911      	bls.n	80049a8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004988:	f043 0210 	orr.w	r2, r3, #16
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	f043 0201 	orr.w	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e007      	b.n	80049b8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d1df      	bne.n	8004976 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000008 	.word	0x20000008
 80049c4:	431bde83 	.word	0x431bde83

080049c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d127      	bne.n	8004a32 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0201 	bic.w	r2, r2, #1
 80049f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049f2:	f7ff fbe7 	bl	80041c4 <HAL_GetTick>
 80049f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80049f8:	e014      	b.n	8004a24 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049fa:	f7ff fbe3 	bl	80041c4 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d90d      	bls.n	8004a24 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	f043 0210 	orr.w	r2, r3, #16
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	f043 0201 	orr.w	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e007      	b.n	8004a34 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d0e3      	beq.n	80049fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <__NVIC_SetPriorityGrouping+0x44>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a58:	4013      	ands	r3, r2
 8004a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a6e:	4a04      	ldr	r2, [pc, #16]	; (8004a80 <__NVIC_SetPriorityGrouping+0x44>)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	60d3      	str	r3, [r2, #12]
}
 8004a74:	bf00      	nop
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	e000ed00 	.word	0xe000ed00

08004a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a88:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <__NVIC_GetPriorityGrouping+0x18>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	0a1b      	lsrs	r3, r3, #8
 8004a8e:	f003 0307 	and.w	r3, r3, #7
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	e000ed00 	.word	0xe000ed00

08004aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	db0b      	blt.n	8004aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	f003 021f 	and.w	r2, r3, #31
 8004ab8:	4906      	ldr	r1, [pc, #24]	; (8004ad4 <__NVIC_EnableIRQ+0x34>)
 8004aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr
 8004ad4:	e000e100 	.word	0xe000e100

08004ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	db0a      	blt.n	8004b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	490c      	ldr	r1, [pc, #48]	; (8004b24 <__NVIC_SetPriority+0x4c>)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	0112      	lsls	r2, r2, #4
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	440b      	add	r3, r1
 8004afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b00:	e00a      	b.n	8004b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	4908      	ldr	r1, [pc, #32]	; (8004b28 <__NVIC_SetPriority+0x50>)
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	3b04      	subs	r3, #4
 8004b10:	0112      	lsls	r2, r2, #4
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	440b      	add	r3, r1
 8004b16:	761a      	strb	r2, [r3, #24]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	e000e100 	.word	0xe000e100
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b089      	sub	sp, #36	; 0x24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f1c3 0307 	rsb	r3, r3, #7
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	bf28      	it	cs
 8004b4a:	2304      	movcs	r3, #4
 8004b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3304      	adds	r3, #4
 8004b52:	2b06      	cmp	r3, #6
 8004b54:	d902      	bls.n	8004b5c <NVIC_EncodePriority+0x30>
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	3b03      	subs	r3, #3
 8004b5a:	e000      	b.n	8004b5e <NVIC_EncodePriority+0x32>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b60:	f04f 32ff 	mov.w	r2, #4294967295
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	401a      	ands	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b74:	f04f 31ff 	mov.w	r1, #4294967295
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	43d9      	mvns	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b84:	4313      	orrs	r3, r2
         );
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3724      	adds	r7, #36	; 0x24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ba0:	d301      	bcc.n	8004ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e00f      	b.n	8004bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ba6:	4a0a      	ldr	r2, [pc, #40]	; (8004bd0 <SysTick_Config+0x40>)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bae:	210f      	movs	r1, #15
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	f7ff ff90 	bl	8004ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <SysTick_Config+0x40>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bbe:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <SysTick_Config+0x40>)
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	e000e010 	.word	0xe000e010

08004bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff ff2d 	bl	8004a3c <__NVIC_SetPriorityGrouping>
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bfc:	f7ff ff42 	bl	8004a84 <__NVIC_GetPriorityGrouping>
 8004c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	6978      	ldr	r0, [r7, #20]
 8004c08:	f7ff ff90 	bl	8004b2c <NVIC_EncodePriority>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c12:	4611      	mov	r1, r2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff ff5f 	bl	8004ad8 <__NVIC_SetPriority>
}
 8004c1a:	bf00      	nop
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	4603      	mov	r3, r0
 8004c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff ff35 	bl	8004aa0 <__NVIC_EnableIRQ>
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff ffa2 	bl	8004b90 <SysTick_Config>
 8004c4c:	4603      	mov	r3, r0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d005      	beq.n	8004c7a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2204      	movs	r2, #4
 8004c72:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	73fb      	strb	r3, [r7, #15]
 8004c78:	e051      	b.n	8004d1e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 020e 	bic.w	r2, r2, #14
 8004c88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0201 	bic.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <HAL_DMA_Abort_IT+0xd0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d029      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xa0>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a20      	ldr	r2, [pc, #128]	; (8004d2c <HAL_DMA_Abort_IT+0xd4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d022      	beq.n	8004cf4 <HAL_DMA_Abort_IT+0x9c>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <HAL_DMA_Abort_IT+0xd8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d01a      	beq.n	8004cee <HAL_DMA_Abort_IT+0x96>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <HAL_DMA_Abort_IT+0xdc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d012      	beq.n	8004ce8 <HAL_DMA_Abort_IT+0x90>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1c      	ldr	r2, [pc, #112]	; (8004d38 <HAL_DMA_Abort_IT+0xe0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00a      	beq.n	8004ce2 <HAL_DMA_Abort_IT+0x8a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1a      	ldr	r2, [pc, #104]	; (8004d3c <HAL_DMA_Abort_IT+0xe4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d102      	bne.n	8004cdc <HAL_DMA_Abort_IT+0x84>
 8004cd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004cda:	e00e      	b.n	8004cfa <HAL_DMA_Abort_IT+0xa2>
 8004cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ce0:	e00b      	b.n	8004cfa <HAL_DMA_Abort_IT+0xa2>
 8004ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ce6:	e008      	b.n	8004cfa <HAL_DMA_Abort_IT+0xa2>
 8004ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cec:	e005      	b.n	8004cfa <HAL_DMA_Abort_IT+0xa2>
 8004cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cf2:	e002      	b.n	8004cfa <HAL_DMA_Abort_IT+0xa2>
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	e000      	b.n	8004cfa <HAL_DMA_Abort_IT+0xa2>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4a11      	ldr	r2, [pc, #68]	; (8004d40 <HAL_DMA_Abort_IT+0xe8>)
 8004cfc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
    } 
  }
  return status;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40020008 	.word	0x40020008
 8004d2c:	4002001c 	.word	0x4002001c
 8004d30:	40020030 	.word	0x40020030
 8004d34:	40020044 	.word	0x40020044
 8004d38:	40020058 	.word	0x40020058
 8004d3c:	4002006c 	.word	0x4002006c
 8004d40:	40020000 	.word	0x40020000

08004d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b08b      	sub	sp, #44	; 0x2c
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d52:	2300      	movs	r3, #0
 8004d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d56:	e127      	b.n	8004fa8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d58:	2201      	movs	r2, #1
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	f040 8116 	bne.w	8004fa2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b12      	cmp	r3, #18
 8004d7c:	d034      	beq.n	8004de8 <HAL_GPIO_Init+0xa4>
 8004d7e:	2b12      	cmp	r3, #18
 8004d80:	d80d      	bhi.n	8004d9e <HAL_GPIO_Init+0x5a>
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d02b      	beq.n	8004dde <HAL_GPIO_Init+0x9a>
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d804      	bhi.n	8004d94 <HAL_GPIO_Init+0x50>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d031      	beq.n	8004df2 <HAL_GPIO_Init+0xae>
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d01c      	beq.n	8004dcc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004d92:	e048      	b.n	8004e26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d043      	beq.n	8004e20 <HAL_GPIO_Init+0xdc>
 8004d98:	2b11      	cmp	r3, #17
 8004d9a:	d01b      	beq.n	8004dd4 <HAL_GPIO_Init+0x90>
          break;
 8004d9c:	e043      	b.n	8004e26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004d9e:	4a89      	ldr	r2, [pc, #548]	; (8004fc4 <HAL_GPIO_Init+0x280>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d026      	beq.n	8004df2 <HAL_GPIO_Init+0xae>
 8004da4:	4a87      	ldr	r2, [pc, #540]	; (8004fc4 <HAL_GPIO_Init+0x280>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d806      	bhi.n	8004db8 <HAL_GPIO_Init+0x74>
 8004daa:	4a87      	ldr	r2, [pc, #540]	; (8004fc8 <HAL_GPIO_Init+0x284>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d020      	beq.n	8004df2 <HAL_GPIO_Init+0xae>
 8004db0:	4a86      	ldr	r2, [pc, #536]	; (8004fcc <HAL_GPIO_Init+0x288>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d01d      	beq.n	8004df2 <HAL_GPIO_Init+0xae>
          break;
 8004db6:	e036      	b.n	8004e26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004db8:	4a85      	ldr	r2, [pc, #532]	; (8004fd0 <HAL_GPIO_Init+0x28c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d019      	beq.n	8004df2 <HAL_GPIO_Init+0xae>
 8004dbe:	4a85      	ldr	r2, [pc, #532]	; (8004fd4 <HAL_GPIO_Init+0x290>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d016      	beq.n	8004df2 <HAL_GPIO_Init+0xae>
 8004dc4:	4a84      	ldr	r2, [pc, #528]	; (8004fd8 <HAL_GPIO_Init+0x294>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <HAL_GPIO_Init+0xae>
          break;
 8004dca:	e02c      	b.n	8004e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	623b      	str	r3, [r7, #32]
          break;
 8004dd2:	e028      	b.n	8004e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	623b      	str	r3, [r7, #32]
          break;
 8004ddc:	e023      	b.n	8004e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	3308      	adds	r3, #8
 8004de4:	623b      	str	r3, [r7, #32]
          break;
 8004de6:	e01e      	b.n	8004e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	330c      	adds	r3, #12
 8004dee:	623b      	str	r3, [r7, #32]
          break;
 8004df0:	e019      	b.n	8004e26 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d102      	bne.n	8004e00 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004dfa:	2304      	movs	r3, #4
 8004dfc:	623b      	str	r3, [r7, #32]
          break;
 8004dfe:	e012      	b.n	8004e26 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d105      	bne.n	8004e14 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e08:	2308      	movs	r3, #8
 8004e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	611a      	str	r2, [r3, #16]
          break;
 8004e12:	e008      	b.n	8004e26 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e14:	2308      	movs	r3, #8
 8004e16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	615a      	str	r2, [r3, #20]
          break;
 8004e1e:	e002      	b.n	8004e26 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e20:	2300      	movs	r3, #0
 8004e22:	623b      	str	r3, [r7, #32]
          break;
 8004e24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2bff      	cmp	r3, #255	; 0xff
 8004e2a:	d801      	bhi.n	8004e30 <HAL_GPIO_Init+0xec>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	e001      	b.n	8004e34 <HAL_GPIO_Init+0xf0>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3304      	adds	r3, #4
 8004e34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2bff      	cmp	r3, #255	; 0xff
 8004e3a:	d802      	bhi.n	8004e42 <HAL_GPIO_Init+0xfe>
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	e002      	b.n	8004e48 <HAL_GPIO_Init+0x104>
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	3b08      	subs	r3, #8
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	210f      	movs	r1, #15
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	fa01 f303 	lsl.w	r3, r1, r3
 8004e56:	43db      	mvns	r3, r3
 8004e58:	401a      	ands	r2, r3
 8004e5a:	6a39      	ldr	r1, [r7, #32]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e62:	431a      	orrs	r2, r3
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 8096 	beq.w	8004fa2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004e76:	4b59      	ldr	r3, [pc, #356]	; (8004fdc <HAL_GPIO_Init+0x298>)
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	4a58      	ldr	r2, [pc, #352]	; (8004fdc <HAL_GPIO_Init+0x298>)
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	6193      	str	r3, [r2, #24]
 8004e82:	4b56      	ldr	r3, [pc, #344]	; (8004fdc <HAL_GPIO_Init+0x298>)
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	60bb      	str	r3, [r7, #8]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004e8e:	4a54      	ldr	r2, [pc, #336]	; (8004fe0 <HAL_GPIO_Init+0x29c>)
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	089b      	lsrs	r3, r3, #2
 8004e94:	3302      	adds	r3, #2
 8004e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	220f      	movs	r2, #15
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	43db      	mvns	r3, r3
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a4b      	ldr	r2, [pc, #300]	; (8004fe4 <HAL_GPIO_Init+0x2a0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <HAL_GPIO_Init+0x19e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a4a      	ldr	r2, [pc, #296]	; (8004fe8 <HAL_GPIO_Init+0x2a4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00d      	beq.n	8004ede <HAL_GPIO_Init+0x19a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a49      	ldr	r2, [pc, #292]	; (8004fec <HAL_GPIO_Init+0x2a8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <HAL_GPIO_Init+0x196>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a48      	ldr	r2, [pc, #288]	; (8004ff0 <HAL_GPIO_Init+0x2ac>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d101      	bne.n	8004ed6 <HAL_GPIO_Init+0x192>
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e006      	b.n	8004ee4 <HAL_GPIO_Init+0x1a0>
 8004ed6:	2304      	movs	r3, #4
 8004ed8:	e004      	b.n	8004ee4 <HAL_GPIO_Init+0x1a0>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e002      	b.n	8004ee4 <HAL_GPIO_Init+0x1a0>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <HAL_GPIO_Init+0x1a0>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee6:	f002 0203 	and.w	r2, r2, #3
 8004eea:	0092      	lsls	r2, r2, #2
 8004eec:	4093      	lsls	r3, r2
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004ef4:	493a      	ldr	r1, [pc, #232]	; (8004fe0 <HAL_GPIO_Init+0x29c>)
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	089b      	lsrs	r3, r3, #2
 8004efa:	3302      	adds	r3, #2
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d006      	beq.n	8004f1c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004f0e:	4b39      	ldr	r3, [pc, #228]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4938      	ldr	r1, [pc, #224]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]
 8004f1a:	e006      	b.n	8004f2a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004f1c:	4b35      	ldr	r3, [pc, #212]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	43db      	mvns	r3, r3
 8004f24:	4933      	ldr	r1, [pc, #204]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d006      	beq.n	8004f44 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f36:	4b2f      	ldr	r3, [pc, #188]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	492e      	ldr	r1, [pc, #184]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	604b      	str	r3, [r1, #4]
 8004f42:	e006      	b.n	8004f52 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004f44:	4b2b      	ldr	r3, [pc, #172]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	4929      	ldr	r1, [pc, #164]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d006      	beq.n	8004f6c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004f5e:	4b25      	ldr	r3, [pc, #148]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	4924      	ldr	r1, [pc, #144]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	608b      	str	r3, [r1, #8]
 8004f6a:	e006      	b.n	8004f7a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004f6c:	4b21      	ldr	r3, [pc, #132]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	43db      	mvns	r3, r3
 8004f74:	491f      	ldr	r1, [pc, #124]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d006      	beq.n	8004f94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f86:	4b1b      	ldr	r3, [pc, #108]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	491a      	ldr	r1, [pc, #104]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60cb      	str	r3, [r1, #12]
 8004f92:	e006      	b.n	8004fa2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f94:	4b17      	ldr	r3, [pc, #92]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	4915      	ldr	r1, [pc, #84]	; (8004ff4 <HAL_GPIO_Init+0x2b0>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f47f aed0 	bne.w	8004d58 <HAL_GPIO_Init+0x14>
  }
}
 8004fb8:	bf00      	nop
 8004fba:	372c      	adds	r7, #44	; 0x2c
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	10210000 	.word	0x10210000
 8004fc8:	10110000 	.word	0x10110000
 8004fcc:	10120000 	.word	0x10120000
 8004fd0:	10310000 	.word	0x10310000
 8004fd4:	10320000 	.word	0x10320000
 8004fd8:	10220000 	.word	0x10220000
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40010000 	.word	0x40010000
 8004fe4:	40010800 	.word	0x40010800
 8004fe8:	40010c00 	.word	0x40010c00
 8004fec:	40011000 	.word	0x40011000
 8004ff0:	40011400 	.word	0x40011400
 8004ff4:	40010400 	.word	0x40010400

08004ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	887b      	ldrh	r3, [r7, #2]
 800500a:	4013      	ands	r3, r2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
 8005014:	e001      	b.n	800501a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800501a:	7bfb      	ldrb	r3, [r7, #15]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	bc80      	pop	{r7}
 8005024:	4770      	bx	lr

08005026 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	807b      	strh	r3, [r7, #2]
 8005032:	4613      	mov	r3, r2
 8005034:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005036:	787b      	ldrb	r3, [r7, #1]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800503c:	887a      	ldrh	r2, [r7, #2]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005042:	e003      	b.n	800504c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005044:	887b      	ldrh	r3, [r7, #2]
 8005046:	041a      	lsls	r2, r3, #16
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	611a      	str	r2, [r3, #16]
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr
	...

08005058 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	4603      	mov	r3, r0
 8005060:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005062:	4b08      	ldr	r3, [pc, #32]	; (8005084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005064:	695a      	ldr	r2, [r3, #20]
 8005066:	88fb      	ldrh	r3, [r7, #6]
 8005068:	4013      	ands	r3, r2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d006      	beq.n	800507c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800506e:	4a05      	ldr	r2, [pc, #20]	; (8005084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005070:	88fb      	ldrh	r3, [r7, #6]
 8005072:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005074:	88fb      	ldrh	r3, [r7, #6]
 8005076:	4618      	mov	r0, r3
 8005078:	f7fd ff36 	bl	8002ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40010400 	.word	0x40010400

08005088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e11f      	b.n	80052da <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fe feb0 	bl	8003e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2224      	movs	r2, #36	; 0x24
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0201 	bic.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050ec:	f001 fe3e 	bl	8006d6c <HAL_RCC_GetPCLK1Freq>
 80050f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	4a7b      	ldr	r2, [pc, #492]	; (80052e4 <HAL_I2C_Init+0x25c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d807      	bhi.n	800510c <HAL_I2C_Init+0x84>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4a7a      	ldr	r2, [pc, #488]	; (80052e8 <HAL_I2C_Init+0x260>)
 8005100:	4293      	cmp	r3, r2
 8005102:	bf94      	ite	ls
 8005104:	2301      	movls	r3, #1
 8005106:	2300      	movhi	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	e006      	b.n	800511a <HAL_I2C_Init+0x92>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4a77      	ldr	r2, [pc, #476]	; (80052ec <HAL_I2C_Init+0x264>)
 8005110:	4293      	cmp	r3, r2
 8005112:	bf94      	ite	ls
 8005114:	2301      	movls	r3, #1
 8005116:	2300      	movhi	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e0db      	b.n	80052da <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4a72      	ldr	r2, [pc, #456]	; (80052f0 <HAL_I2C_Init+0x268>)
 8005126:	fba2 2303 	umull	r2, r3, r2, r3
 800512a:	0c9b      	lsrs	r3, r3, #18
 800512c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	4a64      	ldr	r2, [pc, #400]	; (80052e4 <HAL_I2C_Init+0x25c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d802      	bhi.n	800515c <HAL_I2C_Init+0xd4>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	3301      	adds	r3, #1
 800515a:	e009      	b.n	8005170 <HAL_I2C_Init+0xe8>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005162:	fb02 f303 	mul.w	r3, r2, r3
 8005166:	4a63      	ldr	r2, [pc, #396]	; (80052f4 <HAL_I2C_Init+0x26c>)
 8005168:	fba2 2303 	umull	r2, r3, r2, r3
 800516c:	099b      	lsrs	r3, r3, #6
 800516e:	3301      	adds	r3, #1
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	430b      	orrs	r3, r1
 8005176:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005182:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	4956      	ldr	r1, [pc, #344]	; (80052e4 <HAL_I2C_Init+0x25c>)
 800518c:	428b      	cmp	r3, r1
 800518e:	d80d      	bhi.n	80051ac <HAL_I2C_Init+0x124>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	1e59      	subs	r1, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	fbb1 f3f3 	udiv	r3, r1, r3
 800519e:	3301      	adds	r3, #1
 80051a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	bf38      	it	cc
 80051a8:	2304      	movcc	r3, #4
 80051aa:	e04f      	b.n	800524c <HAL_I2C_Init+0x1c4>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d111      	bne.n	80051d8 <HAL_I2C_Init+0x150>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	1e58      	subs	r0, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6859      	ldr	r1, [r3, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	440b      	add	r3, r1
 80051c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051c6:	3301      	adds	r3, #1
 80051c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	bf0c      	ite	eq
 80051d0:	2301      	moveq	r3, #1
 80051d2:	2300      	movne	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	e012      	b.n	80051fe <HAL_I2C_Init+0x176>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	1e58      	subs	r0, r3, #1
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	460b      	mov	r3, r1
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	0099      	lsls	r1, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ee:	3301      	adds	r3, #1
 80051f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_I2C_Init+0x17e>
 8005202:	2301      	movs	r3, #1
 8005204:	e022      	b.n	800524c <HAL_I2C_Init+0x1c4>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10e      	bne.n	800522c <HAL_I2C_Init+0x1a4>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1e58      	subs	r0, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6859      	ldr	r1, [r3, #4]
 8005216:	460b      	mov	r3, r1
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	440b      	add	r3, r1
 800521c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005220:	3301      	adds	r3, #1
 8005222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522a:	e00f      	b.n	800524c <HAL_I2C_Init+0x1c4>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	1e58      	subs	r0, r3, #1
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6859      	ldr	r1, [r3, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	0099      	lsls	r1, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005242:	3301      	adds	r3, #1
 8005244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005248:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	6809      	ldr	r1, [r1, #0]
 8005250:	4313      	orrs	r3, r2
 8005252:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69da      	ldr	r2, [r3, #28]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800527a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6911      	ldr	r1, [r2, #16]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	68d2      	ldr	r2, [r2, #12]
 8005286:	4311      	orrs	r1, r2
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	430b      	orrs	r3, r1
 800528e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695a      	ldr	r2, [r3, #20]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	000186a0 	.word	0x000186a0
 80052e8:	001e847f 	.word	0x001e847f
 80052ec:	003d08ff 	.word	0x003d08ff
 80052f0:	431bde83 	.word	0x431bde83
 80052f4:	10624dd3 	.word	0x10624dd3

080052f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	461a      	mov	r2, r3
 8005304:	460b      	mov	r3, r1
 8005306:	817b      	strh	r3, [r7, #10]
 8005308:	4613      	mov	r3, r2
 800530a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800530c:	f7fe ff5a 	bl	80041c4 <HAL_GetTick>
 8005310:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b20      	cmp	r3, #32
 800531c:	f040 80e0 	bne.w	80054e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	2319      	movs	r3, #25
 8005326:	2201      	movs	r2, #1
 8005328:	4970      	ldr	r1, [pc, #448]	; (80054ec <HAL_I2C_Master_Transmit+0x1f4>)
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 ff6c 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005336:	2302      	movs	r3, #2
 8005338:	e0d3      	b.n	80054e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_I2C_Master_Transmit+0x50>
 8005344:	2302      	movs	r3, #2
 8005346:	e0cc      	b.n	80054e2 <HAL_I2C_Master_Transmit+0x1ea>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b01      	cmp	r3, #1
 800535c:	d007      	beq.n	800536e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0201 	orr.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800537c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2221      	movs	r2, #33	; 0x21
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2210      	movs	r2, #16
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	893a      	ldrh	r2, [r7, #8]
 800539e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4a50      	ldr	r2, [pc, #320]	; (80054f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80053ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80053b0:	8979      	ldrh	r1, [r7, #10]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	6a3a      	ldr	r2, [r7, #32]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 fd26 	bl	8005e08 <I2C_MasterRequestWrite>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e08d      	b.n	80054e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80053dc:	e066      	b.n	80054ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	6a39      	ldr	r1, [r7, #32]
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 ffe6 	bl	80063b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00d      	beq.n	800540a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d107      	bne.n	8005406 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005404:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e06b      	b.n	80054e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	781a      	ldrb	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005424:	b29b      	uxth	r3, r3
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b04      	cmp	r3, #4
 8005446:	d11b      	bne.n	8005480 <HAL_I2C_Master_Transmit+0x188>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800544c:	2b00      	cmp	r3, #0
 800544e:	d017      	beq.n	8005480 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	781a      	ldrb	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	6a39      	ldr	r1, [r7, #32]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 ffd6 	bl	8006436 <I2C_WaitOnBTFFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00d      	beq.n	80054ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	2b04      	cmp	r3, #4
 8005496:	d107      	bne.n	80054a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e01a      	b.n	80054e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d194      	bne.n	80053de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e000      	b.n	80054e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80054e0:	2302      	movs	r3, #2
  }
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	00100002 	.word	0x00100002
 80054f0:	ffff0000 	.word	0xffff0000

080054f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	4608      	mov	r0, r1
 80054fe:	4611      	mov	r1, r2
 8005500:	461a      	mov	r2, r3
 8005502:	4603      	mov	r3, r0
 8005504:	817b      	strh	r3, [r7, #10]
 8005506:	460b      	mov	r3, r1
 8005508:	813b      	strh	r3, [r7, #8]
 800550a:	4613      	mov	r3, r2
 800550c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800550e:	f7fe fe59 	bl	80041c4 <HAL_GetTick>
 8005512:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b20      	cmp	r3, #32
 800551e:	f040 80d9 	bne.w	80056d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	2319      	movs	r3, #25
 8005528:	2201      	movs	r2, #1
 800552a:	496d      	ldr	r1, [pc, #436]	; (80056e0 <HAL_I2C_Mem_Write+0x1ec>)
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fe6b 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005538:	2302      	movs	r3, #2
 800553a:	e0cc      	b.n	80056d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_I2C_Mem_Write+0x56>
 8005546:	2302      	movs	r3, #2
 8005548:	e0c5      	b.n	80056d6 <HAL_I2C_Mem_Write+0x1e2>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b01      	cmp	r3, #1
 800555e:	d007      	beq.n	8005570 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800557e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2221      	movs	r2, #33	; 0x21
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2240      	movs	r2, #64	; 0x40
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a3a      	ldr	r2, [r7, #32]
 800559a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a4d      	ldr	r2, [pc, #308]	; (80056e4 <HAL_I2C_Mem_Write+0x1f0>)
 80055b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055b2:	88f8      	ldrh	r0, [r7, #6]
 80055b4:	893a      	ldrh	r2, [r7, #8]
 80055b6:	8979      	ldrh	r1, [r7, #10]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	4603      	mov	r3, r0
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 fca2 	bl	8005f0c <I2C_RequestMemoryWrite>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d052      	beq.n	8005674 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e081      	b.n	80056d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 feec 	bl	80063b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00d      	beq.n	80055fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d107      	bne.n	80055fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e06b      	b.n	80056d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	781a      	ldrb	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b04      	cmp	r3, #4
 800563a:	d11b      	bne.n	8005674 <HAL_I2C_Mem_Write+0x180>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005640:	2b00      	cmp	r3, #0
 8005642:	d017      	beq.n	8005674 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1aa      	bne.n	80055d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fed8 	bl	8006436 <I2C_WaitOnBTFFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00d      	beq.n	80056a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	2b04      	cmp	r3, #4
 8005692:	d107      	bne.n	80056a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e016      	b.n	80056d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e000      	b.n	80056d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
  }
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	00100002 	.word	0x00100002
 80056e4:	ffff0000 	.word	0xffff0000

080056e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08c      	sub	sp, #48	; 0x30
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	4608      	mov	r0, r1
 80056f2:	4611      	mov	r1, r2
 80056f4:	461a      	mov	r2, r3
 80056f6:	4603      	mov	r3, r0
 80056f8:	817b      	strh	r3, [r7, #10]
 80056fa:	460b      	mov	r3, r1
 80056fc:	813b      	strh	r3, [r7, #8]
 80056fe:	4613      	mov	r3, r2
 8005700:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005706:	f7fe fd5d 	bl	80041c4 <HAL_GetTick>
 800570a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b20      	cmp	r3, #32
 8005716:	f040 823d 	bne.w	8005b94 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	2319      	movs	r3, #25
 8005720:	2201      	movs	r2, #1
 8005722:	4981      	ldr	r1, [pc, #516]	; (8005928 <HAL_I2C_Mem_Read+0x240>)
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fd6f 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005730:	2302      	movs	r3, #2
 8005732:	e230      	b.n	8005b96 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_I2C_Mem_Read+0x5a>
 800573e:	2302      	movs	r3, #2
 8005740:	e229      	b.n	8005b96 <HAL_I2C_Mem_Read+0x4ae>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b01      	cmp	r3, #1
 8005756:	d007      	beq.n	8005768 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005776:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2222      	movs	r2, #34	; 0x22
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2240      	movs	r2, #64	; 0x40
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005798:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4a61      	ldr	r2, [pc, #388]	; (800592c <HAL_I2C_Mem_Read+0x244>)
 80057a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057aa:	88f8      	ldrh	r0, [r7, #6]
 80057ac:	893a      	ldrh	r2, [r7, #8]
 80057ae:	8979      	ldrh	r1, [r7, #10]
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	9301      	str	r3, [sp, #4]
 80057b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	4603      	mov	r3, r0
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 fc3c 	bl	8006038 <I2C_RequestMemoryRead>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e1e5      	b.n	8005b96 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d113      	bne.n	80057fa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d2:	2300      	movs	r3, #0
 80057d4:	61fb      	str	r3, [r7, #28]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	e1b9      	b.n	8005b6e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d11d      	bne.n	800583e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005810:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005812:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005814:	2300      	movs	r3, #0
 8005816:	61bb      	str	r3, [r7, #24]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	61bb      	str	r3, [r7, #24]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005838:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800583a:	b662      	cpsie	i
 800583c:	e197      	b.n	8005b6e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005842:	2b02      	cmp	r3, #2
 8005844:	d11d      	bne.n	8005882 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005854:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005856:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800587e:	b662      	cpsie	i
 8005880:	e175      	b.n	8005b6e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005890:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005892:	2300      	movs	r3, #0
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80058a8:	e161      	b.n	8005b6e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	f200 811a 	bhi.w	8005ae8 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d123      	bne.n	8005904 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 fdf9 	bl	80064b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e162      	b.n	8005b96 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005902:	e134      	b.n	8005b6e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005908:	2b02      	cmp	r3, #2
 800590a:	d150      	bne.n	80059ae <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005912:	2200      	movs	r2, #0
 8005914:	4906      	ldr	r1, [pc, #24]	; (8005930 <HAL_I2C_Mem_Read+0x248>)
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fc76 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d008      	beq.n	8005934 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e137      	b.n	8005b96 <HAL_I2C_Mem_Read+0x4ae>
 8005926:	bf00      	nop
 8005928:	00100002 	.word	0x00100002
 800592c:	ffff0000 	.word	0xffff0000
 8005930:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005934:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005944:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005978:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059ac:	e0df      	b.n	8005b6e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	2200      	movs	r2, #0
 80059b6:	497a      	ldr	r1, [pc, #488]	; (8005ba0 <HAL_I2C_Mem_Read+0x4b8>)
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fc25 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0e6      	b.n	8005b96 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80059d8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a0c:	4b65      	ldr	r3, [pc, #404]	; (8005ba4 <HAL_I2C_Mem_Read+0x4bc>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	08db      	lsrs	r3, r3, #3
 8005a12:	4a65      	ldr	r2, [pc, #404]	; (8005ba8 <HAL_I2C_Mem_Read+0x4c0>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	0a1a      	lsrs	r2, r3, #8
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	00da      	lsls	r2, r3, #3
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d117      	bne.n	8005a62 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	f043 0220 	orr.w	r2, r3, #32
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005a54:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e099      	b.n	8005b96 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d1da      	bne.n	8005a26 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691a      	ldr	r2, [r3, #16]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ab2:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ae6:	e042      	b.n	8005b6e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fce3 	bl	80064b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e04c      	b.n	8005b96 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d118      	bne.n	8005b6e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f47f ae99 	bne.w	80058aa <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e000      	b.n	8005b96 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8005b94:	2302      	movs	r3, #2
  }
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3728      	adds	r7, #40	; 0x28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	00010004 	.word	0x00010004
 8005ba4:	20000008 	.word	0x20000008
 8005ba8:	14f8b589 	.word	0x14f8b589

08005bac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08a      	sub	sp, #40	; 0x28
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	607a      	str	r2, [r7, #4]
 8005bb6:	603b      	str	r3, [r7, #0]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005bbc:	f7fe fb02 	bl	80041c4 <HAL_GetTick>
 8005bc0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	f040 8111 	bne.w	8005df6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	2319      	movs	r3, #25
 8005bda:	2201      	movs	r2, #1
 8005bdc:	4988      	ldr	r1, [pc, #544]	; (8005e00 <HAL_I2C_IsDeviceReady+0x254>)
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fb12 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005bea:	2302      	movs	r3, #2
 8005bec:	e104      	b.n	8005df8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_I2C_IsDeviceReady+0x50>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e0fd      	b.n	8005df8 <HAL_I2C_IsDeviceReady+0x24c>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d007      	beq.n	8005c22 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0201 	orr.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2224      	movs	r2, #36	; 0x24
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4a70      	ldr	r2, [pc, #448]	; (8005e04 <HAL_I2C_IsDeviceReady+0x258>)
 8005c44:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c54:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fad0 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00d      	beq.n	8005c8a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c7c:	d103      	bne.n	8005c86 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e0b6      	b.n	8005df8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c8a:	897b      	ldrh	r3, [r7, #10]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	461a      	mov	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c98:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005c9a:	f7fe fa93 	bl	80041c4 <HAL_GetTick>
 8005c9e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	bf0c      	ite	eq
 8005cae:	2301      	moveq	r3, #1
 8005cb0:	2300      	movne	r3, #0
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc4:	bf0c      	ite	eq
 8005cc6:	2301      	moveq	r3, #1
 8005cc8:	2300      	movne	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005cce:	e025      	b.n	8005d1c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005cd0:	f7fe fa78 	bl	80041c4 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d302      	bcc.n	8005ce6 <HAL_I2C_IsDeviceReady+0x13a>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	22a0      	movs	r2, #160	; 0xa0
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	bf0c      	ite	eq
 8005cfc:	2301      	moveq	r3, #1
 8005cfe:	2300      	movne	r3, #0
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d12:	bf0c      	ite	eq
 8005d14:	2301      	moveq	r3, #1
 8005d16:	2300      	movne	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2ba0      	cmp	r3, #160	; 0xa0
 8005d26:	d005      	beq.n	8005d34 <HAL_I2C_IsDeviceReady+0x188>
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <HAL_I2C_IsDeviceReady+0x188>
 8005d2e:	7dbb      	ldrb	r3, [r7, #22]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d0cd      	beq.n	8005cd0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d129      	bne.n	8005d9e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d58:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	2319      	movs	r3, #25
 8005d76:	2201      	movs	r2, #1
 8005d78:	4921      	ldr	r1, [pc, #132]	; (8005e00 <HAL_I2C_IsDeviceReady+0x254>)
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 fa44 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e036      	b.n	8005df8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e02c      	b.n	8005df8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005db6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	2319      	movs	r3, #25
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	490f      	ldr	r1, [pc, #60]	; (8005e00 <HAL_I2C_IsDeviceReady+0x254>)
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fa20 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e012      	b.n	8005df8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	f4ff af32 	bcc.w	8005c46 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005df6:	2302      	movs	r3, #2
  }
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3720      	adds	r7, #32
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	00100002 	.word	0x00100002
 8005e04:	ffff0000 	.word	0xffff0000

08005e08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	460b      	mov	r3, r1
 8005e16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d006      	beq.n	8005e32 <I2C_MasterRequestWrite+0x2a>
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d003      	beq.n	8005e32 <I2C_MasterRequestWrite+0x2a>
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e30:	d108      	bne.n	8005e44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	e00b      	b.n	8005e5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	2b12      	cmp	r3, #18
 8005e4a:	d107      	bne.n	8005e5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f9cd 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00d      	beq.n	8005e90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e82:	d103      	bne.n	8005e8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e035      	b.n	8005efc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e98:	d108      	bne.n	8005eac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e9a:	897b      	ldrh	r3, [r7, #10]
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ea8:	611a      	str	r2, [r3, #16]
 8005eaa:	e01b      	b.n	8005ee4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005eac:	897b      	ldrh	r3, [r7, #10]
 8005eae:	11db      	asrs	r3, r3, #7
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	f003 0306 	and.w	r3, r3, #6
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	f063 030f 	orn	r3, r3, #15
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	490e      	ldr	r1, [pc, #56]	; (8005f04 <I2C_MasterRequestWrite+0xfc>)
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 f9f3 	bl	80062b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e010      	b.n	8005efc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005eda:	897b      	ldrh	r3, [r7, #10]
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	4907      	ldr	r1, [pc, #28]	; (8005f08 <I2C_MasterRequestWrite+0x100>)
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 f9e3 	bl	80062b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	00010008 	.word	0x00010008
 8005f08:	00010002 	.word	0x00010002

08005f0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af02      	add	r7, sp, #8
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	4608      	mov	r0, r1
 8005f16:	4611      	mov	r1, r2
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	817b      	strh	r3, [r7, #10]
 8005f1e:	460b      	mov	r3, r1
 8005f20:	813b      	strh	r3, [r7, #8]
 8005f22:	4613      	mov	r3, r2
 8005f24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 f960 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00d      	beq.n	8005f6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f5c:	d103      	bne.n	8005f66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e05f      	b.n	800602a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f6a:	897b      	ldrh	r3, [r7, #10]
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	461a      	mov	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	6a3a      	ldr	r2, [r7, #32]
 8005f7e:	492d      	ldr	r1, [pc, #180]	; (8006034 <I2C_RequestMemoryWrite+0x128>)
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f998 	bl	80062b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e04c      	b.n	800602a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa8:	6a39      	ldr	r1, [r7, #32]
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 fa02 	bl	80063b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00d      	beq.n	8005fd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d107      	bne.n	8005fce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e02b      	b.n	800602a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d105      	bne.n	8005fe4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fd8:	893b      	ldrh	r3, [r7, #8]
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	611a      	str	r2, [r3, #16]
 8005fe2:	e021      	b.n	8006028 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fe4:	893b      	ldrh	r3, [r7, #8]
 8005fe6:	0a1b      	lsrs	r3, r3, #8
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff4:	6a39      	ldr	r1, [r7, #32]
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 f9dc 	bl	80063b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00d      	beq.n	800601e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	2b04      	cmp	r3, #4
 8006008:	d107      	bne.n	800601a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006018:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e005      	b.n	800602a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800601e:	893b      	ldrh	r3, [r7, #8]
 8006020:	b2da      	uxtb	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	00010002 	.word	0x00010002

08006038 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af02      	add	r7, sp, #8
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	4608      	mov	r0, r1
 8006042:	4611      	mov	r1, r2
 8006044:	461a      	mov	r2, r3
 8006046:	4603      	mov	r3, r0
 8006048:	817b      	strh	r3, [r7, #10]
 800604a:	460b      	mov	r3, r1
 800604c:	813b      	strh	r3, [r7, #8]
 800604e:	4613      	mov	r3, r2
 8006050:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006060:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006070:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	2200      	movs	r2, #0
 800607a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 f8c2 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00d      	beq.n	80060a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006098:	d103      	bne.n	80060a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e0aa      	b.n	80061fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060a6:	897b      	ldrh	r3, [r7, #10]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	461a      	mov	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	6a3a      	ldr	r2, [r7, #32]
 80060ba:	4952      	ldr	r1, [pc, #328]	; (8006204 <I2C_RequestMemoryRead+0x1cc>)
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 f8fa 	bl	80062b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e097      	b.n	80061fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	617b      	str	r3, [r7, #20]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e4:	6a39      	ldr	r1, [r7, #32]
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 f964 	bl	80063b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00d      	beq.n	800610e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d107      	bne.n	800610a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006108:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e076      	b.n	80061fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800610e:	88fb      	ldrh	r3, [r7, #6]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d105      	bne.n	8006120 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006114:	893b      	ldrh	r3, [r7, #8]
 8006116:	b2da      	uxtb	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	611a      	str	r2, [r3, #16]
 800611e:	e021      	b.n	8006164 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006120:	893b      	ldrh	r3, [r7, #8]
 8006122:	0a1b      	lsrs	r3, r3, #8
 8006124:	b29b      	uxth	r3, r3
 8006126:	b2da      	uxtb	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800612e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006130:	6a39      	ldr	r1, [r7, #32]
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f93e 	bl	80063b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00d      	beq.n	800615a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	2b04      	cmp	r3, #4
 8006144:	d107      	bne.n	8006156 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006154:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e050      	b.n	80061fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800615a:	893b      	ldrh	r3, [r7, #8]
 800615c:	b2da      	uxtb	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006166:	6a39      	ldr	r1, [r7, #32]
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 f923 	bl	80063b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00d      	beq.n	8006190 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	2b04      	cmp	r3, #4
 800617a:	d107      	bne.n	800618c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800618a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e035      	b.n	80061fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800619e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 f82b 	bl	8006208 <I2C_WaitOnFlagUntilTimeout>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00d      	beq.n	80061d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c6:	d103      	bne.n	80061d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e013      	b.n	80061fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061d4:	897b      	ldrh	r3, [r7, #10]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	6a3a      	ldr	r2, [r7, #32]
 80061e8:	4906      	ldr	r1, [pc, #24]	; (8006204 <I2C_RequestMemoryRead+0x1cc>)
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 f863 	bl	80062b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	00010002 	.word	0x00010002

08006208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	4613      	mov	r3, r2
 8006216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006218:	e025      	b.n	8006266 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006220:	d021      	beq.n	8006266 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006222:	f7fd ffcf 	bl	80041c4 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d302      	bcc.n	8006238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d116      	bne.n	8006266 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	f043 0220 	orr.w	r2, r3, #32
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e023      	b.n	80062ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	0c1b      	lsrs	r3, r3, #16
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b01      	cmp	r3, #1
 800626e:	d10d      	bne.n	800628c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	43da      	mvns	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4013      	ands	r3, r2
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	bf0c      	ite	eq
 8006282:	2301      	moveq	r3, #1
 8006284:	2300      	movne	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	e00c      	b.n	80062a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	43da      	mvns	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4013      	ands	r3, r2
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf0c      	ite	eq
 800629e:	2301      	moveq	r3, #1
 80062a0:	2300      	movne	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	461a      	mov	r2, r3
 80062a6:	79fb      	ldrb	r3, [r7, #7]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d0b6      	beq.n	800621a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b084      	sub	sp, #16
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	607a      	str	r2, [r7, #4]
 80062c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062c4:	e051      	b.n	800636a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d4:	d123      	bne.n	800631e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630a:	f043 0204 	orr.w	r2, r3, #4
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e046      	b.n	80063ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006324:	d021      	beq.n	800636a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006326:	f7fd ff4d 	bl	80041c4 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	429a      	cmp	r2, r3
 8006334:	d302      	bcc.n	800633c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d116      	bne.n	800636a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	f043 0220 	orr.w	r2, r3, #32
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e020      	b.n	80063ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	0c1b      	lsrs	r3, r3, #16
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	d10c      	bne.n	800638e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	43da      	mvns	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4013      	ands	r3, r2
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	bf14      	ite	ne
 8006386:	2301      	movne	r3, #1
 8006388:	2300      	moveq	r3, #0
 800638a:	b2db      	uxtb	r3, r3
 800638c:	e00b      	b.n	80063a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	43da      	mvns	r2, r3
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	4013      	ands	r3, r2
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	bf14      	ite	ne
 80063a0:	2301      	movne	r3, #1
 80063a2:	2300      	moveq	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d18d      	bne.n	80062c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063c0:	e02d      	b.n	800641e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 f8ce 	bl	8006564 <I2C_IsAcknowledgeFailed>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e02d      	b.n	800642e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d8:	d021      	beq.n	800641e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063da:	f7fd fef3 	bl	80041c4 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d302      	bcc.n	80063f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d116      	bne.n	800641e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	f043 0220 	orr.w	r2, r3, #32
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e007      	b.n	800642e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006428:	2b80      	cmp	r3, #128	; 0x80
 800642a:	d1ca      	bne.n	80063c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006442:	e02d      	b.n	80064a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f88d 	bl	8006564 <I2C_IsAcknowledgeFailed>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e02d      	b.n	80064b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645a:	d021      	beq.n	80064a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645c:	f7fd feb2 	bl	80041c4 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	429a      	cmp	r2, r3
 800646a:	d302      	bcc.n	8006472 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d116      	bne.n	80064a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648c:	f043 0220 	orr.w	r2, r3, #32
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e007      	b.n	80064b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d1ca      	bne.n	8006444 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064c4:	e042      	b.n	800654c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d119      	bne.n	8006508 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0210 	mvn.w	r2, #16
 80064dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e029      	b.n	800655c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006508:	f7fd fe5c 	bl	80041c4 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	429a      	cmp	r2, r3
 8006516:	d302      	bcc.n	800651e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d116      	bne.n	800654c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	f043 0220 	orr.w	r2, r3, #32
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e007      	b.n	800655c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006556:	2b40      	cmp	r3, #64	; 0x40
 8006558:	d1b5      	bne.n	80064c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657a:	d11b      	bne.n	80065b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006584:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	f043 0204 	orr.w	r2, r3, #4
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e000      	b.n	80065b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr

080065c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e26c      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 8087 	beq.w	80066ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065e0:	4b92      	ldr	r3, [pc, #584]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f003 030c 	and.w	r3, r3, #12
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d00c      	beq.n	8006606 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065ec:	4b8f      	ldr	r3, [pc, #572]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f003 030c 	and.w	r3, r3, #12
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	d112      	bne.n	800661e <HAL_RCC_OscConfig+0x5e>
 80065f8:	4b8c      	ldr	r3, [pc, #560]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006604:	d10b      	bne.n	800661e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006606:	4b89      	ldr	r3, [pc, #548]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d06c      	beq.n	80066ec <HAL_RCC_OscConfig+0x12c>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d168      	bne.n	80066ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e246      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006626:	d106      	bne.n	8006636 <HAL_RCC_OscConfig+0x76>
 8006628:	4b80      	ldr	r3, [pc, #512]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a7f      	ldr	r2, [pc, #508]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 800662e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e02e      	b.n	8006694 <HAL_RCC_OscConfig+0xd4>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10c      	bne.n	8006658 <HAL_RCC_OscConfig+0x98>
 800663e:	4b7b      	ldr	r3, [pc, #492]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a7a      	ldr	r2, [pc, #488]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	4b78      	ldr	r3, [pc, #480]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a77      	ldr	r2, [pc, #476]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	e01d      	b.n	8006694 <HAL_RCC_OscConfig+0xd4>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006660:	d10c      	bne.n	800667c <HAL_RCC_OscConfig+0xbc>
 8006662:	4b72      	ldr	r3, [pc, #456]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a71      	ldr	r2, [pc, #452]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	4b6f      	ldr	r3, [pc, #444]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a6e      	ldr	r2, [pc, #440]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	e00b      	b.n	8006694 <HAL_RCC_OscConfig+0xd4>
 800667c:	4b6b      	ldr	r3, [pc, #428]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a6a      	ldr	r2, [pc, #424]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	4b68      	ldr	r3, [pc, #416]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a67      	ldr	r2, [pc, #412]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 800668e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006692:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d013      	beq.n	80066c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800669c:	f7fd fd92 	bl	80041c4 <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066a4:	f7fd fd8e 	bl	80041c4 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b64      	cmp	r3, #100	; 0x64
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e1fa      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066b6:	4b5d      	ldr	r3, [pc, #372]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0f0      	beq.n	80066a4 <HAL_RCC_OscConfig+0xe4>
 80066c2:	e014      	b.n	80066ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c4:	f7fd fd7e 	bl	80041c4 <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066cc:	f7fd fd7a 	bl	80041c4 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b64      	cmp	r3, #100	; 0x64
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e1e6      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066de:	4b53      	ldr	r3, [pc, #332]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <HAL_RCC_OscConfig+0x10c>
 80066ea:	e000      	b.n	80066ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d063      	beq.n	80067c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066fa:	4b4c      	ldr	r3, [pc, #304]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f003 030c 	and.w	r3, r3, #12
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00b      	beq.n	800671e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006706:	4b49      	ldr	r3, [pc, #292]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f003 030c 	and.w	r3, r3, #12
 800670e:	2b08      	cmp	r3, #8
 8006710:	d11c      	bne.n	800674c <HAL_RCC_OscConfig+0x18c>
 8006712:	4b46      	ldr	r3, [pc, #280]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d116      	bne.n	800674c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800671e:	4b43      	ldr	r3, [pc, #268]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <HAL_RCC_OscConfig+0x176>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d001      	beq.n	8006736 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e1ba      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006736:	4b3d      	ldr	r3, [pc, #244]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	4939      	ldr	r1, [pc, #228]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006746:	4313      	orrs	r3, r2
 8006748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800674a:	e03a      	b.n	80067c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d020      	beq.n	8006796 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006754:	4b36      	ldr	r3, [pc, #216]	; (8006830 <HAL_RCC_OscConfig+0x270>)
 8006756:	2201      	movs	r2, #1
 8006758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800675a:	f7fd fd33 	bl	80041c4 <HAL_GetTick>
 800675e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006760:	e008      	b.n	8006774 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006762:	f7fd fd2f 	bl	80041c4 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d901      	bls.n	8006774 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e19b      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006774:	4b2d      	ldr	r3, [pc, #180]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0f0      	beq.n	8006762 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006780:	4b2a      	ldr	r3, [pc, #168]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	4927      	ldr	r1, [pc, #156]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 8006790:	4313      	orrs	r3, r2
 8006792:	600b      	str	r3, [r1, #0]
 8006794:	e015      	b.n	80067c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006796:	4b26      	ldr	r3, [pc, #152]	; (8006830 <HAL_RCC_OscConfig+0x270>)
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679c:	f7fd fd12 	bl	80041c4 <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067a4:	f7fd fd0e 	bl	80041c4 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e17a      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067b6:	4b1d      	ldr	r3, [pc, #116]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f0      	bne.n	80067a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d03a      	beq.n	8006844 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d019      	beq.n	800680a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067d6:	4b17      	ldr	r3, [pc, #92]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 80067d8:	2201      	movs	r2, #1
 80067da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067dc:	f7fd fcf2 	bl	80041c4 <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067e4:	f7fd fcee 	bl	80041c4 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e15a      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067f6:	4b0d      	ldr	r3, [pc, #52]	; (800682c <HAL_RCC_OscConfig+0x26c>)
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0f0      	beq.n	80067e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006802:	2001      	movs	r0, #1
 8006804:	f000 fada 	bl	8006dbc <RCC_Delay>
 8006808:	e01c      	b.n	8006844 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800680a:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <HAL_RCC_OscConfig+0x274>)
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006810:	f7fd fcd8 	bl	80041c4 <HAL_GetTick>
 8006814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006816:	e00f      	b.n	8006838 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006818:	f7fd fcd4 	bl	80041c4 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d908      	bls.n	8006838 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e140      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
 800682a:	bf00      	nop
 800682c:	40021000 	.word	0x40021000
 8006830:	42420000 	.word	0x42420000
 8006834:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006838:	4b9e      	ldr	r3, [pc, #632]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e9      	bne.n	8006818 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80a6 	beq.w	800699e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006856:	4b97      	ldr	r3, [pc, #604]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10d      	bne.n	800687e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006862:	4b94      	ldr	r3, [pc, #592]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006864:	69db      	ldr	r3, [r3, #28]
 8006866:	4a93      	ldr	r2, [pc, #588]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800686c:	61d3      	str	r3, [r2, #28]
 800686e:	4b91      	ldr	r3, [pc, #580]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006876:	60bb      	str	r3, [r7, #8]
 8006878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800687a:	2301      	movs	r3, #1
 800687c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800687e:	4b8e      	ldr	r3, [pc, #568]	; (8006ab8 <HAL_RCC_OscConfig+0x4f8>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006886:	2b00      	cmp	r3, #0
 8006888:	d118      	bne.n	80068bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800688a:	4b8b      	ldr	r3, [pc, #556]	; (8006ab8 <HAL_RCC_OscConfig+0x4f8>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a8a      	ldr	r2, [pc, #552]	; (8006ab8 <HAL_RCC_OscConfig+0x4f8>)
 8006890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006896:	f7fd fc95 	bl	80041c4 <HAL_GetTick>
 800689a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800689e:	f7fd fc91 	bl	80041c4 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b64      	cmp	r3, #100	; 0x64
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e0fd      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b0:	4b81      	ldr	r3, [pc, #516]	; (8006ab8 <HAL_RCC_OscConfig+0x4f8>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0f0      	beq.n	800689e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d106      	bne.n	80068d2 <HAL_RCC_OscConfig+0x312>
 80068c4:	4b7b      	ldr	r3, [pc, #492]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	4a7a      	ldr	r2, [pc, #488]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 80068ca:	f043 0301 	orr.w	r3, r3, #1
 80068ce:	6213      	str	r3, [r2, #32]
 80068d0:	e02d      	b.n	800692e <HAL_RCC_OscConfig+0x36e>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d10c      	bne.n	80068f4 <HAL_RCC_OscConfig+0x334>
 80068da:	4b76      	ldr	r3, [pc, #472]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	4a75      	ldr	r2, [pc, #468]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 80068e0:	f023 0301 	bic.w	r3, r3, #1
 80068e4:	6213      	str	r3, [r2, #32]
 80068e6:	4b73      	ldr	r3, [pc, #460]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	4a72      	ldr	r2, [pc, #456]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 80068ec:	f023 0304 	bic.w	r3, r3, #4
 80068f0:	6213      	str	r3, [r2, #32]
 80068f2:	e01c      	b.n	800692e <HAL_RCC_OscConfig+0x36e>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	2b05      	cmp	r3, #5
 80068fa:	d10c      	bne.n	8006916 <HAL_RCC_OscConfig+0x356>
 80068fc:	4b6d      	ldr	r3, [pc, #436]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	4a6c      	ldr	r2, [pc, #432]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006902:	f043 0304 	orr.w	r3, r3, #4
 8006906:	6213      	str	r3, [r2, #32]
 8006908:	4b6a      	ldr	r3, [pc, #424]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	4a69      	ldr	r2, [pc, #420]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 800690e:	f043 0301 	orr.w	r3, r3, #1
 8006912:	6213      	str	r3, [r2, #32]
 8006914:	e00b      	b.n	800692e <HAL_RCC_OscConfig+0x36e>
 8006916:	4b67      	ldr	r3, [pc, #412]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	4a66      	ldr	r2, [pc, #408]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 800691c:	f023 0301 	bic.w	r3, r3, #1
 8006920:	6213      	str	r3, [r2, #32]
 8006922:	4b64      	ldr	r3, [pc, #400]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	4a63      	ldr	r2, [pc, #396]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006928:	f023 0304 	bic.w	r3, r3, #4
 800692c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d015      	beq.n	8006962 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006936:	f7fd fc45 	bl	80041c4 <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800693c:	e00a      	b.n	8006954 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800693e:	f7fd fc41 	bl	80041c4 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	f241 3288 	movw	r2, #5000	; 0x1388
 800694c:	4293      	cmp	r3, r2
 800694e:	d901      	bls.n	8006954 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e0ab      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006954:	4b57      	ldr	r3, [pc, #348]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0ee      	beq.n	800693e <HAL_RCC_OscConfig+0x37e>
 8006960:	e014      	b.n	800698c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006962:	f7fd fc2f 	bl	80041c4 <HAL_GetTick>
 8006966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006968:	e00a      	b.n	8006980 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800696a:	f7fd fc2b 	bl	80041c4 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	f241 3288 	movw	r2, #5000	; 0x1388
 8006978:	4293      	cmp	r3, r2
 800697a:	d901      	bls.n	8006980 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e095      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006980:	4b4c      	ldr	r3, [pc, #304]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1ee      	bne.n	800696a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800698c:	7dfb      	ldrb	r3, [r7, #23]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d105      	bne.n	800699e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006992:	4b48      	ldr	r3, [pc, #288]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	4a47      	ldr	r2, [pc, #284]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800699c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 8081 	beq.w	8006aaa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069a8:	4b42      	ldr	r3, [pc, #264]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f003 030c 	and.w	r3, r3, #12
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d061      	beq.n	8006a78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d146      	bne.n	8006a4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069bc:	4b3f      	ldr	r3, [pc, #252]	; (8006abc <HAL_RCC_OscConfig+0x4fc>)
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c2:	f7fd fbff 	bl	80041c4 <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069c8:	e008      	b.n	80069dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ca:	f7fd fbfb 	bl	80041c4 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d901      	bls.n	80069dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e067      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069dc:	4b35      	ldr	r3, [pc, #212]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1f0      	bne.n	80069ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f0:	d108      	bne.n	8006a04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80069f2:	4b30      	ldr	r3, [pc, #192]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	492d      	ldr	r1, [pc, #180]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a04:	4b2b      	ldr	r3, [pc, #172]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a19      	ldr	r1, [r3, #32]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	430b      	orrs	r3, r1
 8006a16:	4927      	ldr	r1, [pc, #156]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a1c:	4b27      	ldr	r3, [pc, #156]	; (8006abc <HAL_RCC_OscConfig+0x4fc>)
 8006a1e:	2201      	movs	r2, #1
 8006a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a22:	f7fd fbcf 	bl	80041c4 <HAL_GetTick>
 8006a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a28:	e008      	b.n	8006a3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a2a:	f7fd fbcb 	bl	80041c4 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d901      	bls.n	8006a3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e037      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a3c:	4b1d      	ldr	r3, [pc, #116]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0f0      	beq.n	8006a2a <HAL_RCC_OscConfig+0x46a>
 8006a48:	e02f      	b.n	8006aaa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a4a:	4b1c      	ldr	r3, [pc, #112]	; (8006abc <HAL_RCC_OscConfig+0x4fc>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a50:	f7fd fbb8 	bl	80041c4 <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a58:	f7fd fbb4 	bl	80041c4 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e020      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a6a:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f0      	bne.n	8006a58 <HAL_RCC_OscConfig+0x498>
 8006a76:	e018      	b.n	8006aaa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e013      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a84:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <HAL_RCC_OscConfig+0x4f4>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d106      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d001      	beq.n	8006aaa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	40007000 	.word	0x40007000
 8006abc:	42420060 	.word	0x42420060

08006ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0d0      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ad4:	4b6a      	ldr	r3, [pc, #424]	; (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d910      	bls.n	8006b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ae2:	4b67      	ldr	r3, [pc, #412]	; (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f023 0207 	bic.w	r2, r3, #7
 8006aea:	4965      	ldr	r1, [pc, #404]	; (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006af2:	4b63      	ldr	r3, [pc, #396]	; (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d001      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e0b8      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d020      	beq.n	8006b52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b1c:	4b59      	ldr	r3, [pc, #356]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a58      	ldr	r2, [pc, #352]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0308 	and.w	r3, r3, #8
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b34:	4b53      	ldr	r3, [pc, #332]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	4a52      	ldr	r2, [pc, #328]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006b3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b40:	4b50      	ldr	r3, [pc, #320]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	494d      	ldr	r1, [pc, #308]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d040      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d107      	bne.n	8006b76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b66:	4b47      	ldr	r3, [pc, #284]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d115      	bne.n	8006b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e07f      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d107      	bne.n	8006b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b7e:	4b41      	ldr	r3, [pc, #260]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d109      	bne.n	8006b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e073      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b8e:	4b3d      	ldr	r3, [pc, #244]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e06b      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b9e:	4b39      	ldr	r3, [pc, #228]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f023 0203 	bic.w	r2, r3, #3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	4936      	ldr	r1, [pc, #216]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bb0:	f7fd fb08 	bl	80041c4 <HAL_GetTick>
 8006bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bb6:	e00a      	b.n	8006bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bb8:	f7fd fb04 	bl	80041c4 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e053      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bce:	4b2d      	ldr	r3, [pc, #180]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f003 020c 	and.w	r2, r3, #12
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d1eb      	bne.n	8006bb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006be0:	4b27      	ldr	r3, [pc, #156]	; (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d210      	bcs.n	8006c10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bee:	4b24      	ldr	r3, [pc, #144]	; (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f023 0207 	bic.w	r2, r3, #7
 8006bf6:	4922      	ldr	r1, [pc, #136]	; (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfe:	4b20      	ldr	r3, [pc, #128]	; (8006c80 <HAL_RCC_ClockConfig+0x1c0>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d001      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e032      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d008      	beq.n	8006c2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c1c:	4b19      	ldr	r3, [pc, #100]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	4916      	ldr	r1, [pc, #88]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c3a:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	490e      	ldr	r1, [pc, #56]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c4e:	f000 f821 	bl	8006c94 <HAL_RCC_GetSysClockFreq>
 8006c52:	4601      	mov	r1, r0
 8006c54:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <HAL_RCC_ClockConfig+0x1c4>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	091b      	lsrs	r3, r3, #4
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	4a0a      	ldr	r2, [pc, #40]	; (8006c88 <HAL_RCC_ClockConfig+0x1c8>)
 8006c60:	5cd3      	ldrb	r3, [r2, r3]
 8006c62:	fa21 f303 	lsr.w	r3, r1, r3
 8006c66:	4a09      	ldr	r2, [pc, #36]	; (8006c8c <HAL_RCC_ClockConfig+0x1cc>)
 8006c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c6a:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <HAL_RCC_ClockConfig+0x1d0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fd fa78 	bl	8004164 <HAL_InitTick>

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40022000 	.word	0x40022000
 8006c84:	40021000 	.word	0x40021000
 8006c88:	0800ac78 	.word	0x0800ac78
 8006c8c:	20000008 	.word	0x20000008
 8006c90:	2000000c 	.word	0x2000000c

08006c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c94:	b490      	push	{r4, r7}
 8006c96:	b08a      	sub	sp, #40	; 0x28
 8006c98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006c9a:	4b2a      	ldr	r3, [pc, #168]	; (8006d44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006c9c:	1d3c      	adds	r4, r7, #4
 8006c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006ca4:	4b28      	ldr	r3, [pc, #160]	; (8006d48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	61fb      	str	r3, [r7, #28]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61bb      	str	r3, [r7, #24]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006cbe:	4b23      	ldr	r3, [pc, #140]	; (8006d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	f003 030c 	and.w	r3, r3, #12
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d002      	beq.n	8006cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8006cce:	2b08      	cmp	r3, #8
 8006cd0:	d003      	beq.n	8006cda <HAL_RCC_GetSysClockFreq+0x46>
 8006cd2:	e02d      	b.n	8006d30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cd4:	4b1e      	ldr	r3, [pc, #120]	; (8006d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006cd6:	623b      	str	r3, [r7, #32]
      break;
 8006cd8:	e02d      	b.n	8006d36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	0c9b      	lsrs	r3, r3, #18
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006cec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d013      	beq.n	8006d20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006cf8:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	0c5b      	lsrs	r3, r3, #17
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006d06:	4413      	add	r3, r2
 8006d08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006d0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	4a0f      	ldr	r2, [pc, #60]	; (8006d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d12:	fb02 f203 	mul.w	r2, r2, r3
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d1e:	e004      	b.n	8006d2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	4a0c      	ldr	r2, [pc, #48]	; (8006d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d24:	fb02 f303 	mul.w	r3, r2, r3
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	623b      	str	r3, [r7, #32]
      break;
 8006d2e:	e002      	b.n	8006d36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d30:	4b07      	ldr	r3, [pc, #28]	; (8006d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d32:	623b      	str	r3, [r7, #32]
      break;
 8006d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d36:	6a3b      	ldr	r3, [r7, #32]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3728      	adds	r7, #40	; 0x28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bc90      	pop	{r4, r7}
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	0800a4d8 	.word	0x0800a4d8
 8006d48:	0800a4e8 	.word	0x0800a4e8
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	007a1200 	.word	0x007a1200
 8006d54:	003d0900 	.word	0x003d0900

08006d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d5c:	4b02      	ldr	r3, [pc, #8]	; (8006d68 <HAL_RCC_GetHCLKFreq+0x10>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr
 8006d68:	20000008 	.word	0x20000008

08006d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d70:	f7ff fff2 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 8006d74:	4601      	mov	r1, r0
 8006d76:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	0a1b      	lsrs	r3, r3, #8
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	4a03      	ldr	r2, [pc, #12]	; (8006d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d82:	5cd3      	ldrb	r3, [r2, r3]
 8006d84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40021000 	.word	0x40021000
 8006d90:	0800ac88 	.word	0x0800ac88

08006d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d98:	f7ff ffde 	bl	8006d58 <HAL_RCC_GetHCLKFreq>
 8006d9c:	4601      	mov	r1, r0
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	0adb      	lsrs	r3, r3, #11
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	4a03      	ldr	r2, [pc, #12]	; (8006db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006daa:	5cd3      	ldrb	r3, [r2, r3]
 8006dac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	40021000 	.word	0x40021000
 8006db8:	0800ac88 	.word	0x0800ac88

08006dbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006dc4:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <RCC_Delay+0x34>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a0a      	ldr	r2, [pc, #40]	; (8006df4 <RCC_Delay+0x38>)
 8006dca:	fba2 2303 	umull	r2, r3, r2, r3
 8006dce:	0a5b      	lsrs	r3, r3, #9
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	fb02 f303 	mul.w	r3, r2, r3
 8006dd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006dd8:	bf00      	nop
  }
  while (Delay --);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	1e5a      	subs	r2, r3, #1
 8006dde:	60fa      	str	r2, [r7, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1f9      	bne.n	8006dd8 <RCC_Delay+0x1c>
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	20000008 	.word	0x20000008
 8006df4:	10624dd3 	.word	0x10624dd3

08006df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	613b      	str	r3, [r7, #16]
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d07d      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006e14:	2300      	movs	r3, #0
 8006e16:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e18:	4b4f      	ldr	r3, [pc, #316]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10d      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e24:	4b4c      	ldr	r3, [pc, #304]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	4a4b      	ldr	r2, [pc, #300]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e2e:	61d3      	str	r3, [r2, #28]
 8006e30:	4b49      	ldr	r3, [pc, #292]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e38:	60bb      	str	r3, [r7, #8]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e40:	4b46      	ldr	r3, [pc, #280]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d118      	bne.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e4c:	4b43      	ldr	r3, [pc, #268]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a42      	ldr	r2, [pc, #264]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e58:	f7fd f9b4 	bl	80041c4 <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e5e:	e008      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e60:	f7fd f9b0 	bl	80041c4 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b64      	cmp	r3, #100	; 0x64
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e06d      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e72:	4b3a      	ldr	r3, [pc, #232]	; (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0f0      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e7e:	4b36      	ldr	r3, [pc, #216]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d02e      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d027      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e9c:	4b2e      	ldr	r3, [pc, #184]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ea6:	4b2e      	ldr	r3, [pc, #184]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006eac:	4b2c      	ldr	r3, [pc, #176]	; (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006eb2:	4a29      	ldr	r2, [pc, #164]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d014      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ec2:	f7fd f97f 	bl	80041c4 <HAL_GetTick>
 8006ec6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ec8:	e00a      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eca:	f7fd f97b 	bl	80041c4 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e036      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee0:	4b1d      	ldr	r3, [pc, #116]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0ee      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006eec:	4b1a      	ldr	r3, [pc, #104]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	4917      	ldr	r1, [pc, #92]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d105      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f04:	4b14      	ldr	r3, [pc, #80]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	4a13      	ldr	r2, [pc, #76]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d008      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f1c:	4b0e      	ldr	r3, [pc, #56]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	490b      	ldr	r1, [pc, #44]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0310 	and.w	r3, r3, #16
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d008      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f3a:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	4904      	ldr	r1, [pc, #16]	; (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	40021000 	.word	0x40021000
 8006f5c:	40007000 	.word	0x40007000
 8006f60:	42420440 	.word	0x42420440

08006f64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b08d      	sub	sp, #52	; 0x34
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006f6c:	4b55      	ldr	r3, [pc, #340]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006f6e:	f107 040c 	add.w	r4, r7, #12
 8006f72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006f78:	4b53      	ldr	r3, [pc, #332]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
 8006f82:	2300      	movs	r3, #0
 8006f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f86:	2300      	movs	r3, #0
 8006f88:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d07f      	beq.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006f98:	2b10      	cmp	r3, #16
 8006f9a:	d002      	beq.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d048      	beq.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006fa0:	e08b      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8006fa2:	4b4a      	ldr	r3, [pc, #296]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006fa8:	4b48      	ldr	r3, [pc, #288]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d07f      	beq.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	0c9b      	lsrs	r3, r3, #18
 8006fb8:	f003 030f 	and.w	r3, r3, #15
 8006fbc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006fc6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d018      	beq.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006fd2:	4b3e      	ldr	r3, [pc, #248]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	0c5b      	lsrs	r3, r3, #17
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00d      	beq.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006ff2:	4a37      	ldr	r2, [pc, #220]	; (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	fb02 f303 	mul.w	r3, r2, r3
 8007000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007002:	e004      	b.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	4a33      	ldr	r2, [pc, #204]	; (80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007008:	fb02 f303 	mul.w	r3, r2, r3
 800700c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800700e:	4b2f      	ldr	r3, [pc, #188]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800701a:	d102      	bne.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007020:	e048      	b.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	4a2c      	ldr	r2, [pc, #176]	; (80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8007028:	fba2 2303 	umull	r2, r3, r2, r3
 800702c:	085b      	lsrs	r3, r3, #1
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007030:	e040      	b.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8007032:	4b26      	ldr	r3, [pc, #152]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800703e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007042:	d108      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800704e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007052:	62bb      	str	r3, [r7, #40]	; 0x28
 8007054:	e01f      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007060:	d109      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8007062:	4b1a      	ldr	r3, [pc, #104]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800706e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007072:	62bb      	str	r3, [r7, #40]	; 0x28
 8007074:	e00f      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800707c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007080:	d11a      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8007082:	4b12      	ldr	r3, [pc, #72]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d014      	beq.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800708e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007092:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007094:	e010      	b.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8007096:	e00f      	b.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007098:	f7ff fe7c 	bl	8006d94 <HAL_RCC_GetPCLK2Freq>
 800709c:	4602      	mov	r2, r0
 800709e:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	0b9b      	lsrs	r3, r3, #14
 80070a4:	f003 0303 	and.w	r3, r3, #3
 80070a8:	3301      	adds	r3, #1
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070b2:	e002      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80070b4:	bf00      	nop
 80070b6:	e000      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80070b8:	bf00      	nop
    }
  }
  return (frequency);
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3734      	adds	r7, #52	; 0x34
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd90      	pop	{r4, r7, pc}
 80070c4:	0800a4ec 	.word	0x0800a4ec
 80070c8:	0800a4fc 	.word	0x0800a4fc
 80070cc:	40021000 	.word	0x40021000
 80070d0:	007a1200 	.word	0x007a1200
 80070d4:	003d0900 	.word	0x003d0900
 80070d8:	aaaaaaab 	.word	0xaaaaaaab

080070dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e041      	b.n	8007172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d106      	bne.n	8007108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7fc fec6 	bl	8003e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3304      	adds	r3, #4
 8007118:	4619      	mov	r1, r3
 800711a:	4610      	mov	r0, r2
 800711c:	f000 fadc 	bl	80076d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b01      	cmp	r3, #1
 800718e:	d001      	beq.n	8007194 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e032      	b.n	80071fa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a18      	ldr	r2, [pc, #96]	; (8007204 <HAL_TIM_Base_Start+0x88>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00e      	beq.n	80071c4 <HAL_TIM_Base_Start+0x48>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ae:	d009      	beq.n	80071c4 <HAL_TIM_Base_Start+0x48>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a14      	ldr	r2, [pc, #80]	; (8007208 <HAL_TIM_Base_Start+0x8c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d004      	beq.n	80071c4 <HAL_TIM_Base_Start+0x48>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a13      	ldr	r2, [pc, #76]	; (800720c <HAL_TIM_Base_Start+0x90>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d111      	bne.n	80071e8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b06      	cmp	r3, #6
 80071d4:	d010      	beq.n	80071f8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f042 0201 	orr.w	r2, r2, #1
 80071e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071e6:	e007      	b.n	80071f8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0201 	orr.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	bc80      	pop	{r7}
 8007202:	4770      	bx	lr
 8007204:	40012c00 	.word	0x40012c00
 8007208:	40000400 	.word	0x40000400
 800720c:	40000800 	.word	0x40000800

08007210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b01      	cmp	r3, #1
 8007222:	d001      	beq.n	8007228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e03a      	b.n	800729e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0201 	orr.w	r2, r2, #1
 800723e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a18      	ldr	r2, [pc, #96]	; (80072a8 <HAL_TIM_Base_Start_IT+0x98>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00e      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x58>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007252:	d009      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x58>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a14      	ldr	r2, [pc, #80]	; (80072ac <HAL_TIM_Base_Start_IT+0x9c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d004      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x58>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a13      	ldr	r2, [pc, #76]	; (80072b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d111      	bne.n	800728c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b06      	cmp	r3, #6
 8007278:	d010      	beq.n	800729c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0201 	orr.w	r2, r2, #1
 8007288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728a:	e007      	b.n	800729c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0201 	orr.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr
 80072a8:	40012c00 	.word	0x40012c00
 80072ac:	40000400 	.word	0x40000400
 80072b0:	40000800 	.word	0x40000800

080072b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0201 	bic.w	r2, r2, #1
 80072ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6a1a      	ldr	r2, [r3, #32]
 80072d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80072d6:	4013      	ands	r3, r2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10f      	bne.n	80072fc <HAL_TIM_Base_Stop_IT+0x48>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6a1a      	ldr	r2, [r3, #32]
 80072e2:	f240 4344 	movw	r3, #1092	; 0x444
 80072e6:	4013      	ands	r3, r2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d107      	bne.n	80072fc <HAL_TIM_Base_Stop_IT+0x48>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0201 	bic.w	r2, r2, #1
 80072fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	bc80      	pop	{r7}
 800730e:	4770      	bx	lr

08007310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b02      	cmp	r3, #2
 8007324:	d122      	bne.n	800736c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b02      	cmp	r3, #2
 8007332:	d11b      	bne.n	800736c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f06f 0202 	mvn.w	r2, #2
 800733c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f9a4 	bl	80076a0 <HAL_TIM_IC_CaptureCallback>
 8007358:	e005      	b.n	8007366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f997 	bl	800768e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f9a6 	bl	80076b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f003 0304 	and.w	r3, r3, #4
 8007376:	2b04      	cmp	r3, #4
 8007378:	d122      	bne.n	80073c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b04      	cmp	r3, #4
 8007386:	d11b      	bne.n	80073c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f06f 0204 	mvn.w	r2, #4
 8007390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2202      	movs	r2, #2
 8007396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f97a 	bl	80076a0 <HAL_TIM_IC_CaptureCallback>
 80073ac:	e005      	b.n	80073ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f96d 	bl	800768e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f97c 	bl	80076b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	f003 0308 	and.w	r3, r3, #8
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d122      	bne.n	8007414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f003 0308 	and.w	r3, r3, #8
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d11b      	bne.n	8007414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f06f 0208 	mvn.w	r2, #8
 80073e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2204      	movs	r2, #4
 80073ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f950 	bl	80076a0 <HAL_TIM_IC_CaptureCallback>
 8007400:	e005      	b.n	800740e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f943 	bl	800768e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f952 	bl	80076b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	f003 0310 	and.w	r3, r3, #16
 800741e:	2b10      	cmp	r3, #16
 8007420:	d122      	bne.n	8007468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b10      	cmp	r3, #16
 800742e:	d11b      	bne.n	8007468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0210 	mvn.w	r2, #16
 8007438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2208      	movs	r2, #8
 800743e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f926 	bl	80076a0 <HAL_TIM_IC_CaptureCallback>
 8007454:	e005      	b.n	8007462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f919 	bl	800768e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f928 	bl	80076b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b01      	cmp	r3, #1
 8007474:	d10e      	bne.n	8007494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b01      	cmp	r3, #1
 8007482:	d107      	bne.n	8007494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f06f 0201 	mvn.w	r2, #1
 800748c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fb fd54 	bl	8002f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800749e:	2b80      	cmp	r3, #128	; 0x80
 80074a0:	d10e      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ac:	2b80      	cmp	r3, #128	; 0x80
 80074ae:	d107      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa6b 	bl	8007996 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ca:	2b40      	cmp	r3, #64	; 0x40
 80074cc:	d10e      	bne.n	80074ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d8:	2b40      	cmp	r3, #64	; 0x40
 80074da:	d107      	bne.n	80074ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f8ec 	bl	80076c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	d10e      	bne.n	8007518 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	f003 0320 	and.w	r3, r3, #32
 8007504:	2b20      	cmp	r3, #32
 8007506:	d107      	bne.n	8007518 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f06f 0220 	mvn.w	r2, #32
 8007510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa36 	bl	8007984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007518:	bf00      	nop
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <HAL_TIM_ConfigClockSource+0x18>
 8007534:	2302      	movs	r3, #2
 8007536:	e0a6      	b.n	8007686 <HAL_TIM_ConfigClockSource+0x166>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007556:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800755e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b40      	cmp	r3, #64	; 0x40
 800756e:	d067      	beq.n	8007640 <HAL_TIM_ConfigClockSource+0x120>
 8007570:	2b40      	cmp	r3, #64	; 0x40
 8007572:	d80b      	bhi.n	800758c <HAL_TIM_ConfigClockSource+0x6c>
 8007574:	2b10      	cmp	r3, #16
 8007576:	d073      	beq.n	8007660 <HAL_TIM_ConfigClockSource+0x140>
 8007578:	2b10      	cmp	r3, #16
 800757a:	d802      	bhi.n	8007582 <HAL_TIM_ConfigClockSource+0x62>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d06f      	beq.n	8007660 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007580:	e078      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007582:	2b20      	cmp	r3, #32
 8007584:	d06c      	beq.n	8007660 <HAL_TIM_ConfigClockSource+0x140>
 8007586:	2b30      	cmp	r3, #48	; 0x30
 8007588:	d06a      	beq.n	8007660 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800758a:	e073      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800758c:	2b70      	cmp	r3, #112	; 0x70
 800758e:	d00d      	beq.n	80075ac <HAL_TIM_ConfigClockSource+0x8c>
 8007590:	2b70      	cmp	r3, #112	; 0x70
 8007592:	d804      	bhi.n	800759e <HAL_TIM_ConfigClockSource+0x7e>
 8007594:	2b50      	cmp	r3, #80	; 0x50
 8007596:	d033      	beq.n	8007600 <HAL_TIM_ConfigClockSource+0xe0>
 8007598:	2b60      	cmp	r3, #96	; 0x60
 800759a:	d041      	beq.n	8007620 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800759c:	e06a      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800759e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a2:	d066      	beq.n	8007672 <HAL_TIM_ConfigClockSource+0x152>
 80075a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a8:	d017      	beq.n	80075da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80075aa:	e063      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6818      	ldr	r0, [r3, #0]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	6899      	ldr	r1, [r3, #8]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f000 f965 	bl	800788a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	609a      	str	r2, [r3, #8]
      break;
 80075d8:	e04c      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6818      	ldr	r0, [r3, #0]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	6899      	ldr	r1, [r3, #8]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f000 f94e 	bl	800788a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075fc:	609a      	str	r2, [r3, #8]
      break;
 80075fe:	e039      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6818      	ldr	r0, [r3, #0]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	6859      	ldr	r1, [r3, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	461a      	mov	r2, r3
 800760e:	f000 f8c5 	bl	800779c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2150      	movs	r1, #80	; 0x50
 8007618:	4618      	mov	r0, r3
 800761a:	f000 f91c 	bl	8007856 <TIM_ITRx_SetConfig>
      break;
 800761e:	e029      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6818      	ldr	r0, [r3, #0]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	6859      	ldr	r1, [r3, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	461a      	mov	r2, r3
 800762e:	f000 f8e3 	bl	80077f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2160      	movs	r1, #96	; 0x60
 8007638:	4618      	mov	r0, r3
 800763a:	f000 f90c 	bl	8007856 <TIM_ITRx_SetConfig>
      break;
 800763e:	e019      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	6859      	ldr	r1, [r3, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	461a      	mov	r2, r3
 800764e:	f000 f8a5 	bl	800779c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2140      	movs	r1, #64	; 0x40
 8007658:	4618      	mov	r0, r3
 800765a:	f000 f8fc 	bl	8007856 <TIM_ITRx_SetConfig>
      break;
 800765e:	e009      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4619      	mov	r1, r3
 800766a:	4610      	mov	r0, r2
 800766c:	f000 f8f3 	bl	8007856 <TIM_ITRx_SetConfig>
        break;
 8007670:	e000      	b.n	8007674 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr

080076a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr

080076b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr

080076c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr
	...

080076d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a29      	ldr	r2, [pc, #164]	; (8007790 <TIM_Base_SetConfig+0xb8>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00b      	beq.n	8007708 <TIM_Base_SetConfig+0x30>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f6:	d007      	beq.n	8007708 <TIM_Base_SetConfig+0x30>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a26      	ldr	r2, [pc, #152]	; (8007794 <TIM_Base_SetConfig+0xbc>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_Base_SetConfig+0x30>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a25      	ldr	r2, [pc, #148]	; (8007798 <TIM_Base_SetConfig+0xc0>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d108      	bne.n	800771a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a1c      	ldr	r2, [pc, #112]	; (8007790 <TIM_Base_SetConfig+0xb8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00b      	beq.n	800773a <TIM_Base_SetConfig+0x62>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007728:	d007      	beq.n	800773a <TIM_Base_SetConfig+0x62>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a19      	ldr	r2, [pc, #100]	; (8007794 <TIM_Base_SetConfig+0xbc>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d003      	beq.n	800773a <TIM_Base_SetConfig+0x62>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a18      	ldr	r2, [pc, #96]	; (8007798 <TIM_Base_SetConfig+0xc0>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d108      	bne.n	800774c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4313      	orrs	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	4313      	orrs	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a07      	ldr	r2, [pc, #28]	; (8007790 <TIM_Base_SetConfig+0xb8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d103      	bne.n	8007780 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	615a      	str	r2, [r3, #20]
}
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	bc80      	pop	{r7}
 800778e:	4770      	bx	lr
 8007790:	40012c00 	.word	0x40012c00
 8007794:	40000400 	.word	0x40000400
 8007798:	40000800 	.word	0x40000800

0800779c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f023 0201 	bic.w	r2, r3, #1
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	011b      	lsls	r3, r3, #4
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f023 030a 	bic.w	r3, r3, #10
 80077d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	4313      	orrs	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	621a      	str	r2, [r3, #32]
}
 80077ee:	bf00      	nop
 80077f0:	371c      	adds	r7, #28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bc80      	pop	{r7}
 80077f6:	4770      	bx	lr

080077f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	f023 0210 	bic.w	r2, r3, #16
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007822:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	031b      	lsls	r3, r3, #12
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	4313      	orrs	r3, r2
 800782c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007834:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	011b      	lsls	r3, r3, #4
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4313      	orrs	r3, r2
 800783e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	621a      	str	r2, [r3, #32]
}
 800784c:	bf00      	nop
 800784e:	371c      	adds	r7, #28
 8007850:	46bd      	mov	sp, r7
 8007852:	bc80      	pop	{r7}
 8007854:	4770      	bx	lr

08007856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007856:	b480      	push	{r7}
 8007858:	b085      	sub	sp, #20
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4313      	orrs	r3, r2
 8007874:	f043 0307 	orr.w	r3, r3, #7
 8007878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	609a      	str	r2, [r3, #8]
}
 8007880:	bf00      	nop
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	bc80      	pop	{r7}
 8007888:	4770      	bx	lr

0800788a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800788a:	b480      	push	{r7}
 800788c:	b087      	sub	sp, #28
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	607a      	str	r2, [r7, #4]
 8007896:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	021a      	lsls	r2, r3, #8
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	431a      	orrs	r2, r3
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	609a      	str	r2, [r3, #8]
}
 80078be:	bf00      	nop
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr

080078c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d101      	bne.n	80078e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078dc:	2302      	movs	r3, #2
 80078de:	e046      	b.n	800796e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a16      	ldr	r2, [pc, #88]	; (8007978 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d00e      	beq.n	8007942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792c:	d009      	beq.n	8007942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a12      	ldr	r2, [pc, #72]	; (800797c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d004      	beq.n	8007942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a10      	ldr	r2, [pc, #64]	; (8007980 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d10c      	bne.n	800795c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	4313      	orrs	r3, r2
 8007952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	bc80      	pop	{r7}
 8007976:	4770      	bx	lr
 8007978:	40012c00 	.word	0x40012c00
 800797c:	40000400 	.word	0x40000400
 8007980:	40000800 	.word	0x40000800

08007984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	bc80      	pop	{r7}
 8007994:	4770      	bx	lr

08007996 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc80      	pop	{r7}
 80079a6:	4770      	bx	lr

080079a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e03f      	b.n	8007a3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d106      	bne.n	80079d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7fc fa9a 	bl	8003f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2224      	movs	r2, #36	; 0x24
 80079d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fb39 	bl	8008064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	691a      	ldr	r2, [r3, #16]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	695a      	ldr	r2, [r3, #20]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68da      	ldr	r2, [r3, #12]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2220      	movs	r2, #32
 8007a34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b08a      	sub	sp, #40	; 0x28
 8007a46:	af02      	add	r7, sp, #8
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	603b      	str	r3, [r7, #0]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b20      	cmp	r3, #32
 8007a60:	d17c      	bne.n	8007b5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_UART_Transmit+0x2c>
 8007a68:	88fb      	ldrh	r3, [r7, #6]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e075      	b.n	8007b5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d101      	bne.n	8007a80 <HAL_UART_Transmit+0x3e>
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e06e      	b.n	8007b5e <HAL_UART_Transmit+0x11c>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2221      	movs	r2, #33	; 0x21
 8007a92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007a96:	f7fc fb95 	bl	80041c4 <HAL_GetTick>
 8007a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	88fa      	ldrh	r2, [r7, #6]
 8007aa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	88fa      	ldrh	r2, [r7, #6]
 8007aa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab0:	d108      	bne.n	8007ac4 <HAL_UART_Transmit+0x82>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d104      	bne.n	8007ac4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	61bb      	str	r3, [r7, #24]
 8007ac2:	e003      	b.n	8007acc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007ad4:	e02a      	b.n	8007b2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2200      	movs	r2, #0
 8007ade:	2180      	movs	r1, #128	; 0x80
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f95c 	bl	8007d9e <UART_WaitOnFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007aec:	2303      	movs	r3, #3
 8007aee:	e036      	b.n	8007b5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10b      	bne.n	8007b0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	3302      	adds	r3, #2
 8007b0a:	61bb      	str	r3, [r7, #24]
 8007b0c:	e007      	b.n	8007b1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	781a      	ldrb	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1cf      	bne.n	8007ad6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2140      	movs	r1, #64	; 0x40
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f92c 	bl	8007d9e <UART_WaitOnFlagUntilTimeout>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e006      	b.n	8007b5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e000      	b.n	8007b5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007b5c:	2302      	movs	r3, #2
  }
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3720      	adds	r7, #32
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	f003 030f 	and.w	r3, r3, #15
 8007b96:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10d      	bne.n	8007bba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	f003 0320 	and.w	r3, r3, #32
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d008      	beq.n	8007bba <HAL_UART_IRQHandler+0x52>
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f9d5 	bl	8007f62 <UART_Receive_IT>
      return;
 8007bb8:	e0d1      	b.n	8007d5e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 80b0 	beq.w	8007d22 <HAL_UART_IRQHandler+0x1ba>
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d105      	bne.n	8007bd8 <HAL_UART_IRQHandler+0x70>
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 80a5 	beq.w	8007d22 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x90>
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d005      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf0:	f043 0201 	orr.w	r2, r3, #1
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00a      	beq.n	8007c18 <HAL_UART_IRQHandler+0xb0>
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d005      	beq.n	8007c18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c10:	f043 0202 	orr.w	r2, r3, #2
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	f003 0302 	and.w	r3, r3, #2
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <HAL_UART_IRQHandler+0xd0>
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d005      	beq.n	8007c38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c30:	f043 0204 	orr.w	r2, r3, #4
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	f003 0308 	and.w	r3, r3, #8
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00f      	beq.n	8007c62 <HAL_UART_IRQHandler+0xfa>
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	f003 0320 	and.w	r3, r3, #32
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <HAL_UART_IRQHandler+0xee>
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d005      	beq.n	8007c62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5a:	f043 0208 	orr.w	r2, r3, #8
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d078      	beq.n	8007d5c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	f003 0320 	and.w	r3, r3, #32
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d007      	beq.n	8007c84 <HAL_UART_IRQHandler+0x11c>
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f96f 	bl	8007f62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	bf14      	ite	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	2300      	moveq	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d102      	bne.n	8007cac <HAL_UART_IRQHandler+0x144>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d031      	beq.n	8007d10 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f8c0 	bl	8007e32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d023      	beq.n	8007d08 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	695a      	ldr	r2, [r3, #20]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cce:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d013      	beq.n	8007d00 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cdc:	4a21      	ldr	r2, [pc, #132]	; (8007d64 <HAL_UART_IRQHandler+0x1fc>)
 8007cde:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fc ffb7 	bl	8004c58 <HAL_DMA_Abort_IT>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d016      	beq.n	8007d1e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cfe:	e00e      	b.n	8007d1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f843 	bl	8007d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d06:	e00a      	b.n	8007d1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f83f 	bl	8007d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d0e:	e006      	b.n	8007d1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f83b 	bl	8007d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007d1c:	e01e      	b.n	8007d5c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1e:	bf00      	nop
    return;
 8007d20:	e01c      	b.n	8007d5c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d008      	beq.n	8007d3e <HAL_UART_IRQHandler+0x1d6>
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f8ac 	bl	8007e94 <UART_Transmit_IT>
    return;
 8007d3c:	e00f      	b.n	8007d5e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <HAL_UART_IRQHandler+0x1f6>
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f8ed 	bl	8007f32 <UART_EndTransmit_IT>
    return;
 8007d58:	bf00      	nop
 8007d5a:	e000      	b.n	8007d5e <HAL_UART_IRQHandler+0x1f6>
    return;
 8007d5c:	bf00      	nop
  }
}
 8007d5e:	3720      	adds	r7, #32
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	08007e6d 	.word	0x08007e6d

08007d68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bc80      	pop	{r7}
 8007d78:	4770      	bx	lr

08007d7a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b083      	sub	sp, #12
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bc80      	pop	{r7}
 8007d8a:	4770      	bx	lr

08007d8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bc80      	pop	{r7}
 8007d9c:	4770      	bx	lr

08007d9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	60f8      	str	r0, [r7, #12]
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	603b      	str	r3, [r7, #0]
 8007daa:	4613      	mov	r3, r2
 8007dac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dae:	e02c      	b.n	8007e0a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db6:	d028      	beq.n	8007e0a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d007      	beq.n	8007dce <UART_WaitOnFlagUntilTimeout+0x30>
 8007dbe:	f7fc fa01 	bl	80041c4 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d21d      	bcs.n	8007e0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68da      	ldr	r2, [r3, #12]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ddc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	695a      	ldr	r2, [r3, #20]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 0201 	bic.w	r2, r2, #1
 8007dec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2220      	movs	r2, #32
 8007df2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e00f      	b.n	8007e2a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4013      	ands	r3, r2
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	bf0c      	ite	eq
 8007e1a:	2301      	moveq	r3, #1
 8007e1c:	2300      	movne	r3, #0
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	461a      	mov	r2, r3
 8007e22:	79fb      	ldrb	r3, [r7, #7]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d0c3      	beq.n	8007db0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e48:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	695a      	ldr	r2, [r3, #20]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 0201 	bic.w	r2, r2, #1
 8007e58:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr

08007e6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f7ff ff80 	bl	8007d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b21      	cmp	r3, #33	; 0x21
 8007ea6:	d13e      	bne.n	8007f26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb0:	d114      	bne.n	8007edc <UART_Transmit_IT+0x48>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d110      	bne.n	8007edc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ece:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	1c9a      	adds	r2, r3, #2
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	621a      	str	r2, [r3, #32]
 8007eda:	e008      	b.n	8007eee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	1c59      	adds	r1, r3, #1
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	6211      	str	r1, [r2, #32]
 8007ee6:	781a      	ldrb	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	4619      	mov	r1, r3
 8007efc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10f      	bne.n	8007f22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68da      	ldr	r2, [r3, #12]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	e000      	b.n	8007f28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f26:	2302      	movs	r3, #2
  }
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bc80      	pop	{r7}
 8007f30:	4770      	bx	lr

08007f32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68da      	ldr	r2, [r3, #12]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7ff ff08 	bl	8007d68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b22      	cmp	r3, #34	; 0x22
 8007f74:	d170      	bne.n	8008058 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7e:	d117      	bne.n	8007fb0 <UART_Receive_IT+0x4e>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d113      	bne.n	8007fb0 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f90:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa8:	1c9a      	adds	r2, r3, #2
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	629a      	str	r2, [r3, #40]	; 0x28
 8007fae:	e026      	b.n	8007ffe <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fc2:	d007      	beq.n	8007fd4 <UART_Receive_IT+0x72>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10a      	bne.n	8007fe2 <UART_Receive_IT+0x80>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d106      	bne.n	8007fe2 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	701a      	strb	r2, [r3, #0]
 8007fe0:	e008      	b.n	8007ff4 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff8:	1c5a      	adds	r2, r3, #1
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008002:	b29b      	uxth	r3, r3
 8008004:	3b01      	subs	r3, #1
 8008006:	b29b      	uxth	r3, r3
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	4619      	mov	r1, r3
 800800c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800800e:	2b00      	cmp	r3, #0
 8008010:	d120      	bne.n	8008054 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68da      	ldr	r2, [r3, #12]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0220 	bic.w	r2, r2, #32
 8008020:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008030:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	695a      	ldr	r2, [r3, #20]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0201 	bic.w	r2, r2, #1
 8008040:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2220      	movs	r2, #32
 8008046:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7ff fe95 	bl	8007d7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	e002      	b.n	800805a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	e000      	b.n	800805a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8008058:	2302      	movs	r3, #2
  }
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
	...

08008064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68da      	ldr	r2, [r3, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	431a      	orrs	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800809e:	f023 030c 	bic.w	r3, r3, #12
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	6812      	ldr	r2, [r2, #0]
 80080a6:	68b9      	ldr	r1, [r7, #8]
 80080a8:	430b      	orrs	r3, r1
 80080aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	699a      	ldr	r2, [r3, #24]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a2c      	ldr	r2, [pc, #176]	; (8008178 <UART_SetConfig+0x114>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d103      	bne.n	80080d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80080cc:	f7fe fe62 	bl	8006d94 <HAL_RCC_GetPCLK2Freq>
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	e002      	b.n	80080da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80080d4:	f7fe fe4a 	bl	8006d6c <HAL_RCC_GetPCLK1Freq>
 80080d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	4613      	mov	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	009a      	lsls	r2, r3, #2
 80080e4:	441a      	add	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f0:	4a22      	ldr	r2, [pc, #136]	; (800817c <UART_SetConfig+0x118>)
 80080f2:	fba2 2303 	umull	r2, r3, r2, r3
 80080f6:	095b      	lsrs	r3, r3, #5
 80080f8:	0119      	lsls	r1, r3, #4
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	4613      	mov	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	009a      	lsls	r2, r3, #2
 8008104:	441a      	add	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008110:	4b1a      	ldr	r3, [pc, #104]	; (800817c <UART_SetConfig+0x118>)
 8008112:	fba3 0302 	umull	r0, r3, r3, r2
 8008116:	095b      	lsrs	r3, r3, #5
 8008118:	2064      	movs	r0, #100	; 0x64
 800811a:	fb00 f303 	mul.w	r3, r0, r3
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	011b      	lsls	r3, r3, #4
 8008122:	3332      	adds	r3, #50	; 0x32
 8008124:	4a15      	ldr	r2, [pc, #84]	; (800817c <UART_SetConfig+0x118>)
 8008126:	fba2 2303 	umull	r2, r3, r2, r3
 800812a:	095b      	lsrs	r3, r3, #5
 800812c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008130:	4419      	add	r1, r3
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	009a      	lsls	r2, r3, #2
 800813c:	441a      	add	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	fbb2 f2f3 	udiv	r2, r2, r3
 8008148:	4b0c      	ldr	r3, [pc, #48]	; (800817c <UART_SetConfig+0x118>)
 800814a:	fba3 0302 	umull	r0, r3, r3, r2
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	2064      	movs	r0, #100	; 0x64
 8008152:	fb00 f303 	mul.w	r3, r0, r3
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	3332      	adds	r3, #50	; 0x32
 800815c:	4a07      	ldr	r2, [pc, #28]	; (800817c <UART_SetConfig+0x118>)
 800815e:	fba2 2303 	umull	r2, r3, r2, r3
 8008162:	095b      	lsrs	r3, r3, #5
 8008164:	f003 020f 	and.w	r2, r3, #15
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	440a      	add	r2, r1
 800816e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	40013800 	.word	0x40013800
 800817c:	51eb851f 	.word	0x51eb851f

08008180 <__errno>:
 8008180:	4b01      	ldr	r3, [pc, #4]	; (8008188 <__errno+0x8>)
 8008182:	6818      	ldr	r0, [r3, #0]
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	20000014 	.word	0x20000014

0800818c <__libc_init_array>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	2500      	movs	r5, #0
 8008190:	4e0c      	ldr	r6, [pc, #48]	; (80081c4 <__libc_init_array+0x38>)
 8008192:	4c0d      	ldr	r4, [pc, #52]	; (80081c8 <__libc_init_array+0x3c>)
 8008194:	1ba4      	subs	r4, r4, r6
 8008196:	10a4      	asrs	r4, r4, #2
 8008198:	42a5      	cmp	r5, r4
 800819a:	d109      	bne.n	80081b0 <__libc_init_array+0x24>
 800819c:	f002 f87e 	bl	800a29c <_init>
 80081a0:	2500      	movs	r5, #0
 80081a2:	4e0a      	ldr	r6, [pc, #40]	; (80081cc <__libc_init_array+0x40>)
 80081a4:	4c0a      	ldr	r4, [pc, #40]	; (80081d0 <__libc_init_array+0x44>)
 80081a6:	1ba4      	subs	r4, r4, r6
 80081a8:	10a4      	asrs	r4, r4, #2
 80081aa:	42a5      	cmp	r5, r4
 80081ac:	d105      	bne.n	80081ba <__libc_init_array+0x2e>
 80081ae:	bd70      	pop	{r4, r5, r6, pc}
 80081b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081b4:	4798      	blx	r3
 80081b6:	3501      	adds	r5, #1
 80081b8:	e7ee      	b.n	8008198 <__libc_init_array+0xc>
 80081ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081be:	4798      	blx	r3
 80081c0:	3501      	adds	r5, #1
 80081c2:	e7f2      	b.n	80081aa <__libc_init_array+0x1e>
 80081c4:	0800aef8 	.word	0x0800aef8
 80081c8:	0800aef8 	.word	0x0800aef8
 80081cc:	0800aef8 	.word	0x0800aef8
 80081d0:	0800aefc 	.word	0x0800aefc

080081d4 <memset>:
 80081d4:	4603      	mov	r3, r0
 80081d6:	4402      	add	r2, r0
 80081d8:	4293      	cmp	r3, r2
 80081da:	d100      	bne.n	80081de <memset+0xa>
 80081dc:	4770      	bx	lr
 80081de:	f803 1b01 	strb.w	r1, [r3], #1
 80081e2:	e7f9      	b.n	80081d8 <memset+0x4>

080081e4 <__cvt>:
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ea:	461e      	mov	r6, r3
 80081ec:	bfbb      	ittet	lt
 80081ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80081f2:	461e      	movlt	r6, r3
 80081f4:	2300      	movge	r3, #0
 80081f6:	232d      	movlt	r3, #45	; 0x2d
 80081f8:	b088      	sub	sp, #32
 80081fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80081fc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8008200:	f027 0720 	bic.w	r7, r7, #32
 8008204:	2f46      	cmp	r7, #70	; 0x46
 8008206:	4614      	mov	r4, r2
 8008208:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800820a:	700b      	strb	r3, [r1, #0]
 800820c:	d004      	beq.n	8008218 <__cvt+0x34>
 800820e:	2f45      	cmp	r7, #69	; 0x45
 8008210:	d100      	bne.n	8008214 <__cvt+0x30>
 8008212:	3501      	adds	r5, #1
 8008214:	2302      	movs	r3, #2
 8008216:	e000      	b.n	800821a <__cvt+0x36>
 8008218:	2303      	movs	r3, #3
 800821a:	aa07      	add	r2, sp, #28
 800821c:	9204      	str	r2, [sp, #16]
 800821e:	aa06      	add	r2, sp, #24
 8008220:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008224:	e9cd 3500 	strd	r3, r5, [sp]
 8008228:	4622      	mov	r2, r4
 800822a:	4633      	mov	r3, r6
 800822c:	f000 fcf8 	bl	8008c20 <_dtoa_r>
 8008230:	2f47      	cmp	r7, #71	; 0x47
 8008232:	4680      	mov	r8, r0
 8008234:	d102      	bne.n	800823c <__cvt+0x58>
 8008236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008238:	07db      	lsls	r3, r3, #31
 800823a:	d526      	bpl.n	800828a <__cvt+0xa6>
 800823c:	2f46      	cmp	r7, #70	; 0x46
 800823e:	eb08 0905 	add.w	r9, r8, r5
 8008242:	d111      	bne.n	8008268 <__cvt+0x84>
 8008244:	f898 3000 	ldrb.w	r3, [r8]
 8008248:	2b30      	cmp	r3, #48	; 0x30
 800824a:	d10a      	bne.n	8008262 <__cvt+0x7e>
 800824c:	2200      	movs	r2, #0
 800824e:	2300      	movs	r3, #0
 8008250:	4620      	mov	r0, r4
 8008252:	4631      	mov	r1, r6
 8008254:	f7f8 fba8 	bl	80009a8 <__aeabi_dcmpeq>
 8008258:	b918      	cbnz	r0, 8008262 <__cvt+0x7e>
 800825a:	f1c5 0501 	rsb	r5, r5, #1
 800825e:	f8ca 5000 	str.w	r5, [sl]
 8008262:	f8da 3000 	ldr.w	r3, [sl]
 8008266:	4499      	add	r9, r3
 8008268:	2200      	movs	r2, #0
 800826a:	2300      	movs	r3, #0
 800826c:	4620      	mov	r0, r4
 800826e:	4631      	mov	r1, r6
 8008270:	f7f8 fb9a 	bl	80009a8 <__aeabi_dcmpeq>
 8008274:	b938      	cbnz	r0, 8008286 <__cvt+0xa2>
 8008276:	2230      	movs	r2, #48	; 0x30
 8008278:	9b07      	ldr	r3, [sp, #28]
 800827a:	454b      	cmp	r3, r9
 800827c:	d205      	bcs.n	800828a <__cvt+0xa6>
 800827e:	1c59      	adds	r1, r3, #1
 8008280:	9107      	str	r1, [sp, #28]
 8008282:	701a      	strb	r2, [r3, #0]
 8008284:	e7f8      	b.n	8008278 <__cvt+0x94>
 8008286:	f8cd 901c 	str.w	r9, [sp, #28]
 800828a:	4640      	mov	r0, r8
 800828c:	9b07      	ldr	r3, [sp, #28]
 800828e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008290:	eba3 0308 	sub.w	r3, r3, r8
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	b008      	add	sp, #32
 8008298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800829c <__exponent>:
 800829c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800829e:	2900      	cmp	r1, #0
 80082a0:	bfb4      	ite	lt
 80082a2:	232d      	movlt	r3, #45	; 0x2d
 80082a4:	232b      	movge	r3, #43	; 0x2b
 80082a6:	4604      	mov	r4, r0
 80082a8:	bfb8      	it	lt
 80082aa:	4249      	neglt	r1, r1
 80082ac:	2909      	cmp	r1, #9
 80082ae:	f804 2b02 	strb.w	r2, [r4], #2
 80082b2:	7043      	strb	r3, [r0, #1]
 80082b4:	dd21      	ble.n	80082fa <__exponent+0x5e>
 80082b6:	f10d 0307 	add.w	r3, sp, #7
 80082ba:	461f      	mov	r7, r3
 80082bc:	260a      	movs	r6, #10
 80082be:	fb91 f5f6 	sdiv	r5, r1, r6
 80082c2:	fb06 1115 	mls	r1, r6, r5, r1
 80082c6:	2d09      	cmp	r5, #9
 80082c8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80082cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80082d0:	f103 32ff 	add.w	r2, r3, #4294967295
 80082d4:	4629      	mov	r1, r5
 80082d6:	dc09      	bgt.n	80082ec <__exponent+0x50>
 80082d8:	3130      	adds	r1, #48	; 0x30
 80082da:	3b02      	subs	r3, #2
 80082dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80082e0:	42bb      	cmp	r3, r7
 80082e2:	4622      	mov	r2, r4
 80082e4:	d304      	bcc.n	80082f0 <__exponent+0x54>
 80082e6:	1a10      	subs	r0, r2, r0
 80082e8:	b003      	add	sp, #12
 80082ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ec:	4613      	mov	r3, r2
 80082ee:	e7e6      	b.n	80082be <__exponent+0x22>
 80082f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082f4:	f804 2b01 	strb.w	r2, [r4], #1
 80082f8:	e7f2      	b.n	80082e0 <__exponent+0x44>
 80082fa:	2330      	movs	r3, #48	; 0x30
 80082fc:	4419      	add	r1, r3
 80082fe:	7083      	strb	r3, [r0, #2]
 8008300:	1d02      	adds	r2, r0, #4
 8008302:	70c1      	strb	r1, [r0, #3]
 8008304:	e7ef      	b.n	80082e6 <__exponent+0x4a>
	...

08008308 <_printf_float>:
 8008308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	b091      	sub	sp, #68	; 0x44
 800830e:	460c      	mov	r4, r1
 8008310:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008312:	4693      	mov	fp, r2
 8008314:	461e      	mov	r6, r3
 8008316:	4605      	mov	r5, r0
 8008318:	f001 fa36 	bl	8009788 <_localeconv_r>
 800831c:	6803      	ldr	r3, [r0, #0]
 800831e:	4618      	mov	r0, r3
 8008320:	9309      	str	r3, [sp, #36]	; 0x24
 8008322:	f7f7 ff15 	bl	8000150 <strlen>
 8008326:	2300      	movs	r3, #0
 8008328:	930e      	str	r3, [sp, #56]	; 0x38
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	900a      	str	r0, [sp, #40]	; 0x28
 800832e:	3307      	adds	r3, #7
 8008330:	f023 0307 	bic.w	r3, r3, #7
 8008334:	f103 0208 	add.w	r2, r3, #8
 8008338:	f894 8018 	ldrb.w	r8, [r4, #24]
 800833c:	f8d4 a000 	ldr.w	sl, [r4]
 8008340:	603a      	str	r2, [r7, #0]
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800834a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800834e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008352:	930b      	str	r3, [sp, #44]	; 0x2c
 8008354:	f04f 32ff 	mov.w	r2, #4294967295
 8008358:	4ba6      	ldr	r3, [pc, #664]	; (80085f4 <_printf_float+0x2ec>)
 800835a:	4638      	mov	r0, r7
 800835c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800835e:	f7f8 fb55 	bl	8000a0c <__aeabi_dcmpun>
 8008362:	bb68      	cbnz	r0, 80083c0 <_printf_float+0xb8>
 8008364:	f04f 32ff 	mov.w	r2, #4294967295
 8008368:	4ba2      	ldr	r3, [pc, #648]	; (80085f4 <_printf_float+0x2ec>)
 800836a:	4638      	mov	r0, r7
 800836c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800836e:	f7f8 fb2f 	bl	80009d0 <__aeabi_dcmple>
 8008372:	bb28      	cbnz	r0, 80083c0 <_printf_float+0xb8>
 8008374:	2200      	movs	r2, #0
 8008376:	2300      	movs	r3, #0
 8008378:	4638      	mov	r0, r7
 800837a:	4649      	mov	r1, r9
 800837c:	f7f8 fb1e 	bl	80009bc <__aeabi_dcmplt>
 8008380:	b110      	cbz	r0, 8008388 <_printf_float+0x80>
 8008382:	232d      	movs	r3, #45	; 0x2d
 8008384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008388:	4f9b      	ldr	r7, [pc, #620]	; (80085f8 <_printf_float+0x2f0>)
 800838a:	4b9c      	ldr	r3, [pc, #624]	; (80085fc <_printf_float+0x2f4>)
 800838c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008390:	bf98      	it	ls
 8008392:	461f      	movls	r7, r3
 8008394:	2303      	movs	r3, #3
 8008396:	f04f 0900 	mov.w	r9, #0
 800839a:	6123      	str	r3, [r4, #16]
 800839c:	f02a 0304 	bic.w	r3, sl, #4
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	9600      	str	r6, [sp, #0]
 80083a4:	465b      	mov	r3, fp
 80083a6:	aa0f      	add	r2, sp, #60	; 0x3c
 80083a8:	4621      	mov	r1, r4
 80083aa:	4628      	mov	r0, r5
 80083ac:	f000 f9e2 	bl	8008774 <_printf_common>
 80083b0:	3001      	adds	r0, #1
 80083b2:	f040 8090 	bne.w	80084d6 <_printf_float+0x1ce>
 80083b6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ba:	b011      	add	sp, #68	; 0x44
 80083bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c0:	463a      	mov	r2, r7
 80083c2:	464b      	mov	r3, r9
 80083c4:	4638      	mov	r0, r7
 80083c6:	4649      	mov	r1, r9
 80083c8:	f7f8 fb20 	bl	8000a0c <__aeabi_dcmpun>
 80083cc:	b110      	cbz	r0, 80083d4 <_printf_float+0xcc>
 80083ce:	4f8c      	ldr	r7, [pc, #560]	; (8008600 <_printf_float+0x2f8>)
 80083d0:	4b8c      	ldr	r3, [pc, #560]	; (8008604 <_printf_float+0x2fc>)
 80083d2:	e7db      	b.n	800838c <_printf_float+0x84>
 80083d4:	6863      	ldr	r3, [r4, #4]
 80083d6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80083da:	1c59      	adds	r1, r3, #1
 80083dc:	a80d      	add	r0, sp, #52	; 0x34
 80083de:	a90e      	add	r1, sp, #56	; 0x38
 80083e0:	d140      	bne.n	8008464 <_printf_float+0x15c>
 80083e2:	2306      	movs	r3, #6
 80083e4:	6063      	str	r3, [r4, #4]
 80083e6:	f04f 0c00 	mov.w	ip, #0
 80083ea:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80083ee:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80083f2:	6863      	ldr	r3, [r4, #4]
 80083f4:	6022      	str	r2, [r4, #0]
 80083f6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	463a      	mov	r2, r7
 80083fe:	464b      	mov	r3, r9
 8008400:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008404:	4628      	mov	r0, r5
 8008406:	f7ff feed 	bl	80081e4 <__cvt>
 800840a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800840e:	2b47      	cmp	r3, #71	; 0x47
 8008410:	4607      	mov	r7, r0
 8008412:	d109      	bne.n	8008428 <_printf_float+0x120>
 8008414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008416:	1cd8      	adds	r0, r3, #3
 8008418:	db02      	blt.n	8008420 <_printf_float+0x118>
 800841a:	6862      	ldr	r2, [r4, #4]
 800841c:	4293      	cmp	r3, r2
 800841e:	dd47      	ble.n	80084b0 <_printf_float+0x1a8>
 8008420:	f1a8 0802 	sub.w	r8, r8, #2
 8008424:	fa5f f888 	uxtb.w	r8, r8
 8008428:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800842c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800842e:	d824      	bhi.n	800847a <_printf_float+0x172>
 8008430:	3901      	subs	r1, #1
 8008432:	4642      	mov	r2, r8
 8008434:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008438:	910d      	str	r1, [sp, #52]	; 0x34
 800843a:	f7ff ff2f 	bl	800829c <__exponent>
 800843e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008440:	4681      	mov	r9, r0
 8008442:	1813      	adds	r3, r2, r0
 8008444:	2a01      	cmp	r2, #1
 8008446:	6123      	str	r3, [r4, #16]
 8008448:	dc02      	bgt.n	8008450 <_printf_float+0x148>
 800844a:	6822      	ldr	r2, [r4, #0]
 800844c:	07d1      	lsls	r1, r2, #31
 800844e:	d501      	bpl.n	8008454 <_printf_float+0x14c>
 8008450:	3301      	adds	r3, #1
 8008452:	6123      	str	r3, [r4, #16]
 8008454:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0a2      	beq.n	80083a2 <_printf_float+0x9a>
 800845c:	232d      	movs	r3, #45	; 0x2d
 800845e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008462:	e79e      	b.n	80083a2 <_printf_float+0x9a>
 8008464:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8008468:	f000 816e 	beq.w	8008748 <_printf_float+0x440>
 800846c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008470:	d1b9      	bne.n	80083e6 <_printf_float+0xde>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1b7      	bne.n	80083e6 <_printf_float+0xde>
 8008476:	2301      	movs	r3, #1
 8008478:	e7b4      	b.n	80083e4 <_printf_float+0xdc>
 800847a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800847e:	d119      	bne.n	80084b4 <_printf_float+0x1ac>
 8008480:	2900      	cmp	r1, #0
 8008482:	6863      	ldr	r3, [r4, #4]
 8008484:	dd0c      	ble.n	80084a0 <_printf_float+0x198>
 8008486:	6121      	str	r1, [r4, #16]
 8008488:	b913      	cbnz	r3, 8008490 <_printf_float+0x188>
 800848a:	6822      	ldr	r2, [r4, #0]
 800848c:	07d2      	lsls	r2, r2, #31
 800848e:	d502      	bpl.n	8008496 <_printf_float+0x18e>
 8008490:	3301      	adds	r3, #1
 8008492:	440b      	add	r3, r1
 8008494:	6123      	str	r3, [r4, #16]
 8008496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008498:	f04f 0900 	mov.w	r9, #0
 800849c:	65a3      	str	r3, [r4, #88]	; 0x58
 800849e:	e7d9      	b.n	8008454 <_printf_float+0x14c>
 80084a0:	b913      	cbnz	r3, 80084a8 <_printf_float+0x1a0>
 80084a2:	6822      	ldr	r2, [r4, #0]
 80084a4:	07d0      	lsls	r0, r2, #31
 80084a6:	d501      	bpl.n	80084ac <_printf_float+0x1a4>
 80084a8:	3302      	adds	r3, #2
 80084aa:	e7f3      	b.n	8008494 <_printf_float+0x18c>
 80084ac:	2301      	movs	r3, #1
 80084ae:	e7f1      	b.n	8008494 <_printf_float+0x18c>
 80084b0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80084b4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80084b8:	4293      	cmp	r3, r2
 80084ba:	db05      	blt.n	80084c8 <_printf_float+0x1c0>
 80084bc:	6822      	ldr	r2, [r4, #0]
 80084be:	6123      	str	r3, [r4, #16]
 80084c0:	07d1      	lsls	r1, r2, #31
 80084c2:	d5e8      	bpl.n	8008496 <_printf_float+0x18e>
 80084c4:	3301      	adds	r3, #1
 80084c6:	e7e5      	b.n	8008494 <_printf_float+0x18c>
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	bfcc      	ite	gt
 80084cc:	2301      	movgt	r3, #1
 80084ce:	f1c3 0302 	rsble	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	e7de      	b.n	8008494 <_printf_float+0x18c>
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	055a      	lsls	r2, r3, #21
 80084da:	d407      	bmi.n	80084ec <_printf_float+0x1e4>
 80084dc:	6923      	ldr	r3, [r4, #16]
 80084de:	463a      	mov	r2, r7
 80084e0:	4659      	mov	r1, fp
 80084e2:	4628      	mov	r0, r5
 80084e4:	47b0      	blx	r6
 80084e6:	3001      	adds	r0, #1
 80084e8:	d129      	bne.n	800853e <_printf_float+0x236>
 80084ea:	e764      	b.n	80083b6 <_printf_float+0xae>
 80084ec:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80084f0:	f240 80d7 	bls.w	80086a2 <_printf_float+0x39a>
 80084f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084f8:	2200      	movs	r2, #0
 80084fa:	2300      	movs	r3, #0
 80084fc:	f7f8 fa54 	bl	80009a8 <__aeabi_dcmpeq>
 8008500:	b388      	cbz	r0, 8008566 <_printf_float+0x25e>
 8008502:	2301      	movs	r3, #1
 8008504:	4a40      	ldr	r2, [pc, #256]	; (8008608 <_printf_float+0x300>)
 8008506:	4659      	mov	r1, fp
 8008508:	4628      	mov	r0, r5
 800850a:	47b0      	blx	r6
 800850c:	3001      	adds	r0, #1
 800850e:	f43f af52 	beq.w	80083b6 <_printf_float+0xae>
 8008512:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008516:	429a      	cmp	r2, r3
 8008518:	db02      	blt.n	8008520 <_printf_float+0x218>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	07d8      	lsls	r0, r3, #31
 800851e:	d50e      	bpl.n	800853e <_printf_float+0x236>
 8008520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008524:	4659      	mov	r1, fp
 8008526:	4628      	mov	r0, r5
 8008528:	47b0      	blx	r6
 800852a:	3001      	adds	r0, #1
 800852c:	f43f af43 	beq.w	80083b6 <_printf_float+0xae>
 8008530:	2700      	movs	r7, #0
 8008532:	f104 081a 	add.w	r8, r4, #26
 8008536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008538:	3b01      	subs	r3, #1
 800853a:	42bb      	cmp	r3, r7
 800853c:	dc09      	bgt.n	8008552 <_printf_float+0x24a>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	079f      	lsls	r7, r3, #30
 8008542:	f100 80fd 	bmi.w	8008740 <_printf_float+0x438>
 8008546:	68e0      	ldr	r0, [r4, #12]
 8008548:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800854a:	4298      	cmp	r0, r3
 800854c:	bfb8      	it	lt
 800854e:	4618      	movlt	r0, r3
 8008550:	e733      	b.n	80083ba <_printf_float+0xb2>
 8008552:	2301      	movs	r3, #1
 8008554:	4642      	mov	r2, r8
 8008556:	4659      	mov	r1, fp
 8008558:	4628      	mov	r0, r5
 800855a:	47b0      	blx	r6
 800855c:	3001      	adds	r0, #1
 800855e:	f43f af2a 	beq.w	80083b6 <_printf_float+0xae>
 8008562:	3701      	adds	r7, #1
 8008564:	e7e7      	b.n	8008536 <_printf_float+0x22e>
 8008566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008568:	2b00      	cmp	r3, #0
 800856a:	dc2b      	bgt.n	80085c4 <_printf_float+0x2bc>
 800856c:	2301      	movs	r3, #1
 800856e:	4a26      	ldr	r2, [pc, #152]	; (8008608 <_printf_float+0x300>)
 8008570:	4659      	mov	r1, fp
 8008572:	4628      	mov	r0, r5
 8008574:	47b0      	blx	r6
 8008576:	3001      	adds	r0, #1
 8008578:	f43f af1d 	beq.w	80083b6 <_printf_float+0xae>
 800857c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800857e:	b923      	cbnz	r3, 800858a <_printf_float+0x282>
 8008580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008582:	b913      	cbnz	r3, 800858a <_printf_float+0x282>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	07d9      	lsls	r1, r3, #31
 8008588:	d5d9      	bpl.n	800853e <_printf_float+0x236>
 800858a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800858e:	4659      	mov	r1, fp
 8008590:	4628      	mov	r0, r5
 8008592:	47b0      	blx	r6
 8008594:	3001      	adds	r0, #1
 8008596:	f43f af0e 	beq.w	80083b6 <_printf_float+0xae>
 800859a:	f04f 0800 	mov.w	r8, #0
 800859e:	f104 091a 	add.w	r9, r4, #26
 80085a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085a4:	425b      	negs	r3, r3
 80085a6:	4543      	cmp	r3, r8
 80085a8:	dc01      	bgt.n	80085ae <_printf_float+0x2a6>
 80085aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085ac:	e797      	b.n	80084de <_printf_float+0x1d6>
 80085ae:	2301      	movs	r3, #1
 80085b0:	464a      	mov	r2, r9
 80085b2:	4659      	mov	r1, fp
 80085b4:	4628      	mov	r0, r5
 80085b6:	47b0      	blx	r6
 80085b8:	3001      	adds	r0, #1
 80085ba:	f43f aefc 	beq.w	80083b6 <_printf_float+0xae>
 80085be:	f108 0801 	add.w	r8, r8, #1
 80085c2:	e7ee      	b.n	80085a2 <_printf_float+0x29a>
 80085c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085c8:	429a      	cmp	r2, r3
 80085ca:	bfa8      	it	ge
 80085cc:	461a      	movge	r2, r3
 80085ce:	2a00      	cmp	r2, #0
 80085d0:	4690      	mov	r8, r2
 80085d2:	dd07      	ble.n	80085e4 <_printf_float+0x2dc>
 80085d4:	4613      	mov	r3, r2
 80085d6:	4659      	mov	r1, fp
 80085d8:	463a      	mov	r2, r7
 80085da:	4628      	mov	r0, r5
 80085dc:	47b0      	blx	r6
 80085de:	3001      	adds	r0, #1
 80085e0:	f43f aee9 	beq.w	80083b6 <_printf_float+0xae>
 80085e4:	f104 031a 	add.w	r3, r4, #26
 80085e8:	f04f 0a00 	mov.w	sl, #0
 80085ec:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80085f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f2:	e015      	b.n	8008620 <_printf_float+0x318>
 80085f4:	7fefffff 	.word	0x7fefffff
 80085f8:	0800ac94 	.word	0x0800ac94
 80085fc:	0800ac90 	.word	0x0800ac90
 8008600:	0800ac9c 	.word	0x0800ac9c
 8008604:	0800ac98 	.word	0x0800ac98
 8008608:	0800aca0 	.word	0x0800aca0
 800860c:	2301      	movs	r3, #1
 800860e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008610:	4659      	mov	r1, fp
 8008612:	4628      	mov	r0, r5
 8008614:	47b0      	blx	r6
 8008616:	3001      	adds	r0, #1
 8008618:	f43f aecd 	beq.w	80083b6 <_printf_float+0xae>
 800861c:	f10a 0a01 	add.w	sl, sl, #1
 8008620:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8008624:	eba9 0308 	sub.w	r3, r9, r8
 8008628:	4553      	cmp	r3, sl
 800862a:	dcef      	bgt.n	800860c <_printf_float+0x304>
 800862c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008630:	429a      	cmp	r2, r3
 8008632:	444f      	add	r7, r9
 8008634:	db14      	blt.n	8008660 <_printf_float+0x358>
 8008636:	6823      	ldr	r3, [r4, #0]
 8008638:	07da      	lsls	r2, r3, #31
 800863a:	d411      	bmi.n	8008660 <_printf_float+0x358>
 800863c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800863e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008640:	eba3 0209 	sub.w	r2, r3, r9
 8008644:	eba3 0901 	sub.w	r9, r3, r1
 8008648:	4591      	cmp	r9, r2
 800864a:	bfa8      	it	ge
 800864c:	4691      	movge	r9, r2
 800864e:	f1b9 0f00 	cmp.w	r9, #0
 8008652:	dc0d      	bgt.n	8008670 <_printf_float+0x368>
 8008654:	2700      	movs	r7, #0
 8008656:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800865a:	f104 081a 	add.w	r8, r4, #26
 800865e:	e018      	b.n	8008692 <_printf_float+0x38a>
 8008660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008664:	4659      	mov	r1, fp
 8008666:	4628      	mov	r0, r5
 8008668:	47b0      	blx	r6
 800866a:	3001      	adds	r0, #1
 800866c:	d1e6      	bne.n	800863c <_printf_float+0x334>
 800866e:	e6a2      	b.n	80083b6 <_printf_float+0xae>
 8008670:	464b      	mov	r3, r9
 8008672:	463a      	mov	r2, r7
 8008674:	4659      	mov	r1, fp
 8008676:	4628      	mov	r0, r5
 8008678:	47b0      	blx	r6
 800867a:	3001      	adds	r0, #1
 800867c:	d1ea      	bne.n	8008654 <_printf_float+0x34c>
 800867e:	e69a      	b.n	80083b6 <_printf_float+0xae>
 8008680:	2301      	movs	r3, #1
 8008682:	4642      	mov	r2, r8
 8008684:	4659      	mov	r1, fp
 8008686:	4628      	mov	r0, r5
 8008688:	47b0      	blx	r6
 800868a:	3001      	adds	r0, #1
 800868c:	f43f ae93 	beq.w	80083b6 <_printf_float+0xae>
 8008690:	3701      	adds	r7, #1
 8008692:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008696:	1a9b      	subs	r3, r3, r2
 8008698:	eba3 0309 	sub.w	r3, r3, r9
 800869c:	42bb      	cmp	r3, r7
 800869e:	dcef      	bgt.n	8008680 <_printf_float+0x378>
 80086a0:	e74d      	b.n	800853e <_printf_float+0x236>
 80086a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086a4:	2a01      	cmp	r2, #1
 80086a6:	dc01      	bgt.n	80086ac <_printf_float+0x3a4>
 80086a8:	07db      	lsls	r3, r3, #31
 80086aa:	d538      	bpl.n	800871e <_printf_float+0x416>
 80086ac:	2301      	movs	r3, #1
 80086ae:	463a      	mov	r2, r7
 80086b0:	4659      	mov	r1, fp
 80086b2:	4628      	mov	r0, r5
 80086b4:	47b0      	blx	r6
 80086b6:	3001      	adds	r0, #1
 80086b8:	f43f ae7d 	beq.w	80083b6 <_printf_float+0xae>
 80086bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086c0:	4659      	mov	r1, fp
 80086c2:	4628      	mov	r0, r5
 80086c4:	47b0      	blx	r6
 80086c6:	3001      	adds	r0, #1
 80086c8:	f107 0701 	add.w	r7, r7, #1
 80086cc:	f43f ae73 	beq.w	80083b6 <_printf_float+0xae>
 80086d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086d6:	2200      	movs	r2, #0
 80086d8:	f103 38ff 	add.w	r8, r3, #4294967295
 80086dc:	2300      	movs	r3, #0
 80086de:	f7f8 f963 	bl	80009a8 <__aeabi_dcmpeq>
 80086e2:	b9c0      	cbnz	r0, 8008716 <_printf_float+0x40e>
 80086e4:	4643      	mov	r3, r8
 80086e6:	463a      	mov	r2, r7
 80086e8:	4659      	mov	r1, fp
 80086ea:	4628      	mov	r0, r5
 80086ec:	47b0      	blx	r6
 80086ee:	3001      	adds	r0, #1
 80086f0:	d10d      	bne.n	800870e <_printf_float+0x406>
 80086f2:	e660      	b.n	80083b6 <_printf_float+0xae>
 80086f4:	2301      	movs	r3, #1
 80086f6:	4642      	mov	r2, r8
 80086f8:	4659      	mov	r1, fp
 80086fa:	4628      	mov	r0, r5
 80086fc:	47b0      	blx	r6
 80086fe:	3001      	adds	r0, #1
 8008700:	f43f ae59 	beq.w	80083b6 <_printf_float+0xae>
 8008704:	3701      	adds	r7, #1
 8008706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008708:	3b01      	subs	r3, #1
 800870a:	42bb      	cmp	r3, r7
 800870c:	dcf2      	bgt.n	80086f4 <_printf_float+0x3ec>
 800870e:	464b      	mov	r3, r9
 8008710:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008714:	e6e4      	b.n	80084e0 <_printf_float+0x1d8>
 8008716:	2700      	movs	r7, #0
 8008718:	f104 081a 	add.w	r8, r4, #26
 800871c:	e7f3      	b.n	8008706 <_printf_float+0x3fe>
 800871e:	2301      	movs	r3, #1
 8008720:	e7e1      	b.n	80086e6 <_printf_float+0x3de>
 8008722:	2301      	movs	r3, #1
 8008724:	4642      	mov	r2, r8
 8008726:	4659      	mov	r1, fp
 8008728:	4628      	mov	r0, r5
 800872a:	47b0      	blx	r6
 800872c:	3001      	adds	r0, #1
 800872e:	f43f ae42 	beq.w	80083b6 <_printf_float+0xae>
 8008732:	3701      	adds	r7, #1
 8008734:	68e3      	ldr	r3, [r4, #12]
 8008736:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008738:	1a9b      	subs	r3, r3, r2
 800873a:	42bb      	cmp	r3, r7
 800873c:	dcf1      	bgt.n	8008722 <_printf_float+0x41a>
 800873e:	e702      	b.n	8008546 <_printf_float+0x23e>
 8008740:	2700      	movs	r7, #0
 8008742:	f104 0819 	add.w	r8, r4, #25
 8008746:	e7f5      	b.n	8008734 <_printf_float+0x42c>
 8008748:	2b00      	cmp	r3, #0
 800874a:	f43f ae94 	beq.w	8008476 <_printf_float+0x16e>
 800874e:	f04f 0c00 	mov.w	ip, #0
 8008752:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008756:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800875a:	6022      	str	r2, [r4, #0]
 800875c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008760:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	463a      	mov	r2, r7
 8008768:	464b      	mov	r3, r9
 800876a:	4628      	mov	r0, r5
 800876c:	f7ff fd3a 	bl	80081e4 <__cvt>
 8008770:	4607      	mov	r7, r0
 8008772:	e64f      	b.n	8008414 <_printf_float+0x10c>

08008774 <_printf_common>:
 8008774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	4691      	mov	r9, r2
 800877a:	461f      	mov	r7, r3
 800877c:	688a      	ldr	r2, [r1, #8]
 800877e:	690b      	ldr	r3, [r1, #16]
 8008780:	4606      	mov	r6, r0
 8008782:	4293      	cmp	r3, r2
 8008784:	bfb8      	it	lt
 8008786:	4613      	movlt	r3, r2
 8008788:	f8c9 3000 	str.w	r3, [r9]
 800878c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008790:	460c      	mov	r4, r1
 8008792:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008796:	b112      	cbz	r2, 800879e <_printf_common+0x2a>
 8008798:	3301      	adds	r3, #1
 800879a:	f8c9 3000 	str.w	r3, [r9]
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	0699      	lsls	r1, r3, #26
 80087a2:	bf42      	ittt	mi
 80087a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80087a8:	3302      	addmi	r3, #2
 80087aa:	f8c9 3000 	strmi.w	r3, [r9]
 80087ae:	6825      	ldr	r5, [r4, #0]
 80087b0:	f015 0506 	ands.w	r5, r5, #6
 80087b4:	d107      	bne.n	80087c6 <_printf_common+0x52>
 80087b6:	f104 0a19 	add.w	sl, r4, #25
 80087ba:	68e3      	ldr	r3, [r4, #12]
 80087bc:	f8d9 2000 	ldr.w	r2, [r9]
 80087c0:	1a9b      	subs	r3, r3, r2
 80087c2:	42ab      	cmp	r3, r5
 80087c4:	dc29      	bgt.n	800881a <_printf_common+0xa6>
 80087c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80087ca:	6822      	ldr	r2, [r4, #0]
 80087cc:	3300      	adds	r3, #0
 80087ce:	bf18      	it	ne
 80087d0:	2301      	movne	r3, #1
 80087d2:	0692      	lsls	r2, r2, #26
 80087d4:	d42e      	bmi.n	8008834 <_printf_common+0xc0>
 80087d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087da:	4639      	mov	r1, r7
 80087dc:	4630      	mov	r0, r6
 80087de:	47c0      	blx	r8
 80087e0:	3001      	adds	r0, #1
 80087e2:	d021      	beq.n	8008828 <_printf_common+0xb4>
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	68e5      	ldr	r5, [r4, #12]
 80087e8:	f003 0306 	and.w	r3, r3, #6
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	bf18      	it	ne
 80087f0:	2500      	movne	r5, #0
 80087f2:	f8d9 2000 	ldr.w	r2, [r9]
 80087f6:	f04f 0900 	mov.w	r9, #0
 80087fa:	bf08      	it	eq
 80087fc:	1aad      	subeq	r5, r5, r2
 80087fe:	68a3      	ldr	r3, [r4, #8]
 8008800:	6922      	ldr	r2, [r4, #16]
 8008802:	bf08      	it	eq
 8008804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008808:	4293      	cmp	r3, r2
 800880a:	bfc4      	itt	gt
 800880c:	1a9b      	subgt	r3, r3, r2
 800880e:	18ed      	addgt	r5, r5, r3
 8008810:	341a      	adds	r4, #26
 8008812:	454d      	cmp	r5, r9
 8008814:	d11a      	bne.n	800884c <_printf_common+0xd8>
 8008816:	2000      	movs	r0, #0
 8008818:	e008      	b.n	800882c <_printf_common+0xb8>
 800881a:	2301      	movs	r3, #1
 800881c:	4652      	mov	r2, sl
 800881e:	4639      	mov	r1, r7
 8008820:	4630      	mov	r0, r6
 8008822:	47c0      	blx	r8
 8008824:	3001      	adds	r0, #1
 8008826:	d103      	bne.n	8008830 <_printf_common+0xbc>
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008830:	3501      	adds	r5, #1
 8008832:	e7c2      	b.n	80087ba <_printf_common+0x46>
 8008834:	2030      	movs	r0, #48	; 0x30
 8008836:	18e1      	adds	r1, r4, r3
 8008838:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800883c:	1c5a      	adds	r2, r3, #1
 800883e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008842:	4422      	add	r2, r4
 8008844:	3302      	adds	r3, #2
 8008846:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800884a:	e7c4      	b.n	80087d6 <_printf_common+0x62>
 800884c:	2301      	movs	r3, #1
 800884e:	4622      	mov	r2, r4
 8008850:	4639      	mov	r1, r7
 8008852:	4630      	mov	r0, r6
 8008854:	47c0      	blx	r8
 8008856:	3001      	adds	r0, #1
 8008858:	d0e6      	beq.n	8008828 <_printf_common+0xb4>
 800885a:	f109 0901 	add.w	r9, r9, #1
 800885e:	e7d8      	b.n	8008812 <_printf_common+0x9e>

08008860 <_printf_i>:
 8008860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008864:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008868:	460c      	mov	r4, r1
 800886a:	7e09      	ldrb	r1, [r1, #24]
 800886c:	b085      	sub	sp, #20
 800886e:	296e      	cmp	r1, #110	; 0x6e
 8008870:	4617      	mov	r7, r2
 8008872:	4606      	mov	r6, r0
 8008874:	4698      	mov	r8, r3
 8008876:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008878:	f000 80b3 	beq.w	80089e2 <_printf_i+0x182>
 800887c:	d822      	bhi.n	80088c4 <_printf_i+0x64>
 800887e:	2963      	cmp	r1, #99	; 0x63
 8008880:	d036      	beq.n	80088f0 <_printf_i+0x90>
 8008882:	d80a      	bhi.n	800889a <_printf_i+0x3a>
 8008884:	2900      	cmp	r1, #0
 8008886:	f000 80b9 	beq.w	80089fc <_printf_i+0x19c>
 800888a:	2958      	cmp	r1, #88	; 0x58
 800888c:	f000 8083 	beq.w	8008996 <_printf_i+0x136>
 8008890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008894:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008898:	e032      	b.n	8008900 <_printf_i+0xa0>
 800889a:	2964      	cmp	r1, #100	; 0x64
 800889c:	d001      	beq.n	80088a2 <_printf_i+0x42>
 800889e:	2969      	cmp	r1, #105	; 0x69
 80088a0:	d1f6      	bne.n	8008890 <_printf_i+0x30>
 80088a2:	6820      	ldr	r0, [r4, #0]
 80088a4:	6813      	ldr	r3, [r2, #0]
 80088a6:	0605      	lsls	r5, r0, #24
 80088a8:	f103 0104 	add.w	r1, r3, #4
 80088ac:	d52a      	bpl.n	8008904 <_printf_i+0xa4>
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6011      	str	r1, [r2, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	da03      	bge.n	80088be <_printf_i+0x5e>
 80088b6:	222d      	movs	r2, #45	; 0x2d
 80088b8:	425b      	negs	r3, r3
 80088ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80088be:	486f      	ldr	r0, [pc, #444]	; (8008a7c <_printf_i+0x21c>)
 80088c0:	220a      	movs	r2, #10
 80088c2:	e039      	b.n	8008938 <_printf_i+0xd8>
 80088c4:	2973      	cmp	r1, #115	; 0x73
 80088c6:	f000 809d 	beq.w	8008a04 <_printf_i+0x1a4>
 80088ca:	d808      	bhi.n	80088de <_printf_i+0x7e>
 80088cc:	296f      	cmp	r1, #111	; 0x6f
 80088ce:	d020      	beq.n	8008912 <_printf_i+0xb2>
 80088d0:	2970      	cmp	r1, #112	; 0x70
 80088d2:	d1dd      	bne.n	8008890 <_printf_i+0x30>
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	f043 0320 	orr.w	r3, r3, #32
 80088da:	6023      	str	r3, [r4, #0]
 80088dc:	e003      	b.n	80088e6 <_printf_i+0x86>
 80088de:	2975      	cmp	r1, #117	; 0x75
 80088e0:	d017      	beq.n	8008912 <_printf_i+0xb2>
 80088e2:	2978      	cmp	r1, #120	; 0x78
 80088e4:	d1d4      	bne.n	8008890 <_printf_i+0x30>
 80088e6:	2378      	movs	r3, #120	; 0x78
 80088e8:	4865      	ldr	r0, [pc, #404]	; (8008a80 <_printf_i+0x220>)
 80088ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088ee:	e055      	b.n	800899c <_printf_i+0x13c>
 80088f0:	6813      	ldr	r3, [r2, #0]
 80088f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088f6:	1d19      	adds	r1, r3, #4
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6011      	str	r1, [r2, #0]
 80088fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008900:	2301      	movs	r3, #1
 8008902:	e08c      	b.n	8008a1e <_printf_i+0x1be>
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f010 0f40 	tst.w	r0, #64	; 0x40
 800890a:	6011      	str	r1, [r2, #0]
 800890c:	bf18      	it	ne
 800890e:	b21b      	sxthne	r3, r3
 8008910:	e7cf      	b.n	80088b2 <_printf_i+0x52>
 8008912:	6813      	ldr	r3, [r2, #0]
 8008914:	6825      	ldr	r5, [r4, #0]
 8008916:	1d18      	adds	r0, r3, #4
 8008918:	6010      	str	r0, [r2, #0]
 800891a:	0628      	lsls	r0, r5, #24
 800891c:	d501      	bpl.n	8008922 <_printf_i+0xc2>
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	e002      	b.n	8008928 <_printf_i+0xc8>
 8008922:	0668      	lsls	r0, r5, #25
 8008924:	d5fb      	bpl.n	800891e <_printf_i+0xbe>
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	296f      	cmp	r1, #111	; 0x6f
 800892a:	bf14      	ite	ne
 800892c:	220a      	movne	r2, #10
 800892e:	2208      	moveq	r2, #8
 8008930:	4852      	ldr	r0, [pc, #328]	; (8008a7c <_printf_i+0x21c>)
 8008932:	2100      	movs	r1, #0
 8008934:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008938:	6865      	ldr	r5, [r4, #4]
 800893a:	2d00      	cmp	r5, #0
 800893c:	60a5      	str	r5, [r4, #8]
 800893e:	f2c0 8095 	blt.w	8008a6c <_printf_i+0x20c>
 8008942:	6821      	ldr	r1, [r4, #0]
 8008944:	f021 0104 	bic.w	r1, r1, #4
 8008948:	6021      	str	r1, [r4, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d13d      	bne.n	80089ca <_printf_i+0x16a>
 800894e:	2d00      	cmp	r5, #0
 8008950:	f040 808e 	bne.w	8008a70 <_printf_i+0x210>
 8008954:	4665      	mov	r5, ip
 8008956:	2a08      	cmp	r2, #8
 8008958:	d10b      	bne.n	8008972 <_printf_i+0x112>
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	07db      	lsls	r3, r3, #31
 800895e:	d508      	bpl.n	8008972 <_printf_i+0x112>
 8008960:	6923      	ldr	r3, [r4, #16]
 8008962:	6862      	ldr	r2, [r4, #4]
 8008964:	429a      	cmp	r2, r3
 8008966:	bfde      	ittt	le
 8008968:	2330      	movle	r3, #48	; 0x30
 800896a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800896e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008972:	ebac 0305 	sub.w	r3, ip, r5
 8008976:	6123      	str	r3, [r4, #16]
 8008978:	f8cd 8000 	str.w	r8, [sp]
 800897c:	463b      	mov	r3, r7
 800897e:	aa03      	add	r2, sp, #12
 8008980:	4621      	mov	r1, r4
 8008982:	4630      	mov	r0, r6
 8008984:	f7ff fef6 	bl	8008774 <_printf_common>
 8008988:	3001      	adds	r0, #1
 800898a:	d14d      	bne.n	8008a28 <_printf_i+0x1c8>
 800898c:	f04f 30ff 	mov.w	r0, #4294967295
 8008990:	b005      	add	sp, #20
 8008992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008996:	4839      	ldr	r0, [pc, #228]	; (8008a7c <_printf_i+0x21c>)
 8008998:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800899c:	6813      	ldr	r3, [r2, #0]
 800899e:	6821      	ldr	r1, [r4, #0]
 80089a0:	1d1d      	adds	r5, r3, #4
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6015      	str	r5, [r2, #0]
 80089a6:	060a      	lsls	r2, r1, #24
 80089a8:	d50b      	bpl.n	80089c2 <_printf_i+0x162>
 80089aa:	07ca      	lsls	r2, r1, #31
 80089ac:	bf44      	itt	mi
 80089ae:	f041 0120 	orrmi.w	r1, r1, #32
 80089b2:	6021      	strmi	r1, [r4, #0]
 80089b4:	b91b      	cbnz	r3, 80089be <_printf_i+0x15e>
 80089b6:	6822      	ldr	r2, [r4, #0]
 80089b8:	f022 0220 	bic.w	r2, r2, #32
 80089bc:	6022      	str	r2, [r4, #0]
 80089be:	2210      	movs	r2, #16
 80089c0:	e7b7      	b.n	8008932 <_printf_i+0xd2>
 80089c2:	064d      	lsls	r5, r1, #25
 80089c4:	bf48      	it	mi
 80089c6:	b29b      	uxthmi	r3, r3
 80089c8:	e7ef      	b.n	80089aa <_printf_i+0x14a>
 80089ca:	4665      	mov	r5, ip
 80089cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80089d0:	fb02 3311 	mls	r3, r2, r1, r3
 80089d4:	5cc3      	ldrb	r3, [r0, r3]
 80089d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80089da:	460b      	mov	r3, r1
 80089dc:	2900      	cmp	r1, #0
 80089de:	d1f5      	bne.n	80089cc <_printf_i+0x16c>
 80089e0:	e7b9      	b.n	8008956 <_printf_i+0xf6>
 80089e2:	6813      	ldr	r3, [r2, #0]
 80089e4:	6825      	ldr	r5, [r4, #0]
 80089e6:	1d18      	adds	r0, r3, #4
 80089e8:	6961      	ldr	r1, [r4, #20]
 80089ea:	6010      	str	r0, [r2, #0]
 80089ec:	0628      	lsls	r0, r5, #24
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	d501      	bpl.n	80089f6 <_printf_i+0x196>
 80089f2:	6019      	str	r1, [r3, #0]
 80089f4:	e002      	b.n	80089fc <_printf_i+0x19c>
 80089f6:	066a      	lsls	r2, r5, #25
 80089f8:	d5fb      	bpl.n	80089f2 <_printf_i+0x192>
 80089fa:	8019      	strh	r1, [r3, #0]
 80089fc:	2300      	movs	r3, #0
 80089fe:	4665      	mov	r5, ip
 8008a00:	6123      	str	r3, [r4, #16]
 8008a02:	e7b9      	b.n	8008978 <_printf_i+0x118>
 8008a04:	6813      	ldr	r3, [r2, #0]
 8008a06:	1d19      	adds	r1, r3, #4
 8008a08:	6011      	str	r1, [r2, #0]
 8008a0a:	681d      	ldr	r5, [r3, #0]
 8008a0c:	6862      	ldr	r2, [r4, #4]
 8008a0e:	2100      	movs	r1, #0
 8008a10:	4628      	mov	r0, r5
 8008a12:	f000 fecf 	bl	80097b4 <memchr>
 8008a16:	b108      	cbz	r0, 8008a1c <_printf_i+0x1bc>
 8008a18:	1b40      	subs	r0, r0, r5
 8008a1a:	6060      	str	r0, [r4, #4]
 8008a1c:	6863      	ldr	r3, [r4, #4]
 8008a1e:	6123      	str	r3, [r4, #16]
 8008a20:	2300      	movs	r3, #0
 8008a22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a26:	e7a7      	b.n	8008978 <_printf_i+0x118>
 8008a28:	6923      	ldr	r3, [r4, #16]
 8008a2a:	462a      	mov	r2, r5
 8008a2c:	4639      	mov	r1, r7
 8008a2e:	4630      	mov	r0, r6
 8008a30:	47c0      	blx	r8
 8008a32:	3001      	adds	r0, #1
 8008a34:	d0aa      	beq.n	800898c <_printf_i+0x12c>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	079b      	lsls	r3, r3, #30
 8008a3a:	d413      	bmi.n	8008a64 <_printf_i+0x204>
 8008a3c:	68e0      	ldr	r0, [r4, #12]
 8008a3e:	9b03      	ldr	r3, [sp, #12]
 8008a40:	4298      	cmp	r0, r3
 8008a42:	bfb8      	it	lt
 8008a44:	4618      	movlt	r0, r3
 8008a46:	e7a3      	b.n	8008990 <_printf_i+0x130>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	464a      	mov	r2, r9
 8008a4c:	4639      	mov	r1, r7
 8008a4e:	4630      	mov	r0, r6
 8008a50:	47c0      	blx	r8
 8008a52:	3001      	adds	r0, #1
 8008a54:	d09a      	beq.n	800898c <_printf_i+0x12c>
 8008a56:	3501      	adds	r5, #1
 8008a58:	68e3      	ldr	r3, [r4, #12]
 8008a5a:	9a03      	ldr	r2, [sp, #12]
 8008a5c:	1a9b      	subs	r3, r3, r2
 8008a5e:	42ab      	cmp	r3, r5
 8008a60:	dcf2      	bgt.n	8008a48 <_printf_i+0x1e8>
 8008a62:	e7eb      	b.n	8008a3c <_printf_i+0x1dc>
 8008a64:	2500      	movs	r5, #0
 8008a66:	f104 0919 	add.w	r9, r4, #25
 8008a6a:	e7f5      	b.n	8008a58 <_printf_i+0x1f8>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1ac      	bne.n	80089ca <_printf_i+0x16a>
 8008a70:	7803      	ldrb	r3, [r0, #0]
 8008a72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a7a:	e76c      	b.n	8008956 <_printf_i+0xf6>
 8008a7c:	0800aca2 	.word	0x0800aca2
 8008a80:	0800acb3 	.word	0x0800acb3

08008a84 <siprintf>:
 8008a84:	b40e      	push	{r1, r2, r3}
 8008a86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a8a:	b500      	push	{lr}
 8008a8c:	b09c      	sub	sp, #112	; 0x70
 8008a8e:	ab1d      	add	r3, sp, #116	; 0x74
 8008a90:	9002      	str	r0, [sp, #8]
 8008a92:	9006      	str	r0, [sp, #24]
 8008a94:	9107      	str	r1, [sp, #28]
 8008a96:	9104      	str	r1, [sp, #16]
 8008a98:	4808      	ldr	r0, [pc, #32]	; (8008abc <siprintf+0x38>)
 8008a9a:	4909      	ldr	r1, [pc, #36]	; (8008ac0 <siprintf+0x3c>)
 8008a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aa0:	9105      	str	r1, [sp, #20]
 8008aa2:	6800      	ldr	r0, [r0, #0]
 8008aa4:	a902      	add	r1, sp, #8
 8008aa6:	9301      	str	r3, [sp, #4]
 8008aa8:	f001 fa88 	bl	8009fbc <_svfiprintf_r>
 8008aac:	2200      	movs	r2, #0
 8008aae:	9b02      	ldr	r3, [sp, #8]
 8008ab0:	701a      	strb	r2, [r3, #0]
 8008ab2:	b01c      	add	sp, #112	; 0x70
 8008ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ab8:	b003      	add	sp, #12
 8008aba:	4770      	bx	lr
 8008abc:	20000014 	.word	0x20000014
 8008ac0:	ffff0208 	.word	0xffff0208

08008ac4 <_vsiprintf_r>:
 8008ac4:	b500      	push	{lr}
 8008ac6:	b09b      	sub	sp, #108	; 0x6c
 8008ac8:	9100      	str	r1, [sp, #0]
 8008aca:	9104      	str	r1, [sp, #16]
 8008acc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ad0:	9105      	str	r1, [sp, #20]
 8008ad2:	9102      	str	r1, [sp, #8]
 8008ad4:	4905      	ldr	r1, [pc, #20]	; (8008aec <_vsiprintf_r+0x28>)
 8008ad6:	9103      	str	r1, [sp, #12]
 8008ad8:	4669      	mov	r1, sp
 8008ada:	f001 fa6f 	bl	8009fbc <_svfiprintf_r>
 8008ade:	2200      	movs	r2, #0
 8008ae0:	9b00      	ldr	r3, [sp, #0]
 8008ae2:	701a      	strb	r2, [r3, #0]
 8008ae4:	b01b      	add	sp, #108	; 0x6c
 8008ae6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008aea:	bf00      	nop
 8008aec:	ffff0208 	.word	0xffff0208

08008af0 <vsiprintf>:
 8008af0:	4613      	mov	r3, r2
 8008af2:	460a      	mov	r2, r1
 8008af4:	4601      	mov	r1, r0
 8008af6:	4802      	ldr	r0, [pc, #8]	; (8008b00 <vsiprintf+0x10>)
 8008af8:	6800      	ldr	r0, [r0, #0]
 8008afa:	f7ff bfe3 	b.w	8008ac4 <_vsiprintf_r>
 8008afe:	bf00      	nop
 8008b00:	20000014 	.word	0x20000014

08008b04 <quorem>:
 8008b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b08:	6903      	ldr	r3, [r0, #16]
 8008b0a:	690c      	ldr	r4, [r1, #16]
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	42a3      	cmp	r3, r4
 8008b10:	f2c0 8084 	blt.w	8008c1c <quorem+0x118>
 8008b14:	3c01      	subs	r4, #1
 8008b16:	f101 0714 	add.w	r7, r1, #20
 8008b1a:	f100 0614 	add.w	r6, r0, #20
 8008b1e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008b22:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008b26:	3501      	adds	r5, #1
 8008b28:	fbb0 f5f5 	udiv	r5, r0, r5
 8008b2c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008b30:	eb06 030c 	add.w	r3, r6, ip
 8008b34:	eb07 090c 	add.w	r9, r7, ip
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	b39d      	cbz	r5, 8008ba4 <quorem+0xa0>
 8008b3c:	f04f 0a00 	mov.w	sl, #0
 8008b40:	4638      	mov	r0, r7
 8008b42:	46b6      	mov	lr, r6
 8008b44:	46d3      	mov	fp, sl
 8008b46:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b4a:	b293      	uxth	r3, r2
 8008b4c:	fb05 a303 	mla	r3, r5, r3, sl
 8008b50:	0c12      	lsrs	r2, r2, #16
 8008b52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b56:	fb05 a202 	mla	r2, r5, r2, sl
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	ebab 0303 	sub.w	r3, fp, r3
 8008b60:	f8de b000 	ldr.w	fp, [lr]
 8008b64:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008b68:	fa1f fb8b 	uxth.w	fp, fp
 8008b6c:	445b      	add	r3, fp
 8008b6e:	fa1f fb82 	uxth.w	fp, r2
 8008b72:	f8de 2000 	ldr.w	r2, [lr]
 8008b76:	4581      	cmp	r9, r0
 8008b78:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008b7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b86:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008b8a:	f84e 3b04 	str.w	r3, [lr], #4
 8008b8e:	d2da      	bcs.n	8008b46 <quorem+0x42>
 8008b90:	f856 300c 	ldr.w	r3, [r6, ip]
 8008b94:	b933      	cbnz	r3, 8008ba4 <quorem+0xa0>
 8008b96:	9b01      	ldr	r3, [sp, #4]
 8008b98:	3b04      	subs	r3, #4
 8008b9a:	429e      	cmp	r6, r3
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	d331      	bcc.n	8008c04 <quorem+0x100>
 8008ba0:	f8c8 4010 	str.w	r4, [r8, #16]
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	f001 f833 	bl	8009c10 <__mcmp>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	db26      	blt.n	8008bfc <quorem+0xf8>
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f04f 0c00 	mov.w	ip, #0
 8008bb4:	3501      	adds	r5, #1
 8008bb6:	f857 1b04 	ldr.w	r1, [r7], #4
 8008bba:	f8d0 e000 	ldr.w	lr, [r0]
 8008bbe:	b28b      	uxth	r3, r1
 8008bc0:	ebac 0303 	sub.w	r3, ip, r3
 8008bc4:	fa1f f28e 	uxth.w	r2, lr
 8008bc8:	4413      	add	r3, r2
 8008bca:	0c0a      	lsrs	r2, r1, #16
 8008bcc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008bd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bda:	45b9      	cmp	r9, r7
 8008bdc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008be0:	f840 3b04 	str.w	r3, [r0], #4
 8008be4:	d2e7      	bcs.n	8008bb6 <quorem+0xb2>
 8008be6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008bea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008bee:	b92a      	cbnz	r2, 8008bfc <quorem+0xf8>
 8008bf0:	3b04      	subs	r3, #4
 8008bf2:	429e      	cmp	r6, r3
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	d30b      	bcc.n	8008c10 <quorem+0x10c>
 8008bf8:	f8c8 4010 	str.w	r4, [r8, #16]
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	b003      	add	sp, #12
 8008c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c04:	6812      	ldr	r2, [r2, #0]
 8008c06:	3b04      	subs	r3, #4
 8008c08:	2a00      	cmp	r2, #0
 8008c0a:	d1c9      	bne.n	8008ba0 <quorem+0x9c>
 8008c0c:	3c01      	subs	r4, #1
 8008c0e:	e7c4      	b.n	8008b9a <quorem+0x96>
 8008c10:	6812      	ldr	r2, [r2, #0]
 8008c12:	3b04      	subs	r3, #4
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	d1ef      	bne.n	8008bf8 <quorem+0xf4>
 8008c18:	3c01      	subs	r4, #1
 8008c1a:	e7ea      	b.n	8008bf2 <quorem+0xee>
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	e7ee      	b.n	8008bfe <quorem+0xfa>

08008c20 <_dtoa_r>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	4616      	mov	r6, r2
 8008c26:	461f      	mov	r7, r3
 8008c28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c2a:	b095      	sub	sp, #84	; 0x54
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8008c32:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008c36:	b93d      	cbnz	r5, 8008c48 <_dtoa_r+0x28>
 8008c38:	2010      	movs	r0, #16
 8008c3a:	f000 fdb3 	bl	80097a4 <malloc>
 8008c3e:	6260      	str	r0, [r4, #36]	; 0x24
 8008c40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c44:	6005      	str	r5, [r0, #0]
 8008c46:	60c5      	str	r5, [r0, #12]
 8008c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c4a:	6819      	ldr	r1, [r3, #0]
 8008c4c:	b151      	cbz	r1, 8008c64 <_dtoa_r+0x44>
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	2301      	movs	r3, #1
 8008c52:	4093      	lsls	r3, r2
 8008c54:	604a      	str	r2, [r1, #4]
 8008c56:	608b      	str	r3, [r1, #8]
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f000 fdf8 	bl	800984e <_Bfree>
 8008c5e:	2200      	movs	r2, #0
 8008c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	1e3b      	subs	r3, r7, #0
 8008c66:	bfaf      	iteee	ge
 8008c68:	2300      	movge	r3, #0
 8008c6a:	2201      	movlt	r2, #1
 8008c6c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c70:	9303      	strlt	r3, [sp, #12]
 8008c72:	bfac      	ite	ge
 8008c74:	f8c8 3000 	strge.w	r3, [r8]
 8008c78:	f8c8 2000 	strlt.w	r2, [r8]
 8008c7c:	4bae      	ldr	r3, [pc, #696]	; (8008f38 <_dtoa_r+0x318>)
 8008c7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008c82:	ea33 0308 	bics.w	r3, r3, r8
 8008c86:	d11b      	bne.n	8008cc0 <_dtoa_r+0xa0>
 8008c88:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	9b02      	ldr	r3, [sp, #8]
 8008c92:	b923      	cbnz	r3, 8008c9e <_dtoa_r+0x7e>
 8008c94:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	f000 8545 	beq.w	8009728 <_dtoa_r+0xb08>
 8008c9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ca0:	b953      	cbnz	r3, 8008cb8 <_dtoa_r+0x98>
 8008ca2:	4ba6      	ldr	r3, [pc, #664]	; (8008f3c <_dtoa_r+0x31c>)
 8008ca4:	e021      	b.n	8008cea <_dtoa_r+0xca>
 8008ca6:	4ba6      	ldr	r3, [pc, #664]	; (8008f40 <_dtoa_r+0x320>)
 8008ca8:	9306      	str	r3, [sp, #24]
 8008caa:	3308      	adds	r3, #8
 8008cac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	9806      	ldr	r0, [sp, #24]
 8008cb2:	b015      	add	sp, #84	; 0x54
 8008cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb8:	4ba0      	ldr	r3, [pc, #640]	; (8008f3c <_dtoa_r+0x31c>)
 8008cba:	9306      	str	r3, [sp, #24]
 8008cbc:	3303      	adds	r3, #3
 8008cbe:	e7f5      	b.n	8008cac <_dtoa_r+0x8c>
 8008cc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	4630      	mov	r0, r6
 8008cca:	4639      	mov	r1, r7
 8008ccc:	f7f7 fe6c 	bl	80009a8 <__aeabi_dcmpeq>
 8008cd0:	4682      	mov	sl, r0
 8008cd2:	b160      	cbz	r0, 8008cee <_dtoa_r+0xce>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 8520 	beq.w	8009722 <_dtoa_r+0xb02>
 8008ce2:	4b98      	ldr	r3, [pc, #608]	; (8008f44 <_dtoa_r+0x324>)
 8008ce4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ce6:	6013      	str	r3, [r2, #0]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	9306      	str	r3, [sp, #24]
 8008cec:	e7e0      	b.n	8008cb0 <_dtoa_r+0x90>
 8008cee:	ab12      	add	r3, sp, #72	; 0x48
 8008cf0:	9301      	str	r3, [sp, #4]
 8008cf2:	ab13      	add	r3, sp, #76	; 0x4c
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	4632      	mov	r2, r6
 8008cf8:	463b      	mov	r3, r7
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f001 f800 	bl	8009d00 <__d2b>
 8008d00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008d04:	4683      	mov	fp, r0
 8008d06:	2d00      	cmp	r5, #0
 8008d08:	d07d      	beq.n	8008e06 <_dtoa_r+0x1e6>
 8008d0a:	46b0      	mov	r8, r6
 8008d0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d10:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8008d14:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008d18:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d1c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008d20:	2200      	movs	r2, #0
 8008d22:	4b89      	ldr	r3, [pc, #548]	; (8008f48 <_dtoa_r+0x328>)
 8008d24:	4640      	mov	r0, r8
 8008d26:	4649      	mov	r1, r9
 8008d28:	f7f7 fa1e 	bl	8000168 <__aeabi_dsub>
 8008d2c:	a37c      	add	r3, pc, #496	; (adr r3, 8008f20 <_dtoa_r+0x300>)
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	f7f7 fbd1 	bl	80004d8 <__aeabi_dmul>
 8008d36:	a37c      	add	r3, pc, #496	; (adr r3, 8008f28 <_dtoa_r+0x308>)
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	f7f7 fa16 	bl	800016c <__adddf3>
 8008d40:	4606      	mov	r6, r0
 8008d42:	4628      	mov	r0, r5
 8008d44:	460f      	mov	r7, r1
 8008d46:	f7f7 fb5d 	bl	8000404 <__aeabi_i2d>
 8008d4a:	a379      	add	r3, pc, #484	; (adr r3, 8008f30 <_dtoa_r+0x310>)
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	f7f7 fbc2 	bl	80004d8 <__aeabi_dmul>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4630      	mov	r0, r6
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	f7f7 fa06 	bl	800016c <__adddf3>
 8008d60:	4606      	mov	r6, r0
 8008d62:	460f      	mov	r7, r1
 8008d64:	f7f7 fe68 	bl	8000a38 <__aeabi_d2iz>
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4682      	mov	sl, r0
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4630      	mov	r0, r6
 8008d70:	4639      	mov	r1, r7
 8008d72:	f7f7 fe23 	bl	80009bc <__aeabi_dcmplt>
 8008d76:	b148      	cbz	r0, 8008d8c <_dtoa_r+0x16c>
 8008d78:	4650      	mov	r0, sl
 8008d7a:	f7f7 fb43 	bl	8000404 <__aeabi_i2d>
 8008d7e:	4632      	mov	r2, r6
 8008d80:	463b      	mov	r3, r7
 8008d82:	f7f7 fe11 	bl	80009a8 <__aeabi_dcmpeq>
 8008d86:	b908      	cbnz	r0, 8008d8c <_dtoa_r+0x16c>
 8008d88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d8c:	f1ba 0f16 	cmp.w	sl, #22
 8008d90:	d85a      	bhi.n	8008e48 <_dtoa_r+0x228>
 8008d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d96:	496d      	ldr	r1, [pc, #436]	; (8008f4c <_dtoa_r+0x32c>)
 8008d98:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008da0:	f7f7 fe2a 	bl	80009f8 <__aeabi_dcmpgt>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d051      	beq.n	8008e4c <_dtoa_r+0x22c>
 8008da8:	2300      	movs	r3, #0
 8008daa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dae:	930d      	str	r3, [sp, #52]	; 0x34
 8008db0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008db2:	1b5d      	subs	r5, r3, r5
 8008db4:	1e6b      	subs	r3, r5, #1
 8008db6:	9307      	str	r3, [sp, #28]
 8008db8:	bf43      	ittte	mi
 8008dba:	2300      	movmi	r3, #0
 8008dbc:	f1c5 0901 	rsbmi	r9, r5, #1
 8008dc0:	9307      	strmi	r3, [sp, #28]
 8008dc2:	f04f 0900 	movpl.w	r9, #0
 8008dc6:	f1ba 0f00 	cmp.w	sl, #0
 8008dca:	db41      	blt.n	8008e50 <_dtoa_r+0x230>
 8008dcc:	9b07      	ldr	r3, [sp, #28]
 8008dce:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008dd2:	4453      	add	r3, sl
 8008dd4:	9307      	str	r3, [sp, #28]
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	9308      	str	r3, [sp, #32]
 8008dda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ddc:	2b09      	cmp	r3, #9
 8008dde:	f200 808f 	bhi.w	8008f00 <_dtoa_r+0x2e0>
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	bfc4      	itt	gt
 8008de6:	3b04      	subgt	r3, #4
 8008de8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8008dea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008dec:	bfc8      	it	gt
 8008dee:	2500      	movgt	r5, #0
 8008df0:	f1a3 0302 	sub.w	r3, r3, #2
 8008df4:	bfd8      	it	le
 8008df6:	2501      	movle	r5, #1
 8008df8:	2b03      	cmp	r3, #3
 8008dfa:	f200 808d 	bhi.w	8008f18 <_dtoa_r+0x2f8>
 8008dfe:	e8df f003 	tbb	[pc, r3]
 8008e02:	7d7b      	.short	0x7d7b
 8008e04:	6f2f      	.short	0x6f2f
 8008e06:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008e0a:	441d      	add	r5, r3
 8008e0c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008e10:	2820      	cmp	r0, #32
 8008e12:	dd13      	ble.n	8008e3c <_dtoa_r+0x21c>
 8008e14:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008e18:	9b02      	ldr	r3, [sp, #8]
 8008e1a:	fa08 f800 	lsl.w	r8, r8, r0
 8008e1e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008e22:	fa23 f000 	lsr.w	r0, r3, r0
 8008e26:	ea48 0000 	orr.w	r0, r8, r0
 8008e2a:	f7f7 fadb 	bl	80003e4 <__aeabi_ui2d>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4680      	mov	r8, r0
 8008e32:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8008e36:	3d01      	subs	r5, #1
 8008e38:	9310      	str	r3, [sp, #64]	; 0x40
 8008e3a:	e771      	b.n	8008d20 <_dtoa_r+0x100>
 8008e3c:	9b02      	ldr	r3, [sp, #8]
 8008e3e:	f1c0 0020 	rsb	r0, r0, #32
 8008e42:	fa03 f000 	lsl.w	r0, r3, r0
 8008e46:	e7f0      	b.n	8008e2a <_dtoa_r+0x20a>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e7b0      	b.n	8008dae <_dtoa_r+0x18e>
 8008e4c:	900d      	str	r0, [sp, #52]	; 0x34
 8008e4e:	e7af      	b.n	8008db0 <_dtoa_r+0x190>
 8008e50:	f1ca 0300 	rsb	r3, sl, #0
 8008e54:	9308      	str	r3, [sp, #32]
 8008e56:	2300      	movs	r3, #0
 8008e58:	eba9 090a 	sub.w	r9, r9, sl
 8008e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8008e5e:	e7bc      	b.n	8008dda <_dtoa_r+0x1ba>
 8008e60:	2301      	movs	r3, #1
 8008e62:	9309      	str	r3, [sp, #36]	; 0x24
 8008e64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	dd74      	ble.n	8008f54 <_dtoa_r+0x334>
 8008e6a:	4698      	mov	r8, r3
 8008e6c:	9304      	str	r3, [sp, #16]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e72:	6072      	str	r2, [r6, #4]
 8008e74:	2204      	movs	r2, #4
 8008e76:	f102 0014 	add.w	r0, r2, #20
 8008e7a:	4298      	cmp	r0, r3
 8008e7c:	6871      	ldr	r1, [r6, #4]
 8008e7e:	d96e      	bls.n	8008f5e <_dtoa_r+0x33e>
 8008e80:	4620      	mov	r0, r4
 8008e82:	f000 fcb0 	bl	80097e6 <_Balloc>
 8008e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e88:	6030      	str	r0, [r6, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f1b8 0f0e 	cmp.w	r8, #14
 8008e90:	9306      	str	r3, [sp, #24]
 8008e92:	f200 80ed 	bhi.w	8009070 <_dtoa_r+0x450>
 8008e96:	2d00      	cmp	r5, #0
 8008e98:	f000 80ea 	beq.w	8009070 <_dtoa_r+0x450>
 8008e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ea0:	f1ba 0f00 	cmp.w	sl, #0
 8008ea4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008ea8:	dd77      	ble.n	8008f9a <_dtoa_r+0x37a>
 8008eaa:	4a28      	ldr	r2, [pc, #160]	; (8008f4c <_dtoa_r+0x32c>)
 8008eac:	f00a 030f 	and.w	r3, sl, #15
 8008eb0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008eb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008eb8:	06f0      	lsls	r0, r6, #27
 8008eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008ec2:	d568      	bpl.n	8008f96 <_dtoa_r+0x376>
 8008ec4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008ec8:	4b21      	ldr	r3, [pc, #132]	; (8008f50 <_dtoa_r+0x330>)
 8008eca:	2503      	movs	r5, #3
 8008ecc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ed0:	f7f7 fc2c 	bl	800072c <__aeabi_ddiv>
 8008ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ed8:	f006 060f 	and.w	r6, r6, #15
 8008edc:	4f1c      	ldr	r7, [pc, #112]	; (8008f50 <_dtoa_r+0x330>)
 8008ede:	e04f      	b.n	8008f80 <_dtoa_r+0x360>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ee4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ee6:	4453      	add	r3, sl
 8008ee8:	f103 0801 	add.w	r8, r3, #1
 8008eec:	9304      	str	r3, [sp, #16]
 8008eee:	4643      	mov	r3, r8
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	bfb8      	it	lt
 8008ef4:	2301      	movlt	r3, #1
 8008ef6:	e7ba      	b.n	8008e6e <_dtoa_r+0x24e>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	e7b2      	b.n	8008e62 <_dtoa_r+0x242>
 8008efc:	2300      	movs	r3, #0
 8008efe:	e7f0      	b.n	8008ee2 <_dtoa_r+0x2c2>
 8008f00:	2501      	movs	r5, #1
 8008f02:	2300      	movs	r3, #0
 8008f04:	9509      	str	r5, [sp, #36]	; 0x24
 8008f06:	931e      	str	r3, [sp, #120]	; 0x78
 8008f08:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	9304      	str	r3, [sp, #16]
 8008f10:	4698      	mov	r8, r3
 8008f12:	2312      	movs	r3, #18
 8008f14:	921f      	str	r2, [sp, #124]	; 0x7c
 8008f16:	e7aa      	b.n	8008e6e <_dtoa_r+0x24e>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f1c:	e7f4      	b.n	8008f08 <_dtoa_r+0x2e8>
 8008f1e:	bf00      	nop
 8008f20:	636f4361 	.word	0x636f4361
 8008f24:	3fd287a7 	.word	0x3fd287a7
 8008f28:	8b60c8b3 	.word	0x8b60c8b3
 8008f2c:	3fc68a28 	.word	0x3fc68a28
 8008f30:	509f79fb 	.word	0x509f79fb
 8008f34:	3fd34413 	.word	0x3fd34413
 8008f38:	7ff00000 	.word	0x7ff00000
 8008f3c:	0800accd 	.word	0x0800accd
 8008f40:	0800acc4 	.word	0x0800acc4
 8008f44:	0800aca1 	.word	0x0800aca1
 8008f48:	3ff80000 	.word	0x3ff80000
 8008f4c:	0800ad00 	.word	0x0800ad00
 8008f50:	0800acd8 	.word	0x0800acd8
 8008f54:	2301      	movs	r3, #1
 8008f56:	9304      	str	r3, [sp, #16]
 8008f58:	4698      	mov	r8, r3
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	e7da      	b.n	8008f14 <_dtoa_r+0x2f4>
 8008f5e:	3101      	adds	r1, #1
 8008f60:	6071      	str	r1, [r6, #4]
 8008f62:	0052      	lsls	r2, r2, #1
 8008f64:	e787      	b.n	8008e76 <_dtoa_r+0x256>
 8008f66:	07f1      	lsls	r1, r6, #31
 8008f68:	d508      	bpl.n	8008f7c <_dtoa_r+0x35c>
 8008f6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f72:	f7f7 fab1 	bl	80004d8 <__aeabi_dmul>
 8008f76:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008f7a:	3501      	adds	r5, #1
 8008f7c:	1076      	asrs	r6, r6, #1
 8008f7e:	3708      	adds	r7, #8
 8008f80:	2e00      	cmp	r6, #0
 8008f82:	d1f0      	bne.n	8008f66 <_dtoa_r+0x346>
 8008f84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f8c:	f7f7 fbce 	bl	800072c <__aeabi_ddiv>
 8008f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f94:	e01b      	b.n	8008fce <_dtoa_r+0x3ae>
 8008f96:	2502      	movs	r5, #2
 8008f98:	e7a0      	b.n	8008edc <_dtoa_r+0x2bc>
 8008f9a:	f000 80a4 	beq.w	80090e6 <_dtoa_r+0x4c6>
 8008f9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008fa2:	f1ca 0600 	rsb	r6, sl, #0
 8008fa6:	4ba0      	ldr	r3, [pc, #640]	; (8009228 <_dtoa_r+0x608>)
 8008fa8:	f006 020f 	and.w	r2, r6, #15
 8008fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	f7f7 fa90 	bl	80004d8 <__aeabi_dmul>
 8008fb8:	2502      	movs	r5, #2
 8008fba:	2300      	movs	r3, #0
 8008fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fc0:	4f9a      	ldr	r7, [pc, #616]	; (800922c <_dtoa_r+0x60c>)
 8008fc2:	1136      	asrs	r6, r6, #4
 8008fc4:	2e00      	cmp	r6, #0
 8008fc6:	f040 8083 	bne.w	80090d0 <_dtoa_r+0x4b0>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1e0      	bne.n	8008f90 <_dtoa_r+0x370>
 8008fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 808a 	beq.w	80090ea <_dtoa_r+0x4ca>
 8008fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fda:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008fde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	4b92      	ldr	r3, [pc, #584]	; (8009230 <_dtoa_r+0x610>)
 8008fe6:	f7f7 fce9 	bl	80009bc <__aeabi_dcmplt>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d07d      	beq.n	80090ea <_dtoa_r+0x4ca>
 8008fee:	f1b8 0f00 	cmp.w	r8, #0
 8008ff2:	d07a      	beq.n	80090ea <_dtoa_r+0x4ca>
 8008ff4:	9b04      	ldr	r3, [sp, #16]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	dd36      	ble.n	8009068 <_dtoa_r+0x448>
 8008ffa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ffe:	2200      	movs	r2, #0
 8009000:	4b8c      	ldr	r3, [pc, #560]	; (8009234 <_dtoa_r+0x614>)
 8009002:	f7f7 fa69 	bl	80004d8 <__aeabi_dmul>
 8009006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800900a:	9e04      	ldr	r6, [sp, #16]
 800900c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8009010:	3501      	adds	r5, #1
 8009012:	4628      	mov	r0, r5
 8009014:	f7f7 f9f6 	bl	8000404 <__aeabi_i2d>
 8009018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800901c:	f7f7 fa5c 	bl	80004d8 <__aeabi_dmul>
 8009020:	2200      	movs	r2, #0
 8009022:	4b85      	ldr	r3, [pc, #532]	; (8009238 <_dtoa_r+0x618>)
 8009024:	f7f7 f8a2 	bl	800016c <__adddf3>
 8009028:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800902c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009030:	950b      	str	r5, [sp, #44]	; 0x2c
 8009032:	2e00      	cmp	r6, #0
 8009034:	d15c      	bne.n	80090f0 <_dtoa_r+0x4d0>
 8009036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800903a:	2200      	movs	r2, #0
 800903c:	4b7f      	ldr	r3, [pc, #508]	; (800923c <_dtoa_r+0x61c>)
 800903e:	f7f7 f893 	bl	8000168 <__aeabi_dsub>
 8009042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009044:	462b      	mov	r3, r5
 8009046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800904a:	f7f7 fcd5 	bl	80009f8 <__aeabi_dcmpgt>
 800904e:	2800      	cmp	r0, #0
 8009050:	f040 8281 	bne.w	8009556 <_dtoa_r+0x936>
 8009054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800905a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800905e:	f7f7 fcad 	bl	80009bc <__aeabi_dcmplt>
 8009062:	2800      	cmp	r0, #0
 8009064:	f040 8275 	bne.w	8009552 <_dtoa_r+0x932>
 8009068:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800906c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009072:	2b00      	cmp	r3, #0
 8009074:	f2c0 814b 	blt.w	800930e <_dtoa_r+0x6ee>
 8009078:	f1ba 0f0e 	cmp.w	sl, #14
 800907c:	f300 8147 	bgt.w	800930e <_dtoa_r+0x6ee>
 8009080:	4b69      	ldr	r3, [pc, #420]	; (8009228 <_dtoa_r+0x608>)
 8009082:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800908e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009090:	2b00      	cmp	r3, #0
 8009092:	f280 80d7 	bge.w	8009244 <_dtoa_r+0x624>
 8009096:	f1b8 0f00 	cmp.w	r8, #0
 800909a:	f300 80d3 	bgt.w	8009244 <_dtoa_r+0x624>
 800909e:	f040 8257 	bne.w	8009550 <_dtoa_r+0x930>
 80090a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090a6:	2200      	movs	r2, #0
 80090a8:	4b64      	ldr	r3, [pc, #400]	; (800923c <_dtoa_r+0x61c>)
 80090aa:	f7f7 fa15 	bl	80004d8 <__aeabi_dmul>
 80090ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090b2:	f7f7 fc97 	bl	80009e4 <__aeabi_dcmpge>
 80090b6:	4646      	mov	r6, r8
 80090b8:	4647      	mov	r7, r8
 80090ba:	2800      	cmp	r0, #0
 80090bc:	f040 822d 	bne.w	800951a <_dtoa_r+0x8fa>
 80090c0:	9b06      	ldr	r3, [sp, #24]
 80090c2:	9a06      	ldr	r2, [sp, #24]
 80090c4:	1c5d      	adds	r5, r3, #1
 80090c6:	2331      	movs	r3, #49	; 0x31
 80090c8:	f10a 0a01 	add.w	sl, sl, #1
 80090cc:	7013      	strb	r3, [r2, #0]
 80090ce:	e228      	b.n	8009522 <_dtoa_r+0x902>
 80090d0:	07f2      	lsls	r2, r6, #31
 80090d2:	d505      	bpl.n	80090e0 <_dtoa_r+0x4c0>
 80090d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d8:	f7f7 f9fe 	bl	80004d8 <__aeabi_dmul>
 80090dc:	2301      	movs	r3, #1
 80090de:	3501      	adds	r5, #1
 80090e0:	1076      	asrs	r6, r6, #1
 80090e2:	3708      	adds	r7, #8
 80090e4:	e76e      	b.n	8008fc4 <_dtoa_r+0x3a4>
 80090e6:	2502      	movs	r5, #2
 80090e8:	e771      	b.n	8008fce <_dtoa_r+0x3ae>
 80090ea:	4657      	mov	r7, sl
 80090ec:	4646      	mov	r6, r8
 80090ee:	e790      	b.n	8009012 <_dtoa_r+0x3f2>
 80090f0:	4b4d      	ldr	r3, [pc, #308]	; (8009228 <_dtoa_r+0x608>)
 80090f2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090f6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80090fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d048      	beq.n	8009192 <_dtoa_r+0x572>
 8009100:	4602      	mov	r2, r0
 8009102:	460b      	mov	r3, r1
 8009104:	2000      	movs	r0, #0
 8009106:	494e      	ldr	r1, [pc, #312]	; (8009240 <_dtoa_r+0x620>)
 8009108:	f7f7 fb10 	bl	800072c <__aeabi_ddiv>
 800910c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009110:	f7f7 f82a 	bl	8000168 <__aeabi_dsub>
 8009114:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009118:	9d06      	ldr	r5, [sp, #24]
 800911a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800911e:	f7f7 fc8b 	bl	8000a38 <__aeabi_d2iz>
 8009122:	9011      	str	r0, [sp, #68]	; 0x44
 8009124:	f7f7 f96e 	bl	8000404 <__aeabi_i2d>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009130:	f7f7 f81a 	bl	8000168 <__aeabi_dsub>
 8009134:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800913a:	3330      	adds	r3, #48	; 0x30
 800913c:	f805 3b01 	strb.w	r3, [r5], #1
 8009140:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009144:	f7f7 fc3a 	bl	80009bc <__aeabi_dcmplt>
 8009148:	2800      	cmp	r0, #0
 800914a:	d163      	bne.n	8009214 <_dtoa_r+0x5f4>
 800914c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009150:	2000      	movs	r0, #0
 8009152:	4937      	ldr	r1, [pc, #220]	; (8009230 <_dtoa_r+0x610>)
 8009154:	f7f7 f808 	bl	8000168 <__aeabi_dsub>
 8009158:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800915c:	f7f7 fc2e 	bl	80009bc <__aeabi_dcmplt>
 8009160:	2800      	cmp	r0, #0
 8009162:	f040 80b5 	bne.w	80092d0 <_dtoa_r+0x6b0>
 8009166:	9b06      	ldr	r3, [sp, #24]
 8009168:	1aeb      	subs	r3, r5, r3
 800916a:	429e      	cmp	r6, r3
 800916c:	f77f af7c 	ble.w	8009068 <_dtoa_r+0x448>
 8009170:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009174:	2200      	movs	r2, #0
 8009176:	4b2f      	ldr	r3, [pc, #188]	; (8009234 <_dtoa_r+0x614>)
 8009178:	f7f7 f9ae 	bl	80004d8 <__aeabi_dmul>
 800917c:	2200      	movs	r2, #0
 800917e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009186:	4b2b      	ldr	r3, [pc, #172]	; (8009234 <_dtoa_r+0x614>)
 8009188:	f7f7 f9a6 	bl	80004d8 <__aeabi_dmul>
 800918c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009190:	e7c3      	b.n	800911a <_dtoa_r+0x4fa>
 8009192:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009196:	f7f7 f99f 	bl	80004d8 <__aeabi_dmul>
 800919a:	9b06      	ldr	r3, [sp, #24]
 800919c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80091a0:	199d      	adds	r5, r3, r6
 80091a2:	461e      	mov	r6, r3
 80091a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091a8:	f7f7 fc46 	bl	8000a38 <__aeabi_d2iz>
 80091ac:	9011      	str	r0, [sp, #68]	; 0x44
 80091ae:	f7f7 f929 	bl	8000404 <__aeabi_i2d>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091ba:	f7f6 ffd5 	bl	8000168 <__aeabi_dsub>
 80091be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091c4:	3330      	adds	r3, #48	; 0x30
 80091c6:	f806 3b01 	strb.w	r3, [r6], #1
 80091ca:	42ae      	cmp	r6, r5
 80091cc:	f04f 0200 	mov.w	r2, #0
 80091d0:	d124      	bne.n	800921c <_dtoa_r+0x5fc>
 80091d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80091d6:	4b1a      	ldr	r3, [pc, #104]	; (8009240 <_dtoa_r+0x620>)
 80091d8:	f7f6 ffc8 	bl	800016c <__adddf3>
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091e4:	f7f7 fc08 	bl	80009f8 <__aeabi_dcmpgt>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d171      	bne.n	80092d0 <_dtoa_r+0x6b0>
 80091ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80091f0:	2000      	movs	r0, #0
 80091f2:	4913      	ldr	r1, [pc, #76]	; (8009240 <_dtoa_r+0x620>)
 80091f4:	f7f6 ffb8 	bl	8000168 <__aeabi_dsub>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009200:	f7f7 fbdc 	bl	80009bc <__aeabi_dcmplt>
 8009204:	2800      	cmp	r0, #0
 8009206:	f43f af2f 	beq.w	8009068 <_dtoa_r+0x448>
 800920a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800920e:	1e6a      	subs	r2, r5, #1
 8009210:	2b30      	cmp	r3, #48	; 0x30
 8009212:	d001      	beq.n	8009218 <_dtoa_r+0x5f8>
 8009214:	46ba      	mov	sl, r7
 8009216:	e04a      	b.n	80092ae <_dtoa_r+0x68e>
 8009218:	4615      	mov	r5, r2
 800921a:	e7f6      	b.n	800920a <_dtoa_r+0x5ea>
 800921c:	4b05      	ldr	r3, [pc, #20]	; (8009234 <_dtoa_r+0x614>)
 800921e:	f7f7 f95b 	bl	80004d8 <__aeabi_dmul>
 8009222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009226:	e7bd      	b.n	80091a4 <_dtoa_r+0x584>
 8009228:	0800ad00 	.word	0x0800ad00
 800922c:	0800acd8 	.word	0x0800acd8
 8009230:	3ff00000 	.word	0x3ff00000
 8009234:	40240000 	.word	0x40240000
 8009238:	401c0000 	.word	0x401c0000
 800923c:	40140000 	.word	0x40140000
 8009240:	3fe00000 	.word	0x3fe00000
 8009244:	9d06      	ldr	r5, [sp, #24]
 8009246:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800924a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800924e:	4630      	mov	r0, r6
 8009250:	4639      	mov	r1, r7
 8009252:	f7f7 fa6b 	bl	800072c <__aeabi_ddiv>
 8009256:	f7f7 fbef 	bl	8000a38 <__aeabi_d2iz>
 800925a:	4681      	mov	r9, r0
 800925c:	f7f7 f8d2 	bl	8000404 <__aeabi_i2d>
 8009260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009264:	f7f7 f938 	bl	80004d8 <__aeabi_dmul>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	4630      	mov	r0, r6
 800926e:	4639      	mov	r1, r7
 8009270:	f7f6 ff7a 	bl	8000168 <__aeabi_dsub>
 8009274:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009278:	f805 6b01 	strb.w	r6, [r5], #1
 800927c:	9e06      	ldr	r6, [sp, #24]
 800927e:	4602      	mov	r2, r0
 8009280:	1bae      	subs	r6, r5, r6
 8009282:	45b0      	cmp	r8, r6
 8009284:	460b      	mov	r3, r1
 8009286:	d135      	bne.n	80092f4 <_dtoa_r+0x6d4>
 8009288:	f7f6 ff70 	bl	800016c <__adddf3>
 800928c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009290:	4606      	mov	r6, r0
 8009292:	460f      	mov	r7, r1
 8009294:	f7f7 fbb0 	bl	80009f8 <__aeabi_dcmpgt>
 8009298:	b9c8      	cbnz	r0, 80092ce <_dtoa_r+0x6ae>
 800929a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800929e:	4630      	mov	r0, r6
 80092a0:	4639      	mov	r1, r7
 80092a2:	f7f7 fb81 	bl	80009a8 <__aeabi_dcmpeq>
 80092a6:	b110      	cbz	r0, 80092ae <_dtoa_r+0x68e>
 80092a8:	f019 0f01 	tst.w	r9, #1
 80092ac:	d10f      	bne.n	80092ce <_dtoa_r+0x6ae>
 80092ae:	4659      	mov	r1, fp
 80092b0:	4620      	mov	r0, r4
 80092b2:	f000 facc 	bl	800984e <_Bfree>
 80092b6:	2300      	movs	r3, #0
 80092b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092ba:	702b      	strb	r3, [r5, #0]
 80092bc:	f10a 0301 	add.w	r3, sl, #1
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f43f acf3 	beq.w	8008cb0 <_dtoa_r+0x90>
 80092ca:	601d      	str	r5, [r3, #0]
 80092cc:	e4f0      	b.n	8008cb0 <_dtoa_r+0x90>
 80092ce:	4657      	mov	r7, sl
 80092d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092d4:	1e6b      	subs	r3, r5, #1
 80092d6:	2a39      	cmp	r2, #57	; 0x39
 80092d8:	d106      	bne.n	80092e8 <_dtoa_r+0x6c8>
 80092da:	9a06      	ldr	r2, [sp, #24]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d107      	bne.n	80092f0 <_dtoa_r+0x6d0>
 80092e0:	2330      	movs	r3, #48	; 0x30
 80092e2:	7013      	strb	r3, [r2, #0]
 80092e4:	4613      	mov	r3, r2
 80092e6:	3701      	adds	r7, #1
 80092e8:	781a      	ldrb	r2, [r3, #0]
 80092ea:	3201      	adds	r2, #1
 80092ec:	701a      	strb	r2, [r3, #0]
 80092ee:	e791      	b.n	8009214 <_dtoa_r+0x5f4>
 80092f0:	461d      	mov	r5, r3
 80092f2:	e7ed      	b.n	80092d0 <_dtoa_r+0x6b0>
 80092f4:	2200      	movs	r2, #0
 80092f6:	4b99      	ldr	r3, [pc, #612]	; (800955c <_dtoa_r+0x93c>)
 80092f8:	f7f7 f8ee 	bl	80004d8 <__aeabi_dmul>
 80092fc:	2200      	movs	r2, #0
 80092fe:	2300      	movs	r3, #0
 8009300:	4606      	mov	r6, r0
 8009302:	460f      	mov	r7, r1
 8009304:	f7f7 fb50 	bl	80009a8 <__aeabi_dcmpeq>
 8009308:	2800      	cmp	r0, #0
 800930a:	d09e      	beq.n	800924a <_dtoa_r+0x62a>
 800930c:	e7cf      	b.n	80092ae <_dtoa_r+0x68e>
 800930e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009310:	2a00      	cmp	r2, #0
 8009312:	f000 8088 	beq.w	8009426 <_dtoa_r+0x806>
 8009316:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009318:	2a01      	cmp	r2, #1
 800931a:	dc6d      	bgt.n	80093f8 <_dtoa_r+0x7d8>
 800931c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800931e:	2a00      	cmp	r2, #0
 8009320:	d066      	beq.n	80093f0 <_dtoa_r+0x7d0>
 8009322:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009326:	464d      	mov	r5, r9
 8009328:	9e08      	ldr	r6, [sp, #32]
 800932a:	9a07      	ldr	r2, [sp, #28]
 800932c:	2101      	movs	r1, #1
 800932e:	441a      	add	r2, r3
 8009330:	4620      	mov	r0, r4
 8009332:	4499      	add	r9, r3
 8009334:	9207      	str	r2, [sp, #28]
 8009336:	f000 fb2a 	bl	800998e <__i2b>
 800933a:	4607      	mov	r7, r0
 800933c:	2d00      	cmp	r5, #0
 800933e:	dd0b      	ble.n	8009358 <_dtoa_r+0x738>
 8009340:	9b07      	ldr	r3, [sp, #28]
 8009342:	2b00      	cmp	r3, #0
 8009344:	dd08      	ble.n	8009358 <_dtoa_r+0x738>
 8009346:	42ab      	cmp	r3, r5
 8009348:	bfa8      	it	ge
 800934a:	462b      	movge	r3, r5
 800934c:	9a07      	ldr	r2, [sp, #28]
 800934e:	eba9 0903 	sub.w	r9, r9, r3
 8009352:	1aed      	subs	r5, r5, r3
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	9307      	str	r3, [sp, #28]
 8009358:	9b08      	ldr	r3, [sp, #32]
 800935a:	b1eb      	cbz	r3, 8009398 <_dtoa_r+0x778>
 800935c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800935e:	2b00      	cmp	r3, #0
 8009360:	d065      	beq.n	800942e <_dtoa_r+0x80e>
 8009362:	b18e      	cbz	r6, 8009388 <_dtoa_r+0x768>
 8009364:	4639      	mov	r1, r7
 8009366:	4632      	mov	r2, r6
 8009368:	4620      	mov	r0, r4
 800936a:	f000 fbaf 	bl	8009acc <__pow5mult>
 800936e:	465a      	mov	r2, fp
 8009370:	4601      	mov	r1, r0
 8009372:	4607      	mov	r7, r0
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fb13 	bl	80099a0 <__multiply>
 800937a:	4659      	mov	r1, fp
 800937c:	900a      	str	r0, [sp, #40]	; 0x28
 800937e:	4620      	mov	r0, r4
 8009380:	f000 fa65 	bl	800984e <_Bfree>
 8009384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009386:	469b      	mov	fp, r3
 8009388:	9b08      	ldr	r3, [sp, #32]
 800938a:	1b9a      	subs	r2, r3, r6
 800938c:	d004      	beq.n	8009398 <_dtoa_r+0x778>
 800938e:	4659      	mov	r1, fp
 8009390:	4620      	mov	r0, r4
 8009392:	f000 fb9b 	bl	8009acc <__pow5mult>
 8009396:	4683      	mov	fp, r0
 8009398:	2101      	movs	r1, #1
 800939a:	4620      	mov	r0, r4
 800939c:	f000 faf7 	bl	800998e <__i2b>
 80093a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093a2:	4606      	mov	r6, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 81c6 	beq.w	8009736 <_dtoa_r+0xb16>
 80093aa:	461a      	mov	r2, r3
 80093ac:	4601      	mov	r1, r0
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 fb8c 	bl	8009acc <__pow5mult>
 80093b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80093b6:	4606      	mov	r6, r0
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	dc3e      	bgt.n	800943a <_dtoa_r+0x81a>
 80093bc:	9b02      	ldr	r3, [sp, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d137      	bne.n	8009432 <_dtoa_r+0x812>
 80093c2:	9b03      	ldr	r3, [sp, #12]
 80093c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d134      	bne.n	8009436 <_dtoa_r+0x816>
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093d2:	0d1b      	lsrs	r3, r3, #20
 80093d4:	051b      	lsls	r3, r3, #20
 80093d6:	b12b      	cbz	r3, 80093e4 <_dtoa_r+0x7c4>
 80093d8:	9b07      	ldr	r3, [sp, #28]
 80093da:	f109 0901 	add.w	r9, r9, #1
 80093de:	3301      	adds	r3, #1
 80093e0:	9307      	str	r3, [sp, #28]
 80093e2:	2301      	movs	r3, #1
 80093e4:	9308      	str	r3, [sp, #32]
 80093e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d128      	bne.n	800943e <_dtoa_r+0x81e>
 80093ec:	2001      	movs	r0, #1
 80093ee:	e02e      	b.n	800944e <_dtoa_r+0x82e>
 80093f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093f6:	e796      	b.n	8009326 <_dtoa_r+0x706>
 80093f8:	9b08      	ldr	r3, [sp, #32]
 80093fa:	f108 36ff 	add.w	r6, r8, #4294967295
 80093fe:	42b3      	cmp	r3, r6
 8009400:	bfb7      	itett	lt
 8009402:	9b08      	ldrlt	r3, [sp, #32]
 8009404:	1b9e      	subge	r6, r3, r6
 8009406:	1af2      	sublt	r2, r6, r3
 8009408:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800940a:	bfbf      	itttt	lt
 800940c:	9608      	strlt	r6, [sp, #32]
 800940e:	189b      	addlt	r3, r3, r2
 8009410:	930c      	strlt	r3, [sp, #48]	; 0x30
 8009412:	2600      	movlt	r6, #0
 8009414:	f1b8 0f00 	cmp.w	r8, #0
 8009418:	bfb9      	ittee	lt
 800941a:	eba9 0508 	sublt.w	r5, r9, r8
 800941e:	2300      	movlt	r3, #0
 8009420:	464d      	movge	r5, r9
 8009422:	4643      	movge	r3, r8
 8009424:	e781      	b.n	800932a <_dtoa_r+0x70a>
 8009426:	9e08      	ldr	r6, [sp, #32]
 8009428:	464d      	mov	r5, r9
 800942a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800942c:	e786      	b.n	800933c <_dtoa_r+0x71c>
 800942e:	9a08      	ldr	r2, [sp, #32]
 8009430:	e7ad      	b.n	800938e <_dtoa_r+0x76e>
 8009432:	2300      	movs	r3, #0
 8009434:	e7d6      	b.n	80093e4 <_dtoa_r+0x7c4>
 8009436:	9b02      	ldr	r3, [sp, #8]
 8009438:	e7d4      	b.n	80093e4 <_dtoa_r+0x7c4>
 800943a:	2300      	movs	r3, #0
 800943c:	9308      	str	r3, [sp, #32]
 800943e:	6933      	ldr	r3, [r6, #16]
 8009440:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009444:	6918      	ldr	r0, [r3, #16]
 8009446:	f000 fa54 	bl	80098f2 <__hi0bits>
 800944a:	f1c0 0020 	rsb	r0, r0, #32
 800944e:	9b07      	ldr	r3, [sp, #28]
 8009450:	4418      	add	r0, r3
 8009452:	f010 001f 	ands.w	r0, r0, #31
 8009456:	d047      	beq.n	80094e8 <_dtoa_r+0x8c8>
 8009458:	f1c0 0320 	rsb	r3, r0, #32
 800945c:	2b04      	cmp	r3, #4
 800945e:	dd3b      	ble.n	80094d8 <_dtoa_r+0x8b8>
 8009460:	9b07      	ldr	r3, [sp, #28]
 8009462:	f1c0 001c 	rsb	r0, r0, #28
 8009466:	4481      	add	r9, r0
 8009468:	4405      	add	r5, r0
 800946a:	4403      	add	r3, r0
 800946c:	9307      	str	r3, [sp, #28]
 800946e:	f1b9 0f00 	cmp.w	r9, #0
 8009472:	dd05      	ble.n	8009480 <_dtoa_r+0x860>
 8009474:	4659      	mov	r1, fp
 8009476:	464a      	mov	r2, r9
 8009478:	4620      	mov	r0, r4
 800947a:	f000 fb75 	bl	8009b68 <__lshift>
 800947e:	4683      	mov	fp, r0
 8009480:	9b07      	ldr	r3, [sp, #28]
 8009482:	2b00      	cmp	r3, #0
 8009484:	dd05      	ble.n	8009492 <_dtoa_r+0x872>
 8009486:	4631      	mov	r1, r6
 8009488:	461a      	mov	r2, r3
 800948a:	4620      	mov	r0, r4
 800948c:	f000 fb6c 	bl	8009b68 <__lshift>
 8009490:	4606      	mov	r6, r0
 8009492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009494:	b353      	cbz	r3, 80094ec <_dtoa_r+0x8cc>
 8009496:	4631      	mov	r1, r6
 8009498:	4658      	mov	r0, fp
 800949a:	f000 fbb9 	bl	8009c10 <__mcmp>
 800949e:	2800      	cmp	r0, #0
 80094a0:	da24      	bge.n	80094ec <_dtoa_r+0x8cc>
 80094a2:	2300      	movs	r3, #0
 80094a4:	4659      	mov	r1, fp
 80094a6:	220a      	movs	r2, #10
 80094a8:	4620      	mov	r0, r4
 80094aa:	f000 f9e7 	bl	800987c <__multadd>
 80094ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094b4:	4683      	mov	fp, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 8144 	beq.w	8009744 <_dtoa_r+0xb24>
 80094bc:	2300      	movs	r3, #0
 80094be:	4639      	mov	r1, r7
 80094c0:	220a      	movs	r2, #10
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 f9da 	bl	800987c <__multadd>
 80094c8:	9b04      	ldr	r3, [sp, #16]
 80094ca:	4607      	mov	r7, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	dc4d      	bgt.n	800956c <_dtoa_r+0x94c>
 80094d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	dd4a      	ble.n	800956c <_dtoa_r+0x94c>
 80094d6:	e011      	b.n	80094fc <_dtoa_r+0x8dc>
 80094d8:	d0c9      	beq.n	800946e <_dtoa_r+0x84e>
 80094da:	9a07      	ldr	r2, [sp, #28]
 80094dc:	331c      	adds	r3, #28
 80094de:	441a      	add	r2, r3
 80094e0:	4499      	add	r9, r3
 80094e2:	441d      	add	r5, r3
 80094e4:	4613      	mov	r3, r2
 80094e6:	e7c1      	b.n	800946c <_dtoa_r+0x84c>
 80094e8:	4603      	mov	r3, r0
 80094ea:	e7f6      	b.n	80094da <_dtoa_r+0x8ba>
 80094ec:	f1b8 0f00 	cmp.w	r8, #0
 80094f0:	dc36      	bgt.n	8009560 <_dtoa_r+0x940>
 80094f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	dd33      	ble.n	8009560 <_dtoa_r+0x940>
 80094f8:	f8cd 8010 	str.w	r8, [sp, #16]
 80094fc:	9b04      	ldr	r3, [sp, #16]
 80094fe:	b963      	cbnz	r3, 800951a <_dtoa_r+0x8fa>
 8009500:	4631      	mov	r1, r6
 8009502:	2205      	movs	r2, #5
 8009504:	4620      	mov	r0, r4
 8009506:	f000 f9b9 	bl	800987c <__multadd>
 800950a:	4601      	mov	r1, r0
 800950c:	4606      	mov	r6, r0
 800950e:	4658      	mov	r0, fp
 8009510:	f000 fb7e 	bl	8009c10 <__mcmp>
 8009514:	2800      	cmp	r0, #0
 8009516:	f73f add3 	bgt.w	80090c0 <_dtoa_r+0x4a0>
 800951a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800951c:	9d06      	ldr	r5, [sp, #24]
 800951e:	ea6f 0a03 	mvn.w	sl, r3
 8009522:	f04f 0900 	mov.w	r9, #0
 8009526:	4631      	mov	r1, r6
 8009528:	4620      	mov	r0, r4
 800952a:	f000 f990 	bl	800984e <_Bfree>
 800952e:	2f00      	cmp	r7, #0
 8009530:	f43f aebd 	beq.w	80092ae <_dtoa_r+0x68e>
 8009534:	f1b9 0f00 	cmp.w	r9, #0
 8009538:	d005      	beq.n	8009546 <_dtoa_r+0x926>
 800953a:	45b9      	cmp	r9, r7
 800953c:	d003      	beq.n	8009546 <_dtoa_r+0x926>
 800953e:	4649      	mov	r1, r9
 8009540:	4620      	mov	r0, r4
 8009542:	f000 f984 	bl	800984e <_Bfree>
 8009546:	4639      	mov	r1, r7
 8009548:	4620      	mov	r0, r4
 800954a:	f000 f980 	bl	800984e <_Bfree>
 800954e:	e6ae      	b.n	80092ae <_dtoa_r+0x68e>
 8009550:	2600      	movs	r6, #0
 8009552:	4637      	mov	r7, r6
 8009554:	e7e1      	b.n	800951a <_dtoa_r+0x8fa>
 8009556:	46ba      	mov	sl, r7
 8009558:	4637      	mov	r7, r6
 800955a:	e5b1      	b.n	80090c0 <_dtoa_r+0x4a0>
 800955c:	40240000 	.word	0x40240000
 8009560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009562:	f8cd 8010 	str.w	r8, [sp, #16]
 8009566:	2b00      	cmp	r3, #0
 8009568:	f000 80f3 	beq.w	8009752 <_dtoa_r+0xb32>
 800956c:	2d00      	cmp	r5, #0
 800956e:	dd05      	ble.n	800957c <_dtoa_r+0x95c>
 8009570:	4639      	mov	r1, r7
 8009572:	462a      	mov	r2, r5
 8009574:	4620      	mov	r0, r4
 8009576:	f000 faf7 	bl	8009b68 <__lshift>
 800957a:	4607      	mov	r7, r0
 800957c:	9b08      	ldr	r3, [sp, #32]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d04c      	beq.n	800961c <_dtoa_r+0x9fc>
 8009582:	6879      	ldr	r1, [r7, #4]
 8009584:	4620      	mov	r0, r4
 8009586:	f000 f92e 	bl	80097e6 <_Balloc>
 800958a:	4605      	mov	r5, r0
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	f107 010c 	add.w	r1, r7, #12
 8009592:	3202      	adds	r2, #2
 8009594:	0092      	lsls	r2, r2, #2
 8009596:	300c      	adds	r0, #12
 8009598:	f000 f91a 	bl	80097d0 <memcpy>
 800959c:	2201      	movs	r2, #1
 800959e:	4629      	mov	r1, r5
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 fae1 	bl	8009b68 <__lshift>
 80095a6:	46b9      	mov	r9, r7
 80095a8:	4607      	mov	r7, r0
 80095aa:	9b06      	ldr	r3, [sp, #24]
 80095ac:	9307      	str	r3, [sp, #28]
 80095ae:	9b02      	ldr	r3, [sp, #8]
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	9308      	str	r3, [sp, #32]
 80095b6:	4631      	mov	r1, r6
 80095b8:	4658      	mov	r0, fp
 80095ba:	f7ff faa3 	bl	8008b04 <quorem>
 80095be:	4649      	mov	r1, r9
 80095c0:	4605      	mov	r5, r0
 80095c2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80095c6:	4658      	mov	r0, fp
 80095c8:	f000 fb22 	bl	8009c10 <__mcmp>
 80095cc:	463a      	mov	r2, r7
 80095ce:	9002      	str	r0, [sp, #8]
 80095d0:	4631      	mov	r1, r6
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 fb36 	bl	8009c44 <__mdiff>
 80095d8:	68c3      	ldr	r3, [r0, #12]
 80095da:	4602      	mov	r2, r0
 80095dc:	bb03      	cbnz	r3, 8009620 <_dtoa_r+0xa00>
 80095de:	4601      	mov	r1, r0
 80095e0:	9009      	str	r0, [sp, #36]	; 0x24
 80095e2:	4658      	mov	r0, fp
 80095e4:	f000 fb14 	bl	8009c10 <__mcmp>
 80095e8:	4603      	mov	r3, r0
 80095ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095ec:	4611      	mov	r1, r2
 80095ee:	4620      	mov	r0, r4
 80095f0:	9309      	str	r3, [sp, #36]	; 0x24
 80095f2:	f000 f92c 	bl	800984e <_Bfree>
 80095f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f8:	b9a3      	cbnz	r3, 8009624 <_dtoa_r+0xa04>
 80095fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80095fc:	b992      	cbnz	r2, 8009624 <_dtoa_r+0xa04>
 80095fe:	9a08      	ldr	r2, [sp, #32]
 8009600:	b982      	cbnz	r2, 8009624 <_dtoa_r+0xa04>
 8009602:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009606:	d029      	beq.n	800965c <_dtoa_r+0xa3c>
 8009608:	9b02      	ldr	r3, [sp, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	dd01      	ble.n	8009612 <_dtoa_r+0x9f2>
 800960e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009612:	9b07      	ldr	r3, [sp, #28]
 8009614:	1c5d      	adds	r5, r3, #1
 8009616:	f883 8000 	strb.w	r8, [r3]
 800961a:	e784      	b.n	8009526 <_dtoa_r+0x906>
 800961c:	4638      	mov	r0, r7
 800961e:	e7c2      	b.n	80095a6 <_dtoa_r+0x986>
 8009620:	2301      	movs	r3, #1
 8009622:	e7e3      	b.n	80095ec <_dtoa_r+0x9cc>
 8009624:	9a02      	ldr	r2, [sp, #8]
 8009626:	2a00      	cmp	r2, #0
 8009628:	db04      	blt.n	8009634 <_dtoa_r+0xa14>
 800962a:	d123      	bne.n	8009674 <_dtoa_r+0xa54>
 800962c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800962e:	bb0a      	cbnz	r2, 8009674 <_dtoa_r+0xa54>
 8009630:	9a08      	ldr	r2, [sp, #32]
 8009632:	b9fa      	cbnz	r2, 8009674 <_dtoa_r+0xa54>
 8009634:	2b00      	cmp	r3, #0
 8009636:	ddec      	ble.n	8009612 <_dtoa_r+0x9f2>
 8009638:	4659      	mov	r1, fp
 800963a:	2201      	movs	r2, #1
 800963c:	4620      	mov	r0, r4
 800963e:	f000 fa93 	bl	8009b68 <__lshift>
 8009642:	4631      	mov	r1, r6
 8009644:	4683      	mov	fp, r0
 8009646:	f000 fae3 	bl	8009c10 <__mcmp>
 800964a:	2800      	cmp	r0, #0
 800964c:	dc03      	bgt.n	8009656 <_dtoa_r+0xa36>
 800964e:	d1e0      	bne.n	8009612 <_dtoa_r+0x9f2>
 8009650:	f018 0f01 	tst.w	r8, #1
 8009654:	d0dd      	beq.n	8009612 <_dtoa_r+0x9f2>
 8009656:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800965a:	d1d8      	bne.n	800960e <_dtoa_r+0x9ee>
 800965c:	9b07      	ldr	r3, [sp, #28]
 800965e:	9a07      	ldr	r2, [sp, #28]
 8009660:	1c5d      	adds	r5, r3, #1
 8009662:	2339      	movs	r3, #57	; 0x39
 8009664:	7013      	strb	r3, [r2, #0]
 8009666:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800966a:	1e6a      	subs	r2, r5, #1
 800966c:	2b39      	cmp	r3, #57	; 0x39
 800966e:	d04d      	beq.n	800970c <_dtoa_r+0xaec>
 8009670:	3301      	adds	r3, #1
 8009672:	e052      	b.n	800971a <_dtoa_r+0xafa>
 8009674:	9a07      	ldr	r2, [sp, #28]
 8009676:	2b00      	cmp	r3, #0
 8009678:	f102 0501 	add.w	r5, r2, #1
 800967c:	dd06      	ble.n	800968c <_dtoa_r+0xa6c>
 800967e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009682:	d0eb      	beq.n	800965c <_dtoa_r+0xa3c>
 8009684:	f108 0801 	add.w	r8, r8, #1
 8009688:	9b07      	ldr	r3, [sp, #28]
 800968a:	e7c4      	b.n	8009616 <_dtoa_r+0x9f6>
 800968c:	9b06      	ldr	r3, [sp, #24]
 800968e:	9a04      	ldr	r2, [sp, #16]
 8009690:	1aeb      	subs	r3, r5, r3
 8009692:	4293      	cmp	r3, r2
 8009694:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009698:	d021      	beq.n	80096de <_dtoa_r+0xabe>
 800969a:	4659      	mov	r1, fp
 800969c:	2300      	movs	r3, #0
 800969e:	220a      	movs	r2, #10
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 f8eb 	bl	800987c <__multadd>
 80096a6:	45b9      	cmp	r9, r7
 80096a8:	4683      	mov	fp, r0
 80096aa:	f04f 0300 	mov.w	r3, #0
 80096ae:	f04f 020a 	mov.w	r2, #10
 80096b2:	4649      	mov	r1, r9
 80096b4:	4620      	mov	r0, r4
 80096b6:	d105      	bne.n	80096c4 <_dtoa_r+0xaa4>
 80096b8:	f000 f8e0 	bl	800987c <__multadd>
 80096bc:	4681      	mov	r9, r0
 80096be:	4607      	mov	r7, r0
 80096c0:	9507      	str	r5, [sp, #28]
 80096c2:	e778      	b.n	80095b6 <_dtoa_r+0x996>
 80096c4:	f000 f8da 	bl	800987c <__multadd>
 80096c8:	4639      	mov	r1, r7
 80096ca:	4681      	mov	r9, r0
 80096cc:	2300      	movs	r3, #0
 80096ce:	220a      	movs	r2, #10
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 f8d3 	bl	800987c <__multadd>
 80096d6:	4607      	mov	r7, r0
 80096d8:	e7f2      	b.n	80096c0 <_dtoa_r+0xaa0>
 80096da:	f04f 0900 	mov.w	r9, #0
 80096de:	4659      	mov	r1, fp
 80096e0:	2201      	movs	r2, #1
 80096e2:	4620      	mov	r0, r4
 80096e4:	f000 fa40 	bl	8009b68 <__lshift>
 80096e8:	4631      	mov	r1, r6
 80096ea:	4683      	mov	fp, r0
 80096ec:	f000 fa90 	bl	8009c10 <__mcmp>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	dcb8      	bgt.n	8009666 <_dtoa_r+0xa46>
 80096f4:	d102      	bne.n	80096fc <_dtoa_r+0xadc>
 80096f6:	f018 0f01 	tst.w	r8, #1
 80096fa:	d1b4      	bne.n	8009666 <_dtoa_r+0xa46>
 80096fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009700:	1e6a      	subs	r2, r5, #1
 8009702:	2b30      	cmp	r3, #48	; 0x30
 8009704:	f47f af0f 	bne.w	8009526 <_dtoa_r+0x906>
 8009708:	4615      	mov	r5, r2
 800970a:	e7f7      	b.n	80096fc <_dtoa_r+0xadc>
 800970c:	9b06      	ldr	r3, [sp, #24]
 800970e:	4293      	cmp	r3, r2
 8009710:	d105      	bne.n	800971e <_dtoa_r+0xafe>
 8009712:	2331      	movs	r3, #49	; 0x31
 8009714:	9a06      	ldr	r2, [sp, #24]
 8009716:	f10a 0a01 	add.w	sl, sl, #1
 800971a:	7013      	strb	r3, [r2, #0]
 800971c:	e703      	b.n	8009526 <_dtoa_r+0x906>
 800971e:	4615      	mov	r5, r2
 8009720:	e7a1      	b.n	8009666 <_dtoa_r+0xa46>
 8009722:	4b17      	ldr	r3, [pc, #92]	; (8009780 <_dtoa_r+0xb60>)
 8009724:	f7ff bae1 	b.w	8008cea <_dtoa_r+0xca>
 8009728:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800972a:	2b00      	cmp	r3, #0
 800972c:	f47f aabb 	bne.w	8008ca6 <_dtoa_r+0x86>
 8009730:	4b14      	ldr	r3, [pc, #80]	; (8009784 <_dtoa_r+0xb64>)
 8009732:	f7ff bada 	b.w	8008cea <_dtoa_r+0xca>
 8009736:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009738:	2b01      	cmp	r3, #1
 800973a:	f77f ae3f 	ble.w	80093bc <_dtoa_r+0x79c>
 800973e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009740:	9308      	str	r3, [sp, #32]
 8009742:	e653      	b.n	80093ec <_dtoa_r+0x7cc>
 8009744:	9b04      	ldr	r3, [sp, #16]
 8009746:	2b00      	cmp	r3, #0
 8009748:	dc03      	bgt.n	8009752 <_dtoa_r+0xb32>
 800974a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800974c:	2b02      	cmp	r3, #2
 800974e:	f73f aed5 	bgt.w	80094fc <_dtoa_r+0x8dc>
 8009752:	9d06      	ldr	r5, [sp, #24]
 8009754:	4631      	mov	r1, r6
 8009756:	4658      	mov	r0, fp
 8009758:	f7ff f9d4 	bl	8008b04 <quorem>
 800975c:	9b06      	ldr	r3, [sp, #24]
 800975e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009762:	f805 8b01 	strb.w	r8, [r5], #1
 8009766:	9a04      	ldr	r2, [sp, #16]
 8009768:	1aeb      	subs	r3, r5, r3
 800976a:	429a      	cmp	r2, r3
 800976c:	ddb5      	ble.n	80096da <_dtoa_r+0xaba>
 800976e:	4659      	mov	r1, fp
 8009770:	2300      	movs	r3, #0
 8009772:	220a      	movs	r2, #10
 8009774:	4620      	mov	r0, r4
 8009776:	f000 f881 	bl	800987c <__multadd>
 800977a:	4683      	mov	fp, r0
 800977c:	e7ea      	b.n	8009754 <_dtoa_r+0xb34>
 800977e:	bf00      	nop
 8009780:	0800aca0 	.word	0x0800aca0
 8009784:	0800acc4 	.word	0x0800acc4

08009788 <_localeconv_r>:
 8009788:	4b04      	ldr	r3, [pc, #16]	; (800979c <_localeconv_r+0x14>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6a18      	ldr	r0, [r3, #32]
 800978e:	4b04      	ldr	r3, [pc, #16]	; (80097a0 <_localeconv_r+0x18>)
 8009790:	2800      	cmp	r0, #0
 8009792:	bf08      	it	eq
 8009794:	4618      	moveq	r0, r3
 8009796:	30f0      	adds	r0, #240	; 0xf0
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	20000014 	.word	0x20000014
 80097a0:	20000078 	.word	0x20000078

080097a4 <malloc>:
 80097a4:	4b02      	ldr	r3, [pc, #8]	; (80097b0 <malloc+0xc>)
 80097a6:	4601      	mov	r1, r0
 80097a8:	6818      	ldr	r0, [r3, #0]
 80097aa:	f000 bb53 	b.w	8009e54 <_malloc_r>
 80097ae:	bf00      	nop
 80097b0:	20000014 	.word	0x20000014

080097b4 <memchr>:
 80097b4:	b510      	push	{r4, lr}
 80097b6:	b2c9      	uxtb	r1, r1
 80097b8:	4402      	add	r2, r0
 80097ba:	4290      	cmp	r0, r2
 80097bc:	4603      	mov	r3, r0
 80097be:	d101      	bne.n	80097c4 <memchr+0x10>
 80097c0:	2300      	movs	r3, #0
 80097c2:	e003      	b.n	80097cc <memchr+0x18>
 80097c4:	781c      	ldrb	r4, [r3, #0]
 80097c6:	3001      	adds	r0, #1
 80097c8:	428c      	cmp	r4, r1
 80097ca:	d1f6      	bne.n	80097ba <memchr+0x6>
 80097cc:	4618      	mov	r0, r3
 80097ce:	bd10      	pop	{r4, pc}

080097d0 <memcpy>:
 80097d0:	b510      	push	{r4, lr}
 80097d2:	1e43      	subs	r3, r0, #1
 80097d4:	440a      	add	r2, r1
 80097d6:	4291      	cmp	r1, r2
 80097d8:	d100      	bne.n	80097dc <memcpy+0xc>
 80097da:	bd10      	pop	{r4, pc}
 80097dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097e4:	e7f7      	b.n	80097d6 <memcpy+0x6>

080097e6 <_Balloc>:
 80097e6:	b570      	push	{r4, r5, r6, lr}
 80097e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097ea:	4604      	mov	r4, r0
 80097ec:	460e      	mov	r6, r1
 80097ee:	b93d      	cbnz	r5, 8009800 <_Balloc+0x1a>
 80097f0:	2010      	movs	r0, #16
 80097f2:	f7ff ffd7 	bl	80097a4 <malloc>
 80097f6:	6260      	str	r0, [r4, #36]	; 0x24
 80097f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097fc:	6005      	str	r5, [r0, #0]
 80097fe:	60c5      	str	r5, [r0, #12]
 8009800:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009802:	68eb      	ldr	r3, [r5, #12]
 8009804:	b183      	cbz	r3, 8009828 <_Balloc+0x42>
 8009806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800980e:	b9b8      	cbnz	r0, 8009840 <_Balloc+0x5a>
 8009810:	2101      	movs	r1, #1
 8009812:	fa01 f506 	lsl.w	r5, r1, r6
 8009816:	1d6a      	adds	r2, r5, #5
 8009818:	0092      	lsls	r2, r2, #2
 800981a:	4620      	mov	r0, r4
 800981c:	f000 fabf 	bl	8009d9e <_calloc_r>
 8009820:	b160      	cbz	r0, 800983c <_Balloc+0x56>
 8009822:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009826:	e00e      	b.n	8009846 <_Balloc+0x60>
 8009828:	2221      	movs	r2, #33	; 0x21
 800982a:	2104      	movs	r1, #4
 800982c:	4620      	mov	r0, r4
 800982e:	f000 fab6 	bl	8009d9e <_calloc_r>
 8009832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009834:	60e8      	str	r0, [r5, #12]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1e4      	bne.n	8009806 <_Balloc+0x20>
 800983c:	2000      	movs	r0, #0
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	6802      	ldr	r2, [r0, #0]
 8009842:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009846:	2300      	movs	r3, #0
 8009848:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800984c:	e7f7      	b.n	800983e <_Balloc+0x58>

0800984e <_Bfree>:
 800984e:	b570      	push	{r4, r5, r6, lr}
 8009850:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009852:	4606      	mov	r6, r0
 8009854:	460d      	mov	r5, r1
 8009856:	b93c      	cbnz	r4, 8009868 <_Bfree+0x1a>
 8009858:	2010      	movs	r0, #16
 800985a:	f7ff ffa3 	bl	80097a4 <malloc>
 800985e:	6270      	str	r0, [r6, #36]	; 0x24
 8009860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009864:	6004      	str	r4, [r0, #0]
 8009866:	60c4      	str	r4, [r0, #12]
 8009868:	b13d      	cbz	r5, 800987a <_Bfree+0x2c>
 800986a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800986c:	686a      	ldr	r2, [r5, #4]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009874:	6029      	str	r1, [r5, #0]
 8009876:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800987a:	bd70      	pop	{r4, r5, r6, pc}

0800987c <__multadd>:
 800987c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009880:	461f      	mov	r7, r3
 8009882:	4606      	mov	r6, r0
 8009884:	460c      	mov	r4, r1
 8009886:	2300      	movs	r3, #0
 8009888:	690d      	ldr	r5, [r1, #16]
 800988a:	f101 0c14 	add.w	ip, r1, #20
 800988e:	f8dc 0000 	ldr.w	r0, [ip]
 8009892:	3301      	adds	r3, #1
 8009894:	b281      	uxth	r1, r0
 8009896:	fb02 7101 	mla	r1, r2, r1, r7
 800989a:	0c00      	lsrs	r0, r0, #16
 800989c:	0c0f      	lsrs	r7, r1, #16
 800989e:	fb02 7000 	mla	r0, r2, r0, r7
 80098a2:	b289      	uxth	r1, r1
 80098a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80098a8:	429d      	cmp	r5, r3
 80098aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80098ae:	f84c 1b04 	str.w	r1, [ip], #4
 80098b2:	dcec      	bgt.n	800988e <__multadd+0x12>
 80098b4:	b1d7      	cbz	r7, 80098ec <__multadd+0x70>
 80098b6:	68a3      	ldr	r3, [r4, #8]
 80098b8:	42ab      	cmp	r3, r5
 80098ba:	dc12      	bgt.n	80098e2 <__multadd+0x66>
 80098bc:	6861      	ldr	r1, [r4, #4]
 80098be:	4630      	mov	r0, r6
 80098c0:	3101      	adds	r1, #1
 80098c2:	f7ff ff90 	bl	80097e6 <_Balloc>
 80098c6:	4680      	mov	r8, r0
 80098c8:	6922      	ldr	r2, [r4, #16]
 80098ca:	f104 010c 	add.w	r1, r4, #12
 80098ce:	3202      	adds	r2, #2
 80098d0:	0092      	lsls	r2, r2, #2
 80098d2:	300c      	adds	r0, #12
 80098d4:	f7ff ff7c 	bl	80097d0 <memcpy>
 80098d8:	4621      	mov	r1, r4
 80098da:	4630      	mov	r0, r6
 80098dc:	f7ff ffb7 	bl	800984e <_Bfree>
 80098e0:	4644      	mov	r4, r8
 80098e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098e6:	3501      	adds	r5, #1
 80098e8:	615f      	str	r7, [r3, #20]
 80098ea:	6125      	str	r5, [r4, #16]
 80098ec:	4620      	mov	r0, r4
 80098ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080098f2 <__hi0bits>:
 80098f2:	0c02      	lsrs	r2, r0, #16
 80098f4:	0412      	lsls	r2, r2, #16
 80098f6:	4603      	mov	r3, r0
 80098f8:	b9b2      	cbnz	r2, 8009928 <__hi0bits+0x36>
 80098fa:	0403      	lsls	r3, r0, #16
 80098fc:	2010      	movs	r0, #16
 80098fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009902:	bf04      	itt	eq
 8009904:	021b      	lsleq	r3, r3, #8
 8009906:	3008      	addeq	r0, #8
 8009908:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800990c:	bf04      	itt	eq
 800990e:	011b      	lsleq	r3, r3, #4
 8009910:	3004      	addeq	r0, #4
 8009912:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009916:	bf04      	itt	eq
 8009918:	009b      	lsleq	r3, r3, #2
 800991a:	3002      	addeq	r0, #2
 800991c:	2b00      	cmp	r3, #0
 800991e:	db06      	blt.n	800992e <__hi0bits+0x3c>
 8009920:	005b      	lsls	r3, r3, #1
 8009922:	d503      	bpl.n	800992c <__hi0bits+0x3a>
 8009924:	3001      	adds	r0, #1
 8009926:	4770      	bx	lr
 8009928:	2000      	movs	r0, #0
 800992a:	e7e8      	b.n	80098fe <__hi0bits+0xc>
 800992c:	2020      	movs	r0, #32
 800992e:	4770      	bx	lr

08009930 <__lo0bits>:
 8009930:	6803      	ldr	r3, [r0, #0]
 8009932:	4601      	mov	r1, r0
 8009934:	f013 0207 	ands.w	r2, r3, #7
 8009938:	d00b      	beq.n	8009952 <__lo0bits+0x22>
 800993a:	07da      	lsls	r2, r3, #31
 800993c:	d423      	bmi.n	8009986 <__lo0bits+0x56>
 800993e:	0798      	lsls	r0, r3, #30
 8009940:	bf49      	itett	mi
 8009942:	085b      	lsrmi	r3, r3, #1
 8009944:	089b      	lsrpl	r3, r3, #2
 8009946:	2001      	movmi	r0, #1
 8009948:	600b      	strmi	r3, [r1, #0]
 800994a:	bf5c      	itt	pl
 800994c:	600b      	strpl	r3, [r1, #0]
 800994e:	2002      	movpl	r0, #2
 8009950:	4770      	bx	lr
 8009952:	b298      	uxth	r0, r3
 8009954:	b9a8      	cbnz	r0, 8009982 <__lo0bits+0x52>
 8009956:	2010      	movs	r0, #16
 8009958:	0c1b      	lsrs	r3, r3, #16
 800995a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800995e:	bf04      	itt	eq
 8009960:	0a1b      	lsreq	r3, r3, #8
 8009962:	3008      	addeq	r0, #8
 8009964:	071a      	lsls	r2, r3, #28
 8009966:	bf04      	itt	eq
 8009968:	091b      	lsreq	r3, r3, #4
 800996a:	3004      	addeq	r0, #4
 800996c:	079a      	lsls	r2, r3, #30
 800996e:	bf04      	itt	eq
 8009970:	089b      	lsreq	r3, r3, #2
 8009972:	3002      	addeq	r0, #2
 8009974:	07da      	lsls	r2, r3, #31
 8009976:	d402      	bmi.n	800997e <__lo0bits+0x4e>
 8009978:	085b      	lsrs	r3, r3, #1
 800997a:	d006      	beq.n	800998a <__lo0bits+0x5a>
 800997c:	3001      	adds	r0, #1
 800997e:	600b      	str	r3, [r1, #0]
 8009980:	4770      	bx	lr
 8009982:	4610      	mov	r0, r2
 8009984:	e7e9      	b.n	800995a <__lo0bits+0x2a>
 8009986:	2000      	movs	r0, #0
 8009988:	4770      	bx	lr
 800998a:	2020      	movs	r0, #32
 800998c:	4770      	bx	lr

0800998e <__i2b>:
 800998e:	b510      	push	{r4, lr}
 8009990:	460c      	mov	r4, r1
 8009992:	2101      	movs	r1, #1
 8009994:	f7ff ff27 	bl	80097e6 <_Balloc>
 8009998:	2201      	movs	r2, #1
 800999a:	6144      	str	r4, [r0, #20]
 800999c:	6102      	str	r2, [r0, #16]
 800999e:	bd10      	pop	{r4, pc}

080099a0 <__multiply>:
 80099a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	4614      	mov	r4, r2
 80099a6:	690a      	ldr	r2, [r1, #16]
 80099a8:	6923      	ldr	r3, [r4, #16]
 80099aa:	4688      	mov	r8, r1
 80099ac:	429a      	cmp	r2, r3
 80099ae:	bfbe      	ittt	lt
 80099b0:	460b      	movlt	r3, r1
 80099b2:	46a0      	movlt	r8, r4
 80099b4:	461c      	movlt	r4, r3
 80099b6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80099ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80099be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80099c6:	eb07 0609 	add.w	r6, r7, r9
 80099ca:	42b3      	cmp	r3, r6
 80099cc:	bfb8      	it	lt
 80099ce:	3101      	addlt	r1, #1
 80099d0:	f7ff ff09 	bl	80097e6 <_Balloc>
 80099d4:	f100 0514 	add.w	r5, r0, #20
 80099d8:	462b      	mov	r3, r5
 80099da:	2200      	movs	r2, #0
 80099dc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80099e0:	4573      	cmp	r3, lr
 80099e2:	d316      	bcc.n	8009a12 <__multiply+0x72>
 80099e4:	f104 0214 	add.w	r2, r4, #20
 80099e8:	f108 0114 	add.w	r1, r8, #20
 80099ec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80099f0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	9b00      	ldr	r3, [sp, #0]
 80099f8:	9201      	str	r2, [sp, #4]
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d80c      	bhi.n	8009a18 <__multiply+0x78>
 80099fe:	2e00      	cmp	r6, #0
 8009a00:	dd03      	ble.n	8009a0a <__multiply+0x6a>
 8009a02:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d05d      	beq.n	8009ac6 <__multiply+0x126>
 8009a0a:	6106      	str	r6, [r0, #16]
 8009a0c:	b003      	add	sp, #12
 8009a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a12:	f843 2b04 	str.w	r2, [r3], #4
 8009a16:	e7e3      	b.n	80099e0 <__multiply+0x40>
 8009a18:	f8b2 b000 	ldrh.w	fp, [r2]
 8009a1c:	f1bb 0f00 	cmp.w	fp, #0
 8009a20:	d023      	beq.n	8009a6a <__multiply+0xca>
 8009a22:	4689      	mov	r9, r1
 8009a24:	46ac      	mov	ip, r5
 8009a26:	f04f 0800 	mov.w	r8, #0
 8009a2a:	f859 4b04 	ldr.w	r4, [r9], #4
 8009a2e:	f8dc a000 	ldr.w	sl, [ip]
 8009a32:	b2a3      	uxth	r3, r4
 8009a34:	fa1f fa8a 	uxth.w	sl, sl
 8009a38:	fb0b a303 	mla	r3, fp, r3, sl
 8009a3c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a40:	f8dc 4000 	ldr.w	r4, [ip]
 8009a44:	4443      	add	r3, r8
 8009a46:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009a4a:	fb0b 840a 	mla	r4, fp, sl, r8
 8009a4e:	46e2      	mov	sl, ip
 8009a50:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009a5a:	454f      	cmp	r7, r9
 8009a5c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009a60:	f84a 3b04 	str.w	r3, [sl], #4
 8009a64:	d82b      	bhi.n	8009abe <__multiply+0x11e>
 8009a66:	f8cc 8004 	str.w	r8, [ip, #4]
 8009a6a:	9b01      	ldr	r3, [sp, #4]
 8009a6c:	3204      	adds	r2, #4
 8009a6e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009a72:	f1ba 0f00 	cmp.w	sl, #0
 8009a76:	d020      	beq.n	8009aba <__multiply+0x11a>
 8009a78:	4689      	mov	r9, r1
 8009a7a:	46a8      	mov	r8, r5
 8009a7c:	f04f 0b00 	mov.w	fp, #0
 8009a80:	682b      	ldr	r3, [r5, #0]
 8009a82:	f8b9 c000 	ldrh.w	ip, [r9]
 8009a86:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009a90:	46c4      	mov	ip, r8
 8009a92:	445c      	add	r4, fp
 8009a94:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009a98:	f84c 3b04 	str.w	r3, [ip], #4
 8009a9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009aa0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009aa4:	0c1b      	lsrs	r3, r3, #16
 8009aa6:	fb0a b303 	mla	r3, sl, r3, fp
 8009aaa:	454f      	cmp	r7, r9
 8009aac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009ab0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009ab4:	d805      	bhi.n	8009ac2 <__multiply+0x122>
 8009ab6:	f8c8 3004 	str.w	r3, [r8, #4]
 8009aba:	3504      	adds	r5, #4
 8009abc:	e79b      	b.n	80099f6 <__multiply+0x56>
 8009abe:	46d4      	mov	ip, sl
 8009ac0:	e7b3      	b.n	8009a2a <__multiply+0x8a>
 8009ac2:	46e0      	mov	r8, ip
 8009ac4:	e7dd      	b.n	8009a82 <__multiply+0xe2>
 8009ac6:	3e01      	subs	r6, #1
 8009ac8:	e799      	b.n	80099fe <__multiply+0x5e>
	...

08009acc <__pow5mult>:
 8009acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ad0:	4615      	mov	r5, r2
 8009ad2:	f012 0203 	ands.w	r2, r2, #3
 8009ad6:	4606      	mov	r6, r0
 8009ad8:	460f      	mov	r7, r1
 8009ada:	d007      	beq.n	8009aec <__pow5mult+0x20>
 8009adc:	4c21      	ldr	r4, [pc, #132]	; (8009b64 <__pow5mult+0x98>)
 8009ade:	3a01      	subs	r2, #1
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ae6:	f7ff fec9 	bl	800987c <__multadd>
 8009aea:	4607      	mov	r7, r0
 8009aec:	10ad      	asrs	r5, r5, #2
 8009aee:	d035      	beq.n	8009b5c <__pow5mult+0x90>
 8009af0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009af2:	b93c      	cbnz	r4, 8009b04 <__pow5mult+0x38>
 8009af4:	2010      	movs	r0, #16
 8009af6:	f7ff fe55 	bl	80097a4 <malloc>
 8009afa:	6270      	str	r0, [r6, #36]	; 0x24
 8009afc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b00:	6004      	str	r4, [r0, #0]
 8009b02:	60c4      	str	r4, [r0, #12]
 8009b04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b0c:	b94c      	cbnz	r4, 8009b22 <__pow5mult+0x56>
 8009b0e:	f240 2171 	movw	r1, #625	; 0x271
 8009b12:	4630      	mov	r0, r6
 8009b14:	f7ff ff3b 	bl	800998e <__i2b>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b20:	6003      	str	r3, [r0, #0]
 8009b22:	f04f 0800 	mov.w	r8, #0
 8009b26:	07eb      	lsls	r3, r5, #31
 8009b28:	d50a      	bpl.n	8009b40 <__pow5mult+0x74>
 8009b2a:	4639      	mov	r1, r7
 8009b2c:	4622      	mov	r2, r4
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f7ff ff36 	bl	80099a0 <__multiply>
 8009b34:	4681      	mov	r9, r0
 8009b36:	4639      	mov	r1, r7
 8009b38:	4630      	mov	r0, r6
 8009b3a:	f7ff fe88 	bl	800984e <_Bfree>
 8009b3e:	464f      	mov	r7, r9
 8009b40:	106d      	asrs	r5, r5, #1
 8009b42:	d00b      	beq.n	8009b5c <__pow5mult+0x90>
 8009b44:	6820      	ldr	r0, [r4, #0]
 8009b46:	b938      	cbnz	r0, 8009b58 <__pow5mult+0x8c>
 8009b48:	4622      	mov	r2, r4
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f7ff ff27 	bl	80099a0 <__multiply>
 8009b52:	6020      	str	r0, [r4, #0]
 8009b54:	f8c0 8000 	str.w	r8, [r0]
 8009b58:	4604      	mov	r4, r0
 8009b5a:	e7e4      	b.n	8009b26 <__pow5mult+0x5a>
 8009b5c:	4638      	mov	r0, r7
 8009b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b62:	bf00      	nop
 8009b64:	0800adc8 	.word	0x0800adc8

08009b68 <__lshift>:
 8009b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	4607      	mov	r7, r0
 8009b70:	4616      	mov	r6, r2
 8009b72:	6923      	ldr	r3, [r4, #16]
 8009b74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b78:	eb0a 0903 	add.w	r9, sl, r3
 8009b7c:	6849      	ldr	r1, [r1, #4]
 8009b7e:	68a3      	ldr	r3, [r4, #8]
 8009b80:	f109 0501 	add.w	r5, r9, #1
 8009b84:	42ab      	cmp	r3, r5
 8009b86:	db32      	blt.n	8009bee <__lshift+0x86>
 8009b88:	4638      	mov	r0, r7
 8009b8a:	f7ff fe2c 	bl	80097e6 <_Balloc>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	4680      	mov	r8, r0
 8009b92:	461a      	mov	r2, r3
 8009b94:	f100 0114 	add.w	r1, r0, #20
 8009b98:	4553      	cmp	r3, sl
 8009b9a:	db2b      	blt.n	8009bf4 <__lshift+0x8c>
 8009b9c:	6920      	ldr	r0, [r4, #16]
 8009b9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ba2:	f104 0314 	add.w	r3, r4, #20
 8009ba6:	f016 021f 	ands.w	r2, r6, #31
 8009baa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009bae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009bb2:	d025      	beq.n	8009c00 <__lshift+0x98>
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	f1c2 0e20 	rsb	lr, r2, #32
 8009bba:	468a      	mov	sl, r1
 8009bbc:	681e      	ldr	r6, [r3, #0]
 8009bbe:	4096      	lsls	r6, r2
 8009bc0:	4330      	orrs	r0, r6
 8009bc2:	f84a 0b04 	str.w	r0, [sl], #4
 8009bc6:	f853 0b04 	ldr.w	r0, [r3], #4
 8009bca:	459c      	cmp	ip, r3
 8009bcc:	fa20 f00e 	lsr.w	r0, r0, lr
 8009bd0:	d814      	bhi.n	8009bfc <__lshift+0x94>
 8009bd2:	6048      	str	r0, [r1, #4]
 8009bd4:	b108      	cbz	r0, 8009bda <__lshift+0x72>
 8009bd6:	f109 0502 	add.w	r5, r9, #2
 8009bda:	3d01      	subs	r5, #1
 8009bdc:	4638      	mov	r0, r7
 8009bde:	f8c8 5010 	str.w	r5, [r8, #16]
 8009be2:	4621      	mov	r1, r4
 8009be4:	f7ff fe33 	bl	800984e <_Bfree>
 8009be8:	4640      	mov	r0, r8
 8009bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bee:	3101      	adds	r1, #1
 8009bf0:	005b      	lsls	r3, r3, #1
 8009bf2:	e7c7      	b.n	8009b84 <__lshift+0x1c>
 8009bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	e7cd      	b.n	8009b98 <__lshift+0x30>
 8009bfc:	4651      	mov	r1, sl
 8009bfe:	e7dc      	b.n	8009bba <__lshift+0x52>
 8009c00:	3904      	subs	r1, #4
 8009c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c06:	459c      	cmp	ip, r3
 8009c08:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c0c:	d8f9      	bhi.n	8009c02 <__lshift+0x9a>
 8009c0e:	e7e4      	b.n	8009bda <__lshift+0x72>

08009c10 <__mcmp>:
 8009c10:	6903      	ldr	r3, [r0, #16]
 8009c12:	690a      	ldr	r2, [r1, #16]
 8009c14:	b530      	push	{r4, r5, lr}
 8009c16:	1a9b      	subs	r3, r3, r2
 8009c18:	d10c      	bne.n	8009c34 <__mcmp+0x24>
 8009c1a:	0092      	lsls	r2, r2, #2
 8009c1c:	3014      	adds	r0, #20
 8009c1e:	3114      	adds	r1, #20
 8009c20:	1884      	adds	r4, r0, r2
 8009c22:	4411      	add	r1, r2
 8009c24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c2c:	4295      	cmp	r5, r2
 8009c2e:	d003      	beq.n	8009c38 <__mcmp+0x28>
 8009c30:	d305      	bcc.n	8009c3e <__mcmp+0x2e>
 8009c32:	2301      	movs	r3, #1
 8009c34:	4618      	mov	r0, r3
 8009c36:	bd30      	pop	{r4, r5, pc}
 8009c38:	42a0      	cmp	r0, r4
 8009c3a:	d3f3      	bcc.n	8009c24 <__mcmp+0x14>
 8009c3c:	e7fa      	b.n	8009c34 <__mcmp+0x24>
 8009c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c42:	e7f7      	b.n	8009c34 <__mcmp+0x24>

08009c44 <__mdiff>:
 8009c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c48:	460d      	mov	r5, r1
 8009c4a:	4607      	mov	r7, r0
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	4628      	mov	r0, r5
 8009c50:	4614      	mov	r4, r2
 8009c52:	f7ff ffdd 	bl	8009c10 <__mcmp>
 8009c56:	1e06      	subs	r6, r0, #0
 8009c58:	d108      	bne.n	8009c6c <__mdiff+0x28>
 8009c5a:	4631      	mov	r1, r6
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	f7ff fdc2 	bl	80097e6 <_Balloc>
 8009c62:	2301      	movs	r3, #1
 8009c64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6c:	bfa4      	itt	ge
 8009c6e:	4623      	movge	r3, r4
 8009c70:	462c      	movge	r4, r5
 8009c72:	4638      	mov	r0, r7
 8009c74:	6861      	ldr	r1, [r4, #4]
 8009c76:	bfa6      	itte	ge
 8009c78:	461d      	movge	r5, r3
 8009c7a:	2600      	movge	r6, #0
 8009c7c:	2601      	movlt	r6, #1
 8009c7e:	f7ff fdb2 	bl	80097e6 <_Balloc>
 8009c82:	f04f 0e00 	mov.w	lr, #0
 8009c86:	60c6      	str	r6, [r0, #12]
 8009c88:	692b      	ldr	r3, [r5, #16]
 8009c8a:	6926      	ldr	r6, [r4, #16]
 8009c8c:	f104 0214 	add.w	r2, r4, #20
 8009c90:	f105 0914 	add.w	r9, r5, #20
 8009c94:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009c98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009c9c:	f100 0114 	add.w	r1, r0, #20
 8009ca0:	f852 ab04 	ldr.w	sl, [r2], #4
 8009ca4:	f859 5b04 	ldr.w	r5, [r9], #4
 8009ca8:	fa1f f38a 	uxth.w	r3, sl
 8009cac:	4473      	add	r3, lr
 8009cae:	b2ac      	uxth	r4, r5
 8009cb0:	1b1b      	subs	r3, r3, r4
 8009cb2:	0c2c      	lsrs	r4, r5, #16
 8009cb4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009cb8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009cc2:	45c8      	cmp	r8, r9
 8009cc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009cc8:	4694      	mov	ip, r2
 8009cca:	f841 4b04 	str.w	r4, [r1], #4
 8009cce:	d8e7      	bhi.n	8009ca0 <__mdiff+0x5c>
 8009cd0:	45bc      	cmp	ip, r7
 8009cd2:	d304      	bcc.n	8009cde <__mdiff+0x9a>
 8009cd4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009cd8:	b183      	cbz	r3, 8009cfc <__mdiff+0xb8>
 8009cda:	6106      	str	r6, [r0, #16]
 8009cdc:	e7c4      	b.n	8009c68 <__mdiff+0x24>
 8009cde:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009ce2:	b2a2      	uxth	r2, r4
 8009ce4:	4472      	add	r2, lr
 8009ce6:	1413      	asrs	r3, r2, #16
 8009ce8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009cec:	b292      	uxth	r2, r2
 8009cee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009cf2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009cf6:	f841 2b04 	str.w	r2, [r1], #4
 8009cfa:	e7e9      	b.n	8009cd0 <__mdiff+0x8c>
 8009cfc:	3e01      	subs	r6, #1
 8009cfe:	e7e9      	b.n	8009cd4 <__mdiff+0x90>

08009d00 <__d2b>:
 8009d00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009d04:	461c      	mov	r4, r3
 8009d06:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	4690      	mov	r8, r2
 8009d0e:	f7ff fd6a 	bl	80097e6 <_Balloc>
 8009d12:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009d16:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009d1a:	4607      	mov	r7, r0
 8009d1c:	bb34      	cbnz	r4, 8009d6c <__d2b+0x6c>
 8009d1e:	9201      	str	r2, [sp, #4]
 8009d20:	f1b8 0200 	subs.w	r2, r8, #0
 8009d24:	d027      	beq.n	8009d76 <__d2b+0x76>
 8009d26:	a802      	add	r0, sp, #8
 8009d28:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009d2c:	f7ff fe00 	bl	8009930 <__lo0bits>
 8009d30:	9900      	ldr	r1, [sp, #0]
 8009d32:	b1f0      	cbz	r0, 8009d72 <__d2b+0x72>
 8009d34:	9a01      	ldr	r2, [sp, #4]
 8009d36:	f1c0 0320 	rsb	r3, r0, #32
 8009d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d3e:	430b      	orrs	r3, r1
 8009d40:	40c2      	lsrs	r2, r0
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	9201      	str	r2, [sp, #4]
 8009d46:	9b01      	ldr	r3, [sp, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	bf14      	ite	ne
 8009d4c:	2102      	movne	r1, #2
 8009d4e:	2101      	moveq	r1, #1
 8009d50:	61bb      	str	r3, [r7, #24]
 8009d52:	6139      	str	r1, [r7, #16]
 8009d54:	b1c4      	cbz	r4, 8009d88 <__d2b+0x88>
 8009d56:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009d5a:	4404      	add	r4, r0
 8009d5c:	6034      	str	r4, [r6, #0]
 8009d5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d62:	6028      	str	r0, [r5, #0]
 8009d64:	4638      	mov	r0, r7
 8009d66:	b002      	add	sp, #8
 8009d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d6c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009d70:	e7d5      	b.n	8009d1e <__d2b+0x1e>
 8009d72:	6179      	str	r1, [r7, #20]
 8009d74:	e7e7      	b.n	8009d46 <__d2b+0x46>
 8009d76:	a801      	add	r0, sp, #4
 8009d78:	f7ff fdda 	bl	8009930 <__lo0bits>
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	9b01      	ldr	r3, [sp, #4]
 8009d80:	6139      	str	r1, [r7, #16]
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	3020      	adds	r0, #32
 8009d86:	e7e5      	b.n	8009d54 <__d2b+0x54>
 8009d88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d8c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009d90:	6030      	str	r0, [r6, #0]
 8009d92:	6918      	ldr	r0, [r3, #16]
 8009d94:	f7ff fdad 	bl	80098f2 <__hi0bits>
 8009d98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009d9c:	e7e1      	b.n	8009d62 <__d2b+0x62>

08009d9e <_calloc_r>:
 8009d9e:	b538      	push	{r3, r4, r5, lr}
 8009da0:	fb02 f401 	mul.w	r4, r2, r1
 8009da4:	4621      	mov	r1, r4
 8009da6:	f000 f855 	bl	8009e54 <_malloc_r>
 8009daa:	4605      	mov	r5, r0
 8009dac:	b118      	cbz	r0, 8009db6 <_calloc_r+0x18>
 8009dae:	4622      	mov	r2, r4
 8009db0:	2100      	movs	r1, #0
 8009db2:	f7fe fa0f 	bl	80081d4 <memset>
 8009db6:	4628      	mov	r0, r5
 8009db8:	bd38      	pop	{r3, r4, r5, pc}
	...

08009dbc <_free_r>:
 8009dbc:	b538      	push	{r3, r4, r5, lr}
 8009dbe:	4605      	mov	r5, r0
 8009dc0:	2900      	cmp	r1, #0
 8009dc2:	d043      	beq.n	8009e4c <_free_r+0x90>
 8009dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dc8:	1f0c      	subs	r4, r1, #4
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	bfb8      	it	lt
 8009dce:	18e4      	addlt	r4, r4, r3
 8009dd0:	f000 fa27 	bl	800a222 <__malloc_lock>
 8009dd4:	4a1e      	ldr	r2, [pc, #120]	; (8009e50 <_free_r+0x94>)
 8009dd6:	6813      	ldr	r3, [r2, #0]
 8009dd8:	4610      	mov	r0, r2
 8009dda:	b933      	cbnz	r3, 8009dea <_free_r+0x2e>
 8009ddc:	6063      	str	r3, [r4, #4]
 8009dde:	6014      	str	r4, [r2, #0]
 8009de0:	4628      	mov	r0, r5
 8009de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009de6:	f000 ba1d 	b.w	800a224 <__malloc_unlock>
 8009dea:	42a3      	cmp	r3, r4
 8009dec:	d90b      	bls.n	8009e06 <_free_r+0x4a>
 8009dee:	6821      	ldr	r1, [r4, #0]
 8009df0:	1862      	adds	r2, r4, r1
 8009df2:	4293      	cmp	r3, r2
 8009df4:	bf01      	itttt	eq
 8009df6:	681a      	ldreq	r2, [r3, #0]
 8009df8:	685b      	ldreq	r3, [r3, #4]
 8009dfa:	1852      	addeq	r2, r2, r1
 8009dfc:	6022      	streq	r2, [r4, #0]
 8009dfe:	6063      	str	r3, [r4, #4]
 8009e00:	6004      	str	r4, [r0, #0]
 8009e02:	e7ed      	b.n	8009de0 <_free_r+0x24>
 8009e04:	4613      	mov	r3, r2
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	b10a      	cbz	r2, 8009e0e <_free_r+0x52>
 8009e0a:	42a2      	cmp	r2, r4
 8009e0c:	d9fa      	bls.n	8009e04 <_free_r+0x48>
 8009e0e:	6819      	ldr	r1, [r3, #0]
 8009e10:	1858      	adds	r0, r3, r1
 8009e12:	42a0      	cmp	r0, r4
 8009e14:	d10b      	bne.n	8009e2e <_free_r+0x72>
 8009e16:	6820      	ldr	r0, [r4, #0]
 8009e18:	4401      	add	r1, r0
 8009e1a:	1858      	adds	r0, r3, r1
 8009e1c:	4282      	cmp	r2, r0
 8009e1e:	6019      	str	r1, [r3, #0]
 8009e20:	d1de      	bne.n	8009de0 <_free_r+0x24>
 8009e22:	6810      	ldr	r0, [r2, #0]
 8009e24:	6852      	ldr	r2, [r2, #4]
 8009e26:	4401      	add	r1, r0
 8009e28:	6019      	str	r1, [r3, #0]
 8009e2a:	605a      	str	r2, [r3, #4]
 8009e2c:	e7d8      	b.n	8009de0 <_free_r+0x24>
 8009e2e:	d902      	bls.n	8009e36 <_free_r+0x7a>
 8009e30:	230c      	movs	r3, #12
 8009e32:	602b      	str	r3, [r5, #0]
 8009e34:	e7d4      	b.n	8009de0 <_free_r+0x24>
 8009e36:	6820      	ldr	r0, [r4, #0]
 8009e38:	1821      	adds	r1, r4, r0
 8009e3a:	428a      	cmp	r2, r1
 8009e3c:	bf01      	itttt	eq
 8009e3e:	6811      	ldreq	r1, [r2, #0]
 8009e40:	6852      	ldreq	r2, [r2, #4]
 8009e42:	1809      	addeq	r1, r1, r0
 8009e44:	6021      	streq	r1, [r4, #0]
 8009e46:	6062      	str	r2, [r4, #4]
 8009e48:	605c      	str	r4, [r3, #4]
 8009e4a:	e7c9      	b.n	8009de0 <_free_r+0x24>
 8009e4c:	bd38      	pop	{r3, r4, r5, pc}
 8009e4e:	bf00      	nop
 8009e50:	2000064c 	.word	0x2000064c

08009e54 <_malloc_r>:
 8009e54:	b570      	push	{r4, r5, r6, lr}
 8009e56:	1ccd      	adds	r5, r1, #3
 8009e58:	f025 0503 	bic.w	r5, r5, #3
 8009e5c:	3508      	adds	r5, #8
 8009e5e:	2d0c      	cmp	r5, #12
 8009e60:	bf38      	it	cc
 8009e62:	250c      	movcc	r5, #12
 8009e64:	2d00      	cmp	r5, #0
 8009e66:	4606      	mov	r6, r0
 8009e68:	db01      	blt.n	8009e6e <_malloc_r+0x1a>
 8009e6a:	42a9      	cmp	r1, r5
 8009e6c:	d903      	bls.n	8009e76 <_malloc_r+0x22>
 8009e6e:	230c      	movs	r3, #12
 8009e70:	6033      	str	r3, [r6, #0]
 8009e72:	2000      	movs	r0, #0
 8009e74:	bd70      	pop	{r4, r5, r6, pc}
 8009e76:	f000 f9d4 	bl	800a222 <__malloc_lock>
 8009e7a:	4a21      	ldr	r2, [pc, #132]	; (8009f00 <_malloc_r+0xac>)
 8009e7c:	6814      	ldr	r4, [r2, #0]
 8009e7e:	4621      	mov	r1, r4
 8009e80:	b991      	cbnz	r1, 8009ea8 <_malloc_r+0x54>
 8009e82:	4c20      	ldr	r4, [pc, #128]	; (8009f04 <_malloc_r+0xb0>)
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	b91b      	cbnz	r3, 8009e90 <_malloc_r+0x3c>
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f000 f98f 	bl	800a1ac <_sbrk_r>
 8009e8e:	6020      	str	r0, [r4, #0]
 8009e90:	4629      	mov	r1, r5
 8009e92:	4630      	mov	r0, r6
 8009e94:	f000 f98a 	bl	800a1ac <_sbrk_r>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d124      	bne.n	8009ee6 <_malloc_r+0x92>
 8009e9c:	230c      	movs	r3, #12
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	6033      	str	r3, [r6, #0]
 8009ea2:	f000 f9bf 	bl	800a224 <__malloc_unlock>
 8009ea6:	e7e4      	b.n	8009e72 <_malloc_r+0x1e>
 8009ea8:	680b      	ldr	r3, [r1, #0]
 8009eaa:	1b5b      	subs	r3, r3, r5
 8009eac:	d418      	bmi.n	8009ee0 <_malloc_r+0x8c>
 8009eae:	2b0b      	cmp	r3, #11
 8009eb0:	d90f      	bls.n	8009ed2 <_malloc_r+0x7e>
 8009eb2:	600b      	str	r3, [r1, #0]
 8009eb4:	18cc      	adds	r4, r1, r3
 8009eb6:	50cd      	str	r5, [r1, r3]
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f000 f9b3 	bl	800a224 <__malloc_unlock>
 8009ebe:	f104 000b 	add.w	r0, r4, #11
 8009ec2:	1d23      	adds	r3, r4, #4
 8009ec4:	f020 0007 	bic.w	r0, r0, #7
 8009ec8:	1ac3      	subs	r3, r0, r3
 8009eca:	d0d3      	beq.n	8009e74 <_malloc_r+0x20>
 8009ecc:	425a      	negs	r2, r3
 8009ece:	50e2      	str	r2, [r4, r3]
 8009ed0:	e7d0      	b.n	8009e74 <_malloc_r+0x20>
 8009ed2:	684b      	ldr	r3, [r1, #4]
 8009ed4:	428c      	cmp	r4, r1
 8009ed6:	bf16      	itet	ne
 8009ed8:	6063      	strne	r3, [r4, #4]
 8009eda:	6013      	streq	r3, [r2, #0]
 8009edc:	460c      	movne	r4, r1
 8009ede:	e7eb      	b.n	8009eb8 <_malloc_r+0x64>
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	6849      	ldr	r1, [r1, #4]
 8009ee4:	e7cc      	b.n	8009e80 <_malloc_r+0x2c>
 8009ee6:	1cc4      	adds	r4, r0, #3
 8009ee8:	f024 0403 	bic.w	r4, r4, #3
 8009eec:	42a0      	cmp	r0, r4
 8009eee:	d005      	beq.n	8009efc <_malloc_r+0xa8>
 8009ef0:	1a21      	subs	r1, r4, r0
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f000 f95a 	bl	800a1ac <_sbrk_r>
 8009ef8:	3001      	adds	r0, #1
 8009efa:	d0cf      	beq.n	8009e9c <_malloc_r+0x48>
 8009efc:	6025      	str	r5, [r4, #0]
 8009efe:	e7db      	b.n	8009eb8 <_malloc_r+0x64>
 8009f00:	2000064c 	.word	0x2000064c
 8009f04:	20000650 	.word	0x20000650

08009f08 <__ssputs_r>:
 8009f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f0c:	688e      	ldr	r6, [r1, #8]
 8009f0e:	4682      	mov	sl, r0
 8009f10:	429e      	cmp	r6, r3
 8009f12:	460c      	mov	r4, r1
 8009f14:	4690      	mov	r8, r2
 8009f16:	4699      	mov	r9, r3
 8009f18:	d837      	bhi.n	8009f8a <__ssputs_r+0x82>
 8009f1a:	898a      	ldrh	r2, [r1, #12]
 8009f1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f20:	d031      	beq.n	8009f86 <__ssputs_r+0x7e>
 8009f22:	2302      	movs	r3, #2
 8009f24:	6825      	ldr	r5, [r4, #0]
 8009f26:	6909      	ldr	r1, [r1, #16]
 8009f28:	1a6f      	subs	r7, r5, r1
 8009f2a:	6965      	ldr	r5, [r4, #20]
 8009f2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f30:	fb95 f5f3 	sdiv	r5, r5, r3
 8009f34:	f109 0301 	add.w	r3, r9, #1
 8009f38:	443b      	add	r3, r7
 8009f3a:	429d      	cmp	r5, r3
 8009f3c:	bf38      	it	cc
 8009f3e:	461d      	movcc	r5, r3
 8009f40:	0553      	lsls	r3, r2, #21
 8009f42:	d530      	bpl.n	8009fa6 <__ssputs_r+0x9e>
 8009f44:	4629      	mov	r1, r5
 8009f46:	f7ff ff85 	bl	8009e54 <_malloc_r>
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	b950      	cbnz	r0, 8009f64 <__ssputs_r+0x5c>
 8009f4e:	230c      	movs	r3, #12
 8009f50:	f04f 30ff 	mov.w	r0, #4294967295
 8009f54:	f8ca 3000 	str.w	r3, [sl]
 8009f58:	89a3      	ldrh	r3, [r4, #12]
 8009f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f5e:	81a3      	strh	r3, [r4, #12]
 8009f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f64:	463a      	mov	r2, r7
 8009f66:	6921      	ldr	r1, [r4, #16]
 8009f68:	f7ff fc32 	bl	80097d0 <memcpy>
 8009f6c:	89a3      	ldrh	r3, [r4, #12]
 8009f6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f76:	81a3      	strh	r3, [r4, #12]
 8009f78:	6126      	str	r6, [r4, #16]
 8009f7a:	443e      	add	r6, r7
 8009f7c:	6026      	str	r6, [r4, #0]
 8009f7e:	464e      	mov	r6, r9
 8009f80:	6165      	str	r5, [r4, #20]
 8009f82:	1bed      	subs	r5, r5, r7
 8009f84:	60a5      	str	r5, [r4, #8]
 8009f86:	454e      	cmp	r6, r9
 8009f88:	d900      	bls.n	8009f8c <__ssputs_r+0x84>
 8009f8a:	464e      	mov	r6, r9
 8009f8c:	4632      	mov	r2, r6
 8009f8e:	4641      	mov	r1, r8
 8009f90:	6820      	ldr	r0, [r4, #0]
 8009f92:	f000 f92d 	bl	800a1f0 <memmove>
 8009f96:	68a3      	ldr	r3, [r4, #8]
 8009f98:	2000      	movs	r0, #0
 8009f9a:	1b9b      	subs	r3, r3, r6
 8009f9c:	60a3      	str	r3, [r4, #8]
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	441e      	add	r6, r3
 8009fa2:	6026      	str	r6, [r4, #0]
 8009fa4:	e7dc      	b.n	8009f60 <__ssputs_r+0x58>
 8009fa6:	462a      	mov	r2, r5
 8009fa8:	f000 f93d 	bl	800a226 <_realloc_r>
 8009fac:	4606      	mov	r6, r0
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d1e2      	bne.n	8009f78 <__ssputs_r+0x70>
 8009fb2:	6921      	ldr	r1, [r4, #16]
 8009fb4:	4650      	mov	r0, sl
 8009fb6:	f7ff ff01 	bl	8009dbc <_free_r>
 8009fba:	e7c8      	b.n	8009f4e <__ssputs_r+0x46>

08009fbc <_svfiprintf_r>:
 8009fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc0:	461d      	mov	r5, r3
 8009fc2:	898b      	ldrh	r3, [r1, #12]
 8009fc4:	b09d      	sub	sp, #116	; 0x74
 8009fc6:	061f      	lsls	r7, r3, #24
 8009fc8:	4680      	mov	r8, r0
 8009fca:	460c      	mov	r4, r1
 8009fcc:	4616      	mov	r6, r2
 8009fce:	d50f      	bpl.n	8009ff0 <_svfiprintf_r+0x34>
 8009fd0:	690b      	ldr	r3, [r1, #16]
 8009fd2:	b96b      	cbnz	r3, 8009ff0 <_svfiprintf_r+0x34>
 8009fd4:	2140      	movs	r1, #64	; 0x40
 8009fd6:	f7ff ff3d 	bl	8009e54 <_malloc_r>
 8009fda:	6020      	str	r0, [r4, #0]
 8009fdc:	6120      	str	r0, [r4, #16]
 8009fde:	b928      	cbnz	r0, 8009fec <_svfiprintf_r+0x30>
 8009fe0:	230c      	movs	r3, #12
 8009fe2:	f8c8 3000 	str.w	r3, [r8]
 8009fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fea:	e0c8      	b.n	800a17e <_svfiprintf_r+0x1c2>
 8009fec:	2340      	movs	r3, #64	; 0x40
 8009fee:	6163      	str	r3, [r4, #20]
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff4:	2320      	movs	r3, #32
 8009ff6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ffa:	2330      	movs	r3, #48	; 0x30
 8009ffc:	f04f 0b01 	mov.w	fp, #1
 800a000:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a004:	9503      	str	r5, [sp, #12]
 800a006:	4637      	mov	r7, r6
 800a008:	463d      	mov	r5, r7
 800a00a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a00e:	b10b      	cbz	r3, 800a014 <_svfiprintf_r+0x58>
 800a010:	2b25      	cmp	r3, #37	; 0x25
 800a012:	d13e      	bne.n	800a092 <_svfiprintf_r+0xd6>
 800a014:	ebb7 0a06 	subs.w	sl, r7, r6
 800a018:	d00b      	beq.n	800a032 <_svfiprintf_r+0x76>
 800a01a:	4653      	mov	r3, sl
 800a01c:	4632      	mov	r2, r6
 800a01e:	4621      	mov	r1, r4
 800a020:	4640      	mov	r0, r8
 800a022:	f7ff ff71 	bl	8009f08 <__ssputs_r>
 800a026:	3001      	adds	r0, #1
 800a028:	f000 80a4 	beq.w	800a174 <_svfiprintf_r+0x1b8>
 800a02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02e:	4453      	add	r3, sl
 800a030:	9309      	str	r3, [sp, #36]	; 0x24
 800a032:	783b      	ldrb	r3, [r7, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 809d 	beq.w	800a174 <_svfiprintf_r+0x1b8>
 800a03a:	2300      	movs	r3, #0
 800a03c:	f04f 32ff 	mov.w	r2, #4294967295
 800a040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a044:	9304      	str	r3, [sp, #16]
 800a046:	9307      	str	r3, [sp, #28]
 800a048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a04c:	931a      	str	r3, [sp, #104]	; 0x68
 800a04e:	462f      	mov	r7, r5
 800a050:	2205      	movs	r2, #5
 800a052:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a056:	4850      	ldr	r0, [pc, #320]	; (800a198 <_svfiprintf_r+0x1dc>)
 800a058:	f7ff fbac 	bl	80097b4 <memchr>
 800a05c:	9b04      	ldr	r3, [sp, #16]
 800a05e:	b9d0      	cbnz	r0, 800a096 <_svfiprintf_r+0xda>
 800a060:	06d9      	lsls	r1, r3, #27
 800a062:	bf44      	itt	mi
 800a064:	2220      	movmi	r2, #32
 800a066:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a06a:	071a      	lsls	r2, r3, #28
 800a06c:	bf44      	itt	mi
 800a06e:	222b      	movmi	r2, #43	; 0x2b
 800a070:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a074:	782a      	ldrb	r2, [r5, #0]
 800a076:	2a2a      	cmp	r2, #42	; 0x2a
 800a078:	d015      	beq.n	800a0a6 <_svfiprintf_r+0xea>
 800a07a:	462f      	mov	r7, r5
 800a07c:	2000      	movs	r0, #0
 800a07e:	250a      	movs	r5, #10
 800a080:	9a07      	ldr	r2, [sp, #28]
 800a082:	4639      	mov	r1, r7
 800a084:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a088:	3b30      	subs	r3, #48	; 0x30
 800a08a:	2b09      	cmp	r3, #9
 800a08c:	d94d      	bls.n	800a12a <_svfiprintf_r+0x16e>
 800a08e:	b1b8      	cbz	r0, 800a0c0 <_svfiprintf_r+0x104>
 800a090:	e00f      	b.n	800a0b2 <_svfiprintf_r+0xf6>
 800a092:	462f      	mov	r7, r5
 800a094:	e7b8      	b.n	800a008 <_svfiprintf_r+0x4c>
 800a096:	4a40      	ldr	r2, [pc, #256]	; (800a198 <_svfiprintf_r+0x1dc>)
 800a098:	463d      	mov	r5, r7
 800a09a:	1a80      	subs	r0, r0, r2
 800a09c:	fa0b f000 	lsl.w	r0, fp, r0
 800a0a0:	4318      	orrs	r0, r3
 800a0a2:	9004      	str	r0, [sp, #16]
 800a0a4:	e7d3      	b.n	800a04e <_svfiprintf_r+0x92>
 800a0a6:	9a03      	ldr	r2, [sp, #12]
 800a0a8:	1d11      	adds	r1, r2, #4
 800a0aa:	6812      	ldr	r2, [r2, #0]
 800a0ac:	9103      	str	r1, [sp, #12]
 800a0ae:	2a00      	cmp	r2, #0
 800a0b0:	db01      	blt.n	800a0b6 <_svfiprintf_r+0xfa>
 800a0b2:	9207      	str	r2, [sp, #28]
 800a0b4:	e004      	b.n	800a0c0 <_svfiprintf_r+0x104>
 800a0b6:	4252      	negs	r2, r2
 800a0b8:	f043 0302 	orr.w	r3, r3, #2
 800a0bc:	9207      	str	r2, [sp, #28]
 800a0be:	9304      	str	r3, [sp, #16]
 800a0c0:	783b      	ldrb	r3, [r7, #0]
 800a0c2:	2b2e      	cmp	r3, #46	; 0x2e
 800a0c4:	d10c      	bne.n	800a0e0 <_svfiprintf_r+0x124>
 800a0c6:	787b      	ldrb	r3, [r7, #1]
 800a0c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ca:	d133      	bne.n	800a134 <_svfiprintf_r+0x178>
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	3702      	adds	r7, #2
 800a0d0:	1d1a      	adds	r2, r3, #4
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	9203      	str	r2, [sp, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	bfb8      	it	lt
 800a0da:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0de:	9305      	str	r3, [sp, #20]
 800a0e0:	4d2e      	ldr	r5, [pc, #184]	; (800a19c <_svfiprintf_r+0x1e0>)
 800a0e2:	2203      	movs	r2, #3
 800a0e4:	7839      	ldrb	r1, [r7, #0]
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f7ff fb64 	bl	80097b4 <memchr>
 800a0ec:	b138      	cbz	r0, 800a0fe <_svfiprintf_r+0x142>
 800a0ee:	2340      	movs	r3, #64	; 0x40
 800a0f0:	1b40      	subs	r0, r0, r5
 800a0f2:	fa03 f000 	lsl.w	r0, r3, r0
 800a0f6:	9b04      	ldr	r3, [sp, #16]
 800a0f8:	3701      	adds	r7, #1
 800a0fa:	4303      	orrs	r3, r0
 800a0fc:	9304      	str	r3, [sp, #16]
 800a0fe:	7839      	ldrb	r1, [r7, #0]
 800a100:	2206      	movs	r2, #6
 800a102:	4827      	ldr	r0, [pc, #156]	; (800a1a0 <_svfiprintf_r+0x1e4>)
 800a104:	1c7e      	adds	r6, r7, #1
 800a106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a10a:	f7ff fb53 	bl	80097b4 <memchr>
 800a10e:	2800      	cmp	r0, #0
 800a110:	d038      	beq.n	800a184 <_svfiprintf_r+0x1c8>
 800a112:	4b24      	ldr	r3, [pc, #144]	; (800a1a4 <_svfiprintf_r+0x1e8>)
 800a114:	bb13      	cbnz	r3, 800a15c <_svfiprintf_r+0x1a0>
 800a116:	9b03      	ldr	r3, [sp, #12]
 800a118:	3307      	adds	r3, #7
 800a11a:	f023 0307 	bic.w	r3, r3, #7
 800a11e:	3308      	adds	r3, #8
 800a120:	9303      	str	r3, [sp, #12]
 800a122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a124:	444b      	add	r3, r9
 800a126:	9309      	str	r3, [sp, #36]	; 0x24
 800a128:	e76d      	b.n	800a006 <_svfiprintf_r+0x4a>
 800a12a:	fb05 3202 	mla	r2, r5, r2, r3
 800a12e:	2001      	movs	r0, #1
 800a130:	460f      	mov	r7, r1
 800a132:	e7a6      	b.n	800a082 <_svfiprintf_r+0xc6>
 800a134:	2300      	movs	r3, #0
 800a136:	250a      	movs	r5, #10
 800a138:	4619      	mov	r1, r3
 800a13a:	3701      	adds	r7, #1
 800a13c:	9305      	str	r3, [sp, #20]
 800a13e:	4638      	mov	r0, r7
 800a140:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a144:	3a30      	subs	r2, #48	; 0x30
 800a146:	2a09      	cmp	r2, #9
 800a148:	d903      	bls.n	800a152 <_svfiprintf_r+0x196>
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d0c8      	beq.n	800a0e0 <_svfiprintf_r+0x124>
 800a14e:	9105      	str	r1, [sp, #20]
 800a150:	e7c6      	b.n	800a0e0 <_svfiprintf_r+0x124>
 800a152:	fb05 2101 	mla	r1, r5, r1, r2
 800a156:	2301      	movs	r3, #1
 800a158:	4607      	mov	r7, r0
 800a15a:	e7f0      	b.n	800a13e <_svfiprintf_r+0x182>
 800a15c:	ab03      	add	r3, sp, #12
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	4622      	mov	r2, r4
 800a162:	4b11      	ldr	r3, [pc, #68]	; (800a1a8 <_svfiprintf_r+0x1ec>)
 800a164:	a904      	add	r1, sp, #16
 800a166:	4640      	mov	r0, r8
 800a168:	f7fe f8ce 	bl	8008308 <_printf_float>
 800a16c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a170:	4681      	mov	r9, r0
 800a172:	d1d6      	bne.n	800a122 <_svfiprintf_r+0x166>
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	065b      	lsls	r3, r3, #25
 800a178:	f53f af35 	bmi.w	8009fe6 <_svfiprintf_r+0x2a>
 800a17c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a17e:	b01d      	add	sp, #116	; 0x74
 800a180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a184:	ab03      	add	r3, sp, #12
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	4622      	mov	r2, r4
 800a18a:	4b07      	ldr	r3, [pc, #28]	; (800a1a8 <_svfiprintf_r+0x1ec>)
 800a18c:	a904      	add	r1, sp, #16
 800a18e:	4640      	mov	r0, r8
 800a190:	f7fe fb66 	bl	8008860 <_printf_i>
 800a194:	e7ea      	b.n	800a16c <_svfiprintf_r+0x1b0>
 800a196:	bf00      	nop
 800a198:	0800add4 	.word	0x0800add4
 800a19c:	0800adda 	.word	0x0800adda
 800a1a0:	0800adde 	.word	0x0800adde
 800a1a4:	08008309 	.word	0x08008309
 800a1a8:	08009f09 	.word	0x08009f09

0800a1ac <_sbrk_r>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	4c05      	ldr	r4, [pc, #20]	; (800a1c8 <_sbrk_r+0x1c>)
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	f7f9 ff5c 	bl	8004074 <_sbrk>
 800a1bc:	1c43      	adds	r3, r0, #1
 800a1be:	d102      	bne.n	800a1c6 <_sbrk_r+0x1a>
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	b103      	cbz	r3, 800a1c6 <_sbrk_r+0x1a>
 800a1c4:	602b      	str	r3, [r5, #0]
 800a1c6:	bd38      	pop	{r3, r4, r5, pc}
 800a1c8:	200007e0 	.word	0x200007e0

0800a1cc <__ascii_mbtowc>:
 800a1cc:	b082      	sub	sp, #8
 800a1ce:	b901      	cbnz	r1, 800a1d2 <__ascii_mbtowc+0x6>
 800a1d0:	a901      	add	r1, sp, #4
 800a1d2:	b142      	cbz	r2, 800a1e6 <__ascii_mbtowc+0x1a>
 800a1d4:	b14b      	cbz	r3, 800a1ea <__ascii_mbtowc+0x1e>
 800a1d6:	7813      	ldrb	r3, [r2, #0]
 800a1d8:	600b      	str	r3, [r1, #0]
 800a1da:	7812      	ldrb	r2, [r2, #0]
 800a1dc:	1c10      	adds	r0, r2, #0
 800a1de:	bf18      	it	ne
 800a1e0:	2001      	movne	r0, #1
 800a1e2:	b002      	add	sp, #8
 800a1e4:	4770      	bx	lr
 800a1e6:	4610      	mov	r0, r2
 800a1e8:	e7fb      	b.n	800a1e2 <__ascii_mbtowc+0x16>
 800a1ea:	f06f 0001 	mvn.w	r0, #1
 800a1ee:	e7f8      	b.n	800a1e2 <__ascii_mbtowc+0x16>

0800a1f0 <memmove>:
 800a1f0:	4288      	cmp	r0, r1
 800a1f2:	b510      	push	{r4, lr}
 800a1f4:	eb01 0302 	add.w	r3, r1, r2
 800a1f8:	d807      	bhi.n	800a20a <memmove+0x1a>
 800a1fa:	1e42      	subs	r2, r0, #1
 800a1fc:	4299      	cmp	r1, r3
 800a1fe:	d00a      	beq.n	800a216 <memmove+0x26>
 800a200:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a204:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a208:	e7f8      	b.n	800a1fc <memmove+0xc>
 800a20a:	4283      	cmp	r3, r0
 800a20c:	d9f5      	bls.n	800a1fa <memmove+0xa>
 800a20e:	1881      	adds	r1, r0, r2
 800a210:	1ad2      	subs	r2, r2, r3
 800a212:	42d3      	cmn	r3, r2
 800a214:	d100      	bne.n	800a218 <memmove+0x28>
 800a216:	bd10      	pop	{r4, pc}
 800a218:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a21c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a220:	e7f7      	b.n	800a212 <memmove+0x22>

0800a222 <__malloc_lock>:
 800a222:	4770      	bx	lr

0800a224 <__malloc_unlock>:
 800a224:	4770      	bx	lr

0800a226 <_realloc_r>:
 800a226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a228:	4607      	mov	r7, r0
 800a22a:	4614      	mov	r4, r2
 800a22c:	460e      	mov	r6, r1
 800a22e:	b921      	cbnz	r1, 800a23a <_realloc_r+0x14>
 800a230:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a234:	4611      	mov	r1, r2
 800a236:	f7ff be0d 	b.w	8009e54 <_malloc_r>
 800a23a:	b922      	cbnz	r2, 800a246 <_realloc_r+0x20>
 800a23c:	f7ff fdbe 	bl	8009dbc <_free_r>
 800a240:	4625      	mov	r5, r4
 800a242:	4628      	mov	r0, r5
 800a244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a246:	f000 f821 	bl	800a28c <_malloc_usable_size_r>
 800a24a:	42a0      	cmp	r0, r4
 800a24c:	d20f      	bcs.n	800a26e <_realloc_r+0x48>
 800a24e:	4621      	mov	r1, r4
 800a250:	4638      	mov	r0, r7
 800a252:	f7ff fdff 	bl	8009e54 <_malloc_r>
 800a256:	4605      	mov	r5, r0
 800a258:	2800      	cmp	r0, #0
 800a25a:	d0f2      	beq.n	800a242 <_realloc_r+0x1c>
 800a25c:	4631      	mov	r1, r6
 800a25e:	4622      	mov	r2, r4
 800a260:	f7ff fab6 	bl	80097d0 <memcpy>
 800a264:	4631      	mov	r1, r6
 800a266:	4638      	mov	r0, r7
 800a268:	f7ff fda8 	bl	8009dbc <_free_r>
 800a26c:	e7e9      	b.n	800a242 <_realloc_r+0x1c>
 800a26e:	4635      	mov	r5, r6
 800a270:	e7e7      	b.n	800a242 <_realloc_r+0x1c>

0800a272 <__ascii_wctomb>:
 800a272:	b149      	cbz	r1, 800a288 <__ascii_wctomb+0x16>
 800a274:	2aff      	cmp	r2, #255	; 0xff
 800a276:	bf8b      	itete	hi
 800a278:	238a      	movhi	r3, #138	; 0x8a
 800a27a:	700a      	strbls	r2, [r1, #0]
 800a27c:	6003      	strhi	r3, [r0, #0]
 800a27e:	2001      	movls	r0, #1
 800a280:	bf88      	it	hi
 800a282:	f04f 30ff 	movhi.w	r0, #4294967295
 800a286:	4770      	bx	lr
 800a288:	4608      	mov	r0, r1
 800a28a:	4770      	bx	lr

0800a28c <_malloc_usable_size_r>:
 800a28c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a290:	1f18      	subs	r0, r3, #4
 800a292:	2b00      	cmp	r3, #0
 800a294:	bfbc      	itt	lt
 800a296:	580b      	ldrlt	r3, [r1, r0]
 800a298:	18c0      	addlt	r0, r0, r3
 800a29a:	4770      	bx	lr

0800a29c <_init>:
 800a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29e:	bf00      	nop
 800a2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a2:	bc08      	pop	{r3}
 800a2a4:	469e      	mov	lr, r3
 800a2a6:	4770      	bx	lr

0800a2a8 <_fini>:
 800a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2aa:	bf00      	nop
 800a2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ae:	bc08      	pop	{r3}
 800a2b0:	469e      	mov	lr, r3
 800a2b2:	4770      	bx	lr
